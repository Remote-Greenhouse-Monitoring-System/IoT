
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029c  00800200  00006606  0000669a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f67  0080049c  0080049c  00006936  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  000069d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e7ea  00000000  00000000  0000760c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c65  00000000  00000000  00015df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073e2  00000000  00000000  00019a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002914  00000000  00000000  00020e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004641  00000000  00000000  00023754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6bf  00000000  00000000  00027d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  00034454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 92 24 	jmp	0x4924	; 0x4924 <__vector_25>
      68:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__vector_36>
      94:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4f 29 	jmp	0x529e	; 0x529e <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <__vector_51>
      d0:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 54 26 	jmp	0x4ca8	; 0x4ca8 <__vector_54>
      dc:	0c 94 a6 26 	jmp	0x4d4c	; 0x4d4c <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	80 1e       	adc	r8, r16
      e6:	80 1e       	adc	r8, r16
      e8:	80 1e       	adc	r8, r16
      ea:	b7 1e       	adc	r11, r23
      ec:	bf 1e       	adc	r11, r31
      ee:	d4 1e       	adc	r13, r20
      f0:	80 1e       	adc	r8, r16
      f2:	80 1e       	adc	r8, r16
      f4:	b7 1e       	adc	r11, r23
      f6:	bf 1e       	adc	r11, r31
      f8:	71 29       	or	r23, r1
      fa:	e1 29       	or	r30, r1
      fc:	e1 29       	or	r30, r1
      fe:	e1 29       	or	r30, r1
     100:	e1 29       	or	r30, r1
     102:	e1 29       	or	r30, r1
     104:	e1 29       	or	r30, r1
     106:	e1 29       	or	r30, r1
     108:	71 29       	or	r23, r1
     10a:	e1 29       	or	r30, r1
     10c:	e1 29       	or	r30, r1
     10e:	e1 29       	or	r30, r1
     110:	e1 29       	or	r30, r1
     112:	e1 29       	or	r30, r1
     114:	e1 29       	or	r30, r1
     116:	e1 29       	or	r30, r1
     118:	73 29       	or	r23, r3
     11a:	e1 29       	or	r30, r1
     11c:	e1 29       	or	r30, r1
     11e:	e1 29       	or	r30, r1
     120:	e1 29       	or	r30, r1
     122:	e1 29       	or	r30, r1
     124:	e1 29       	or	r30, r1
     126:	e1 29       	or	r30, r1
     128:	e1 29       	or	r30, r1
     12a:	e1 29       	or	r30, r1
     12c:	e1 29       	or	r30, r1
     12e:	e1 29       	or	r30, r1
     130:	e1 29       	or	r30, r1
     132:	e1 29       	or	r30, r1
     134:	e1 29       	or	r30, r1
     136:	e1 29       	or	r30, r1
     138:	73 29       	or	r23, r3
     13a:	e1 29       	or	r30, r1
     13c:	e1 29       	or	r30, r1
     13e:	e1 29       	or	r30, r1
     140:	e1 29       	or	r30, r1
     142:	e1 29       	or	r30, r1
     144:	e1 29       	or	r30, r1
     146:	e1 29       	or	r30, r1
     148:	e1 29       	or	r30, r1
     14a:	e1 29       	or	r30, r1
     14c:	e1 29       	or	r30, r1
     14e:	e1 29       	or	r30, r1
     150:	e1 29       	or	r30, r1
     152:	e1 29       	or	r30, r1
     154:	e1 29       	or	r30, r1
     156:	e1 29       	or	r30, r1
     158:	dd 29       	or	r29, r13
     15a:	e1 29       	or	r30, r1
     15c:	e1 29       	or	r30, r1
     15e:	e1 29       	or	r30, r1
     160:	e1 29       	or	r30, r1
     162:	e1 29       	or	r30, r1
     164:	e1 29       	or	r30, r1
     166:	e1 29       	or	r30, r1
     168:	a8 29       	or	r26, r8
     16a:	e1 29       	or	r30, r1
     16c:	e1 29       	or	r30, r1
     16e:	e1 29       	or	r30, r1
     170:	e1 29       	or	r30, r1
     172:	e1 29       	or	r30, r1
     174:	e1 29       	or	r30, r1
     176:	e1 29       	or	r30, r1
     178:	e1 29       	or	r30, r1
     17a:	e1 29       	or	r30, r1
     17c:	e1 29       	or	r30, r1
     17e:	e1 29       	or	r30, r1
     180:	e1 29       	or	r30, r1
     182:	e1 29       	or	r30, r1
     184:	e1 29       	or	r30, r1
     186:	e1 29       	or	r30, r1
     188:	9c 29       	or	r25, r12
     18a:	e1 29       	or	r30, r1
     18c:	e1 29       	or	r30, r1
     18e:	e1 29       	or	r30, r1
     190:	e1 29       	or	r30, r1
     192:	e1 29       	or	r30, r1
     194:	e1 29       	or	r30, r1
     196:	e1 29       	or	r30, r1
     198:	c0 29       	or	r28, r0

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 c1 10 	call	0x2182	; 0x2182 <prvCheckTasksWaitingTermination>
     2a0:	80 91 c6 12 	lds	r24, 0x12C6	; 0x8012c6 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	8b d6       	rcall	.+3350   	; 0xfc0 <vPortYield>
     2aa:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	14 e0       	ldi	r17, 0x04	; 4
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e6 e0       	ldi	r30, 0x06	; 6
     2e6:	f6 e6       	ldi	r31, 0x66	; 102
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ac 39       	cpi	r26, 0x9C	; 156
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	24 e1       	ldi	r18, 0x14	; 20
     2fa:	ac e9       	ldi	r26, 0x9C	; 156
     2fc:	b4 e0       	ldi	r27, 0x04	; 4
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a3 30       	cpi	r26, 0x03	; 3
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 02 21 	call	0x4204	; 0x4204 <main>
     30c:	0c 94 01 33 	jmp	0x6602	; 0x6602 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
//	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	const TickType_t xFrequency = pdMS_TO_TICKS(60000); 
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 12 12 	call	0x2424	; 0x2424 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 e8       	ldi	r20, 0x88	; 136
     334:	5e e0       	ldi	r21, 0x0E	; 14
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 28 14 	call	0x2850	; 0x2850 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <measureEventGroup>
     34e:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <measureEventGroup+0x1>
     352:	81 d3       	rcall	.+1794   	; 0xa56 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <dataReadyEventGroup>
     36c:	90 91 f2 13 	lds	r25, 0x13F2	; 0x8013f2 <dataReadyEventGroup+0x1>
     370:	d2 d2       	rcall	.+1444   	; 0x916 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 16 20 	call	0x402c	; 0x402c <TempHumSensor_getTemp>
     38a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 1b 20 	call	0x4036	; 0x4036 <TempHumSensor_getHum>
     392:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <CO2_getPPM>
     39a:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <set_CO2_ppm>
			
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     39e:	4a e0       	ldi	r20, 0x0A	; 10
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     3aa:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     3ae:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <xQueueSemaphoreTake>
     3b2:	81 30       	cpi	r24, 0x01	; 1
				set_status(get_system_status());
     3b4:	79 f4       	brne	.+30     	; 0x3d4 <main_application_task+0xc2>
     3b6:	4b d0       	rcall	.+150    	; 0x44e <get_system_status>
     3b8:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <set_status>
				xSemaphoreGive(configSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     3cc:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     3d0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xQueueGenericSend>
			}
			
			lora_driver_payload_t payload = get_lora_package(2);
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	ce 01       	movw	r24, r28
     3d8:	05 96       	adiw	r24, 0x05	; 5
     3da:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3de:	0f ef       	ldi	r16, 0xFF	; 255
     3e0:	1f ef       	ldi	r17, 0xFF	; 255
     3e2:	98 01       	movw	r18, r16
     3e4:	46 e1       	ldi	r20, 0x16	; 22
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	be 01       	movw	r22, r28
     3ea:	6b 5f       	subi	r22, 0xFB	; 251
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <uplinkMessageBufferHandle>
     3f2:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <uplinkMessageBufferHandle+0x1>
     3f6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3fa:	86 31       	cpi	r24, 0x16	; 22
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	99 cf       	rjmp	.-206    	; 0x332 <main_application_task+0x20>
				printf("Timed out.\n");
     400:	8b e5       	ldi	r24, 0x5B	; 91
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
     408:	94 cf       	rjmp	.-216    	; 0x332 <main_application_task+0x20>

0000040a <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
		
	xTaskCreate(
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	08 2f       	mov	r16, r24
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 ec       	ldi	r20, 0xC0	; 192
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	66 e6       	ldi	r22, 0x66	; 102
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	89 e8       	ldi	r24, 0x89	; 137
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <set_system_status>:

void set_max_co2(uint16_t maxCO2){
	max_co2 = maxCO2;
}

void set_min_co2(uint16_t minCO2){
     432:	87 3f       	cpi	r24, 0xF7	; 247
     434:	30 f0       	brcs	.+12     	; 0x442 <set_system_status+0x10>
     436:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <__data_end>
     43a:	89 23       	and	r24, r25
     43c:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <__data_end>
     440:	08 95       	ret
     442:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <__data_end>
     446:	89 2b       	or	r24, r25
     448:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <__data_end>
     44c:	08 95       	ret

0000044e <get_system_status>:
     44e:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <__data_end>
     452:	08 95       	ret

00000454 <get_max_temperature>:
     454:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <max_temperature>
     458:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <max_temperature+0x1>
     45c:	08 95       	ret

0000045e <set_max_temperature>:
     45e:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <max_temperature+0x1>
     462:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <max_temperature>
     466:	08 95       	ret

00000468 <get_max_humidity>:
     468:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <max_humidity>
     46c:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <max_humidity+0x1>
     470:	08 95       	ret

00000472 <set_max_humidity>:
     472:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <max_humidity+0x1>
     476:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <max_humidity>
     47a:	08 95       	ret

0000047c <get_max_co2>:
     47c:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <max_co2>
     480:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <max_co2+0x1>
     484:	08 95       	ret

00000486 <set_max_co2>:
     486:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <max_co2+0x1>
     48a:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <max_co2>
     48e:	08 95       	ret

00000490 <setConfiguration>:
static uint16_t max_co2 = 0;
static uint16_t min_co2 = 0;
static uint8_t system_status = 0;


void setConfiguration(lora_driver_payload_t payload){
     490:	4f 92       	push	r4
     492:	5f 92       	push	r5
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t newMaxHum = 0;
	uint16_t newMinHum = 0;
	uint16_t newMaxCO2 = 0;
	uint16_t newMinCO2 = 0;
	
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     4b4:	8e 89       	ldd	r24, Y+22	; 0x16
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	98 2f       	mov	r25, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	2f 89       	ldd	r18, Y+23	; 0x17
     4be:	82 2b       	or	r24, r18
	newMinTemp = (payload.bytes[2] << 8 | payload.bytes[3]);
     4c0:	a8 8c       	ldd	r10, Y+24	; 0x18
     4c2:	b1 2c       	mov	r11, r1
     4c4:	ba 2c       	mov	r11, r10
     4c6:	aa 24       	eor	r10, r10
     4c8:	29 8d       	ldd	r18, Y+25	; 0x19
     4ca:	a2 2a       	or	r10, r18
	newMaxHum = (payload.bytes[4] << 8 | payload.bytes[5]);
     4cc:	6a 8c       	ldd	r6, Y+26	; 0x1a
     4ce:	71 2c       	mov	r7, r1
     4d0:	76 2c       	mov	r7, r6
     4d2:	66 24       	eor	r6, r6
     4d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     4d6:	62 2a       	or	r6, r18
	newMinHum = (payload.bytes[6] << 8 | payload.bytes[7]);
     4d8:	cc 8c       	ldd	r12, Y+28	; 0x1c
     4da:	d1 2c       	mov	r13, r1
     4dc:	dc 2c       	mov	r13, r12
     4de:	cc 24       	eor	r12, r12
     4e0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4e2:	c2 2a       	or	r12, r18
	newMaxCO2 = (payload.bytes[8] << 8 | payload.bytes[9]);
     4e4:	0e 8d       	ldd	r16, Y+30	; 0x1e
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	10 2f       	mov	r17, r16
     4ea:	00 27       	eor	r16, r16
     4ec:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4ee:	02 2b       	or	r16, r18
	newMinCO2 =(payload.bytes[10] << 8 | payload.bytes[11]);
     4f0:	e8 a0       	ldd	r14, Y+32	; 0x20
     4f2:	f1 2c       	mov	r15, r1
     4f4:	fe 2c       	mov	r15, r14
     4f6:	ee 24       	eor	r14, r14
     4f8:	29 a1       	ldd	r18, Y+33	; 0x21
     4fa:	e2 2a       	or	r14, r18
	
	set_max_temperature(newMaxTemp/10);
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fa e0       	ldi	r31, 0x0A	; 10
     500:	8f 2e       	mov	r8, r31
     502:	91 2c       	mov	r9, r1
     504:	f0 2d       	mov	r31, r0
     506:	b4 01       	movw	r22, r8
     508:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__divmodhi4>
     50c:	56 2e       	mov	r5, r22
     50e:	47 2e       	mov	r4, r23
     510:	86 2f       	mov	r24, r22
     512:	97 2f       	mov	r25, r23
     514:	a4 df       	rcall	.-184    	; 0x45e <set_max_temperature>
	set_min_temperature(newMinTemp/10);
     516:	c5 01       	movw	r24, r10
     518:	b4 01       	movw	r22, r8
     51a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__divmodhi4>
     51e:	96 2e       	mov	r9, r22
     520:	87 2e       	mov	r8, r23
	set_max_humidity(newMaxHum/10);
     522:	93 01       	movw	r18, r6
     524:	ad ec       	ldi	r26, 0xCD	; 205
     526:	bc ec       	ldi	r27, 0xCC	; 204
     528:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__umulhisi3>
     52c:	5c 01       	movw	r10, r24
     52e:	b6 94       	lsr	r11
     530:	a7 94       	ror	r10
     532:	b6 94       	lsr	r11
     534:	a7 94       	ror	r10
     536:	b6 94       	lsr	r11
     538:	a7 94       	ror	r10
     53a:	c5 01       	movw	r24, r10
     53c:	9a df       	rcall	.-204    	; 0x472 <set_max_humidity>
	set_min_humidity(newMinHum/10);
     53e:	96 01       	movw	r18, r12
     540:	ad ec       	ldi	r26, 0xCD	; 205
     542:	bc ec       	ldi	r27, 0xCC	; 204
     544:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__umulhisi3>
     548:	6c 01       	movw	r12, r24
     54a:	d6 94       	lsr	r13
     54c:	c7 94       	ror	r12
     54e:	d6 94       	lsr	r13
     550:	c7 94       	ror	r12
     552:	d6 94       	lsr	r13
     554:	c7 94       	ror	r12
	set_max_co2(newMaxCO2);
     556:	80 2f       	mov	r24, r16
     558:	91 2f       	mov	r25, r17
     55a:	95 df       	rcall	.-214    	; 0x486 <set_max_co2>
	set_min_co2(newMinCO2);
	
	printf("CONF MIN/MAX, tmp: %d/%d, hum: %d/%d, co2: %d/%d\n", newMaxTemp/10, newMinTemp/10, newMaxHum/10, newMinHum/10, newMaxCO2, newMinCO2);
     55c:	ff 92       	push	r15
     55e:	ef 92       	push	r14
     560:	1f 93       	push	r17
     562:	0f 93       	push	r16
     564:	df 92       	push	r13
     566:	cf 92       	push	r12
     568:	bf 92       	push	r11
     56a:	af 92       	push	r10
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	86 e7       	ldi	r24, 0x76	; 118
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
}
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	7f 90       	pop	r7
     5a4:	6f 90       	pop	r6
     5a6:	5f 90       	pop	r5
     5a8:	4f 90       	pop	r4
     5aa:	08 95       	ret

000005ac <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     5ac:	0f ef       	ldi	r16, 0xFF	; 255
     5ae:	1f ef       	ldi	r17, 0xFF	; 255
     5b0:	98 01       	movw	r18, r16
     5b2:	46 e1       	ldi	r20, 0x16	; 22
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	63 ea       	ldi	r22, 0xA3	; 163
     5b8:	74 e0       	ldi	r23, 0x04	; 4
     5ba:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <downlinkMessageBufferHandle>
     5be:	90 91 f8 13 	lds	r25, 0x13F8	; 0x8013f8 <downlinkMessageBufferHandle+0x1>
     5c2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     5c6:	88 23       	and	r24, r24
     5c8:	89 f3       	breq	.-30     	; 0x5ac <lora_downlink_handler_task>
// 			printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
			
			if(configSemaphore != NULL){
     5ca:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     5ce:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	59 f3       	breq	.-42     	; 0x5ac <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <xQueueSemaphoreTake>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	39 f5       	brne	.+78     	; 0x634 <lora_downlink_handler_task+0x88>
					setConfiguration(_downlink_payload);
     5e6:	8d b7       	in	r24, 0x3d	; 61
     5e8:	9e b7       	in	r25, 0x3e	; 62
     5ea:	46 97       	sbiw	r24, 0x16	; 22
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	9e bf       	out	0x3e, r25	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	8d bf       	out	0x3d, r24	; 61
     5f6:	ad b7       	in	r26, 0x3d	; 61
     5f8:	be b7       	in	r27, 0x3e	; 62
     5fa:	11 96       	adiw	r26, 0x01	; 1
     5fc:	86 e1       	ldi	r24, 0x16	; 22
     5fe:	e3 ea       	ldi	r30, 0xA3	; 163
     600:	f4 e0       	ldi	r31, 0x04	; 4
     602:	01 90       	ld	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	8a 95       	dec	r24
     608:	e1 f7       	brne	.-8      	; 0x602 <lora_downlink_handler_task+0x56>
     60a:	42 df       	rcall	.-380    	; 0x490 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	a9 01       	movw	r20, r18
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     61c:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     620:	e7 d6       	rcall	.+3534   	; 0x13f0 <xQueueGenericSend>
     622:	8d b7       	in	r24, 0x3d	; 61
     624:	9e b7       	in	r25, 0x3e	; 62
     626:	46 96       	adiw	r24, 0x16	; 22
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	9e bf       	out	0x3e, r25	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	8d bf       	out	0x3d, r24	; 61
     632:	bc cf       	rjmp	.-136    	; 0x5ac <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     634:	88 ea       	ldi	r24, 0xA8	; 168
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
     63c:	b7 cf       	rjmp	.-146    	; 0x5ac <lora_downlink_handler_task>

0000063e <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
		xTaskCreate(
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	08 2f       	mov	r16, r24
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	48 e8       	ldi	r20, 0x88	; 136
     650:	51 e0       	ldi	r21, 0x01	; 1
     652:	63 ec       	ldi	r22, 0xC3	; 195
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	86 ed       	ldi	r24, 0xD6	; 214
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <create_fan_controller_task>:
void fan_controller_task(void *pvParameters);
void temperature_action(int16_t currentTemp, int16_t thresholdTemp);
void humidity_action(uint16_t currentHum, uint16_t thresholdHum);
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2);

void create_fan_controller_task(UBaseType_t priority){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
	
	DDRA = 0xFF;
     66c:	9f ef       	ldi	r25, 0xFF	; 255
     66e:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     670:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     672:	e1 2c       	mov	r14, r1
     674:	f1 2c       	mov	r15, r1
     676:	08 2f       	mov	r16, r24
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 ec       	ldi	r20, 0xC0	; 192
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	62 ed       	ldi	r22, 0xD2	; 210
     682:	72 e0       	ldi	r23, 0x02	; 2
     684:	80 e9       	ldi	r24, 0x90	; 144
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	08 95       	ret

00000694 <temperature_action>:
			}	
		}
	}
}

void temperature_action(int16_t currentTemp, int16_t thresholdTemp){
     694:	9b 01       	movw	r18, r22
	if(currentTemp/10 > thresholdTemp){
     696:	6a e0       	ldi	r22, 0x0A	; 10
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__divmodhi4>
     69e:	26 17       	cp	r18, r22
     6a0:	37 07       	cpc	r19, r23
     6a2:	54 f4       	brge	.+20     	; 0x6b8 <temperature_action+0x24>
		servo_set_position(0, 100);
     6a4:	64 e6       	ldi	r22, 0x64	; 100
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 6f 20 	call	0x40de	; 0x40de <servo_set_position>
		PORTA &= ~(1 << 0);
     6ac:	82 b1       	in	r24, 0x02	; 2
     6ae:	8e 7f       	andi	r24, 0xFE	; 254
     6b0:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_ON);
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	be ce       	rjmp	.-644    	; 0x432 <set_system_status>
     6b6:	08 95       	ret
	}
	else{
		servo_set_position(0, -100);
     6b8:	6c e9       	ldi	r22, 0x9C	; 156
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 6f 20 	call	0x40de	; 0x40de <servo_set_position>
		PORTA |= (1 << 0);
     6c0:	82 b1       	in	r24, 0x02	; 2
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_OFF);
     6c6:	8e ef       	ldi	r24, 0xFE	; 254
     6c8:	b4 ce       	rjmp	.-664    	; 0x432 <set_system_status>
     6ca:	08 95       	ret

000006cc <humidity_action>:
	}
}
void humidity_action(uint16_t currentHum, uint16_t thresholdHum){
     6cc:	ab 01       	movw	r20, r22
	if(currentHum/10 > thresholdHum){
     6ce:	9c 01       	movw	r18, r24
     6d0:	ad ec       	ldi	r26, 0xCD	; 205
     6d2:	bc ec       	ldi	r27, 0xCC	; 204
     6d4:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__umulhisi3>
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	48 17       	cp	r20, r24
     6e6:	59 07       	cpc	r21, r25
     6e8:	30 f4       	brcc	.+12     	; 0x6f6 <humidity_action+0x2a>
		PORTA &= ~(1 << 1);
     6ea:	82 b1       	in	r24, 0x02	; 2
     6ec:	8d 7f       	andi	r24, 0xFD	; 253
     6ee:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_ON);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	9f ce       	rjmp	.-706    	; 0x432 <set_system_status>
     6f4:	08 95       	ret
	}
	else{
		PORTA |= (1 << 1);
     6f6:	82 b1       	in	r24, 0x02	; 2
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_OFF);
     6fc:	8d ef       	ldi	r24, 0xFD	; 253
     6fe:	99 ce       	rjmp	.-718    	; 0x432 <set_system_status>
     700:	08 95       	ret

00000702 <co2_action>:
	}
}
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2){
	if(currentCO2 > thresholdCO2){
     702:	68 17       	cp	r22, r24
     704:	79 07       	cpc	r23, r25
     706:	30 f4       	brcc	.+12     	; 0x714 <co2_action+0x12>
		PORTA &= ~(1 << 2);
     708:	82 b1       	in	r24, 0x02	; 2
     70a:	8b 7f       	andi	r24, 0xFB	; 251
     70c:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_ON);
     70e:	84 e0       	ldi	r24, 0x04	; 4
     710:	90 ce       	rjmp	.-736    	; 0x432 <set_system_status>
     712:	08 95       	ret
	}
	else{
		PORTA |= (1 << 2);
     714:	82 b1       	in	r24, 0x02	; 2
     716:	84 60       	ori	r24, 0x04	; 4
     718:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_OFF);
     71a:	8b ef       	ldi	r24, 0xFB	; 251
     71c:	8a ce       	rjmp	.-748    	; 0x432 <set_system_status>
     71e:	08 95       	ret

00000720 <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	00 d0       	rcall	.+0      	; 0x726 <fan_controller_task+0x6>
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
     72c:	0e 94 12 12 	call	0x2424	; 0x2424 <xTaskGetTickCount>
     730:	69 83       	std	Y+1, r22	; 0x01
     732:	7a 83       	std	Y+2, r23	; 0x02
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	9c 83       	std	Y+4, r25	; 0x04
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
     738:	61 2c       	mov	r6, r1
     73a:	71 2c       	mov	r7, r1
void fan_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
     73c:	81 2c       	mov	r8, r1
     73e:	91 2c       	mov	r9, r1
}

void fan_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
     740:	a1 2c       	mov	r10, r1
     742:	b1 2c       	mov	r11, r1
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     744:	46 e3       	ldi	r20, 0x36	; 54
     746:	51 e0       	ldi	r21, 0x01	; 1
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 28 14 	call	0x2850	; 0x2850 <xTaskDelayUntil>
		

		if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     754:	4a e0       	ldi	r20, 0x0A	; 10
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     760:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     764:	bf d7       	rcall	.+3966   	; 0x16e4 <xQueueSemaphoreTake>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	89 f4       	brne	.+34     	; 0x78c <fan_controller_task+0x6c>
			thresholdTemperature = get_max_temperature();
     76a:	74 de       	rcall	.-792    	; 0x454 <get_max_temperature>
     76c:	5c 01       	movw	r10, r24
			thresholdHumidity = get_max_humidity();
     76e:	7c de       	rcall	.-776    	; 0x468 <get_max_humidity>
     770:	4c 01       	movw	r8, r24
			thresholdCO2 = get_max_co2();
     772:	84 de       	rcall	.-760    	; 0x47c <get_max_co2>
     774:	3c 01       	movw	r6, r24
     776:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(configSemaphore);
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	a9 01       	movw	r20, r18
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     786:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     78a:	32 d6       	rcall	.+3172   	; 0x13f0 <xQueueGenericSend>
     78c:	45 e0       	ldi	r20, 0x05	; 5
			}
			
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);		
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <measureEventGroup>
     798:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <measureEventGroup+0x1>
     79c:	5c d1       	rcall	.+696    	; 0xa56 <xEventGroupSetBits>
     79e:	cc 24       	eor	r12, r12
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     7a0:	ca 94       	dec	r12
     7a2:	dc 2c       	mov	r13, r12
     7a4:	76 01       	movw	r14, r12
     7a6:	01 e0       	ldi	r16, 0x01	; 1
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <dataReadyEventGroup>
     7b6:	90 91 f2 13 	lds	r25, 0x13F2	; 0x8013f2 <dataReadyEventGroup+0x1>
     7ba:	ad d0       	rcall	.+346    	; 0x916 <xEventGroupWaitBits>
     7bc:	dc 01       	movw	r26, r24
				
		if (uxBits&(ALL_READY_BITS)){
     7be:	cb 01       	movw	r24, r22
     7c0:	8a 70       	andi	r24, 0x0A	; 10
     7c2:	99 27       	eor	r25, r25
     7c4:	aa 27       	eor	r26, r26
     7c6:	bb 27       	eor	r27, r27
     7c8:	89 2b       	or	r24, r25
     7ca:	8a 2b       	or	r24, r26
     7cc:	8b 2b       	or	r24, r27
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <fan_controller_task+0xb2>
     7d0:	b9 cf       	rjmp	.-142    	; 0x744 <fan_controller_task+0x24>
     7d2:	0e 94 16 20 	call	0x402c	; 0x402c <TempHumSensor_getTemp>
			currentTemperature = TempHumSensor_getTemp();
     7d6:	7c 01       	movw	r14, r24
     7d8:	0e 94 1b 20 	call	0x4036	; 0x4036 <TempHumSensor_getHum>
			currentHumidity = TempHumSensor_getHum();
     7dc:	8c 01       	movw	r16, r24
     7de:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <CO2_getPPM>
			currentCO2 = CO2_getPPM();
     7e2:	c8 2e       	mov	r12, r24
     7e4:	d9 2e       	mov	r13, r25
     7e6:	7f 92       	push	r7
			printf("CURR/THRS: tmp %d/%d, hum %d/%d, co2ppm %d/%d\n", 
     7e8:	6f 92       	push	r6
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	9f 92       	push	r9
     7f0:	8f 92       	push	r8
     7f2:	98 01       	movw	r18, r16
     7f4:	ad ec       	ldi	r26, 0xCD	; 205
     7f6:	bc ec       	ldi	r27, 0xCC	; 204
     7f8:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__umulhisi3>
     7fc:	96 95       	lsr	r25
     7fe:	87 95       	ror	r24
     800:	96 95       	lsr	r25
     802:	87 95       	ror	r24
     804:	96 95       	lsr	r25
     806:	87 95       	ror	r24
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	bf 92       	push	r11
     80e:	af 92       	push	r10
     810:	c7 01       	movw	r24, r14
     812:	6a e0       	ldi	r22, 0x0A	; 10
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__divmodhi4>
     81a:	7f 93       	push	r23
     81c:	6f 93       	push	r22
     81e:	80 ee       	ldi	r24, 0xE0	; 224
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
     82a:	0f b6       	in	r0, 0x3f	; 63
			currentTemperature/10, thresholdTemperature, currentHumidity/10, thresholdHumidity, currentCO2, thresholdCO2);
			
			if(!(thresholdTemperature == 0 && thresholdHumidity == 0 && thresholdCO2 == 0)){
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	a1 14       	cp	r10, r1
     836:	b1 04       	cpc	r11, r1
     838:	31 f4       	brne	.+12     	; 0x846 <fan_controller_task+0x126>
     83a:	81 14       	cp	r8, r1
     83c:	91 04       	cpc	r9, r1
     83e:	19 f4       	brne	.+6      	; 0x846 <fan_controller_task+0x126>
     840:	61 14       	cp	r6, r1
     842:	71 04       	cpc	r7, r1
     844:	79 f1       	breq	.+94     	; 0x8a4 <fan_controller_task+0x184>
     846:	4a e0       	ldi	r20, 0x0A	; 10
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     852:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     856:	46 d7       	rcall	.+3724   	; 0x16e4 <xQueueSemaphoreTake>
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	09 f0       	breq	.+2      	; 0x85e <fan_controller_task+0x13e>
					temperature_action(currentTemperature, thresholdTemperature);
     85c:	73 cf       	rjmp	.-282    	; 0x744 <fan_controller_task+0x24>
     85e:	b5 01       	movw	r22, r10
					humidity_action(currentHumidity, thresholdHumidity);
     860:	c7 01       	movw	r24, r14
     862:	18 df       	rcall	.-464    	; 0x694 <temperature_action>
     864:	b4 01       	movw	r22, r8
     866:	c8 01       	movw	r24, r16
					co2_action(currentCO2, thresholdCO2);
     868:	31 df       	rcall	.-414    	; 0x6cc <humidity_action>
     86a:	b3 01       	movw	r22, r6
     86c:	8c 2d       	mov	r24, r12
     86e:	9d 2d       	mov	r25, r13
     870:	48 df       	rcall	.-368    	; 0x702 <co2_action>
					printf("status: %x\n", get_system_status());
     872:	ed dd       	rcall	.-1062   	; 0x44e <get_system_status>
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	8f e0       	ldi	r24, 0x0F	; 15
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
					xSemaphoreGive(configSemaphore);
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	a9 01       	movw	r20, r18
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <configSemaphore>
     894:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <configSemaphore+0x1>
     898:	ab d5       	rcall	.+2902   	; 0x13f0 <xQueueGenericSend>
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	50 cf       	rjmp	.-352    	; 0x744 <fan_controller_task+0x24>
     8a4:	8b e1       	ldi	r24, 0x1B	; 27
				}
			}
			else{
				printf("No config yet.\n");
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
     8ac:	4b cf       	rjmp	.-362    	; 0x744 <fan_controller_task+0x24>

000008ae <prvTestWaitCondition>:
     8ae:	0f 93       	push	r16
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     8b0:	01 11       	cpse	r16, r1
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <prvTestWaitCondition+0x1e>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	82 23       	and	r24, r18
     8ba:	93 23       	and	r25, r19
     8bc:	a4 23       	and	r26, r20
     8be:	b5 23       	and	r27, r21
     8c0:	89 2b       	or	r24, r25
     8c2:	8a 2b       	or	r24, r26
     8c4:	8b 2b       	or	r24, r27
     8c6:	79 f4       	brne	.+30     	; 0x8e6 <prvTestWaitCondition+0x38>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	10 c0       	rjmp	.+32     	; 0x8ec <prvTestWaitCondition+0x3e>
     8cc:	dc 01       	movw	r26, r24
     8ce:	cb 01       	movw	r24, r22
     8d0:	82 23       	and	r24, r18
     8d2:	93 23       	and	r25, r19
     8d4:	a4 23       	and	r26, r20
     8d6:	b5 23       	and	r27, r21
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	4a 07       	cpc	r20, r26
     8de:	5b 07       	cpc	r21, r27
     8e0:	21 f0       	breq	.+8      	; 0x8ea <prvTestWaitCondition+0x3c>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <prvTestWaitCondition+0x3e>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <prvTestWaitCondition+0x3e>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <xEventGroupCreate>:
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	8f e0       	ldi	r24, 0x0F	; 15
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	af d1       	rcall	.+862    	; 0xc58 <pvPortMalloc>
     8fa:	ec 01       	movw	r28, r24
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	39 f0       	breq	.+14     	; 0x90e <xEventGroupCreate+0x1e>
     900:	fc 01       	movw	r30, r24
     902:	11 92       	st	Z+, r1
     904:	11 92       	st	Z+, r1
     906:	11 92       	st	Z+, r1
     908:	11 92       	st	Z+, r1
     90a:	cf 01       	movw	r24, r30
     90c:	8b d2       	rcall	.+1302   	; 0xe24 <vListInitialise>
     90e:	ce 01       	movw	r24, r28
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <xEventGroupWaitBits>:
     916:	2f 92       	push	r2
     918:	3f 92       	push	r3
     91a:	4f 92       	push	r4
     91c:	5f 92       	push	r5
     91e:	6f 92       	push	r6
     920:	7f 92       	push	r7
     922:	8f 92       	push	r8
     924:	9f 92       	push	r9
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	4a 01       	movw	r8, r20
     93e:	5b 01       	movw	r10, r22
     940:	62 2e       	mov	r6, r18
     942:	70 2e       	mov	r7, r16
     944:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskSuspendAll>
     948:	28 80       	ld	r2, Y
     94a:	39 80       	ldd	r3, Y+1	; 0x01
     94c:	4a 80       	ldd	r4, Y+2	; 0x02
     94e:	5b 80       	ldd	r5, Y+3	; 0x03
     950:	a5 01       	movw	r20, r10
     952:	94 01       	movw	r18, r8
     954:	c2 01       	movw	r24, r4
     956:	b1 01       	movw	r22, r2
     958:	aa df       	rcall	.-172    	; 0x8ae <prvTestWaitCondition>
     95a:	88 23       	and	r24, r24
     95c:	a1 f0       	breq	.+40     	; 0x986 <xEventGroupWaitBits+0x70>
     95e:	66 20       	and	r6, r6
     960:	89 f1       	breq	.+98     	; 0x9c4 <xEventGroupWaitBits+0xae>
     962:	d5 01       	movw	r26, r10
     964:	c4 01       	movw	r24, r8
     966:	80 95       	com	r24
     968:	90 95       	com	r25
     96a:	a0 95       	com	r26
     96c:	b0 95       	com	r27
     96e:	82 21       	and	r24, r2
     970:	93 21       	and	r25, r3
     972:	a4 21       	and	r26, r4
     974:	b5 21       	and	r27, r5
     976:	88 83       	st	Y, r24
     978:	99 83       	std	Y+1, r25	; 0x01
     97a:	aa 83       	std	Y+2, r26	; 0x02
     97c:	bb 83       	std	Y+3, r27	; 0x03
     97e:	c1 2c       	mov	r12, r1
     980:	d1 2c       	mov	r13, r1
     982:	76 01       	movw	r14, r12
     984:	22 c0       	rjmp	.+68     	; 0x9ca <xEventGroupWaitBits+0xb4>
     986:	c1 14       	cp	r12, r1
     988:	d1 04       	cpc	r13, r1
     98a:	e1 04       	cpc	r14, r1
     98c:	f1 04       	cpc	r15, r1
     98e:	e9 f0       	breq	.+58     	; 0x9ca <xEventGroupWaitBits+0xb4>
     990:	61 10       	cpse	r6, r1
     992:	04 c0       	rjmp	.+8      	; 0x99c <xEventGroupWaitBits+0x86>
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	ba 01       	movw	r22, r20
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <xEventGroupWaitBits+0x8e>
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	71 10       	cpse	r7, r1
     9a6:	74 60       	ori	r23, 0x04	; 4
     9a8:	48 29       	or	r20, r8
     9aa:	59 29       	or	r21, r9
     9ac:	6a 29       	or	r22, r10
     9ae:	7b 29       	or	r23, r11
     9b0:	97 01       	movw	r18, r14
     9b2:	86 01       	movw	r16, r12
     9b4:	ce 01       	movw	r24, r28
     9b6:	04 96       	adiw	r24, 0x04	; 4
     9b8:	0e 94 24 15 	call	0x2a48	; 0x2a48 <vTaskPlaceOnUnorderedEventList>
     9bc:	21 2c       	mov	r2, r1
     9be:	31 2c       	mov	r3, r1
     9c0:	21 01       	movw	r4, r2
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <xEventGroupWaitBits+0xb4>
     9c4:	c1 2c       	mov	r12, r1
     9c6:	d1 2c       	mov	r13, r1
     9c8:	76 01       	movw	r14, r12
     9ca:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
     9ce:	cd 28       	or	r12, r13
     9d0:	ce 28       	or	r12, r14
     9d2:	cf 28       	or	r12, r15
     9d4:	59 f1       	breq	.+86     	; 0xa2c <xEventGroupWaitBits+0x116>
     9d6:	81 11       	cpse	r24, r1
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <xEventGroupWaitBits+0xc6>
     9da:	f2 d2       	rcall	.+1508   	; 0xfc0 <vPortYield>
     9dc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <uxTaskResetEventItemValue>
     9e0:	6b 01       	movw	r12, r22
     9e2:	7c 01       	movw	r14, r24
     9e4:	91 fd       	sbrc	r25, 1
     9e6:	1f c0       	rjmp	.+62     	; 0xa26 <xEventGroupWaitBits+0x110>
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	0f 92       	push	r0
     9ee:	c8 80       	ld	r12, Y
     9f0:	d9 80       	ldd	r13, Y+1	; 0x01
     9f2:	ea 80       	ldd	r14, Y+2	; 0x02
     9f4:	fb 80       	ldd	r15, Y+3	; 0x03
     9f6:	07 2d       	mov	r16, r7
     9f8:	a5 01       	movw	r20, r10
     9fa:	94 01       	movw	r18, r8
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	56 df       	rcall	.-340    	; 0x8ae <prvTestWaitCondition>
     a02:	88 23       	and	r24, r24
     a04:	71 f0       	breq	.+28     	; 0xa22 <xEventGroupWaitBits+0x10c>
     a06:	66 20       	and	r6, r6
     a08:	61 f0       	breq	.+24     	; 0xa22 <xEventGroupWaitBits+0x10c>
     a0a:	80 94       	com	r8
     a0c:	90 94       	com	r9
     a0e:	a0 94       	com	r10
     a10:	b0 94       	com	r11
     a12:	8c 20       	and	r8, r12
     a14:	9d 20       	and	r9, r13
     a16:	ae 20       	and	r10, r14
     a18:	bf 20       	and	r11, r15
     a1a:	88 82       	st	Y, r8
     a1c:	99 82       	std	Y+1, r9	; 0x01
     a1e:	aa 82       	std	Y+2, r10	; 0x02
     a20:	bb 82       	std	Y+3, r11	; 0x03
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	16 01       	movw	r2, r12
     a28:	27 01       	movw	r4, r14
     a2a:	55 24       	eor	r5, r5
     a2c:	c2 01       	movw	r24, r4
     a2e:	b1 01       	movw	r22, r2
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	7f 90       	pop	r7
     a4a:	6f 90       	pop	r6
     a4c:	5f 90       	pop	r5
     a4e:	4f 90       	pop	r4
     a50:	3f 90       	pop	r3
     a52:	2f 90       	pop	r2
     a54:	08 95       	ret

00000a56 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a56:	4f 92       	push	r4
     a58:	5f 92       	push	r5
     a5a:	6f 92       	push	r6
     a5c:	7f 92       	push	r7
     a5e:	af 92       	push	r10
     a60:	bf 92       	push	r11
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	6a 01       	movw	r12, r20
     a76:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a78:	8c 01       	movw	r16, r24
     a7a:	09 5f       	subi	r16, 0xF9	; 249
     a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     a7e:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     a82:	eb 85       	ldd	r30, Y+11	; 0x0b
     a84:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     a86:	88 81       	ld	r24, Y
     a88:	99 81       	ldd	r25, Y+1	; 0x01
     a8a:	aa 81       	ldd	r26, Y+2	; 0x02
     a8c:	bb 81       	ldd	r27, Y+3	; 0x03
     a8e:	c8 2a       	or	r12, r24
     a90:	d9 2a       	or	r13, r25
     a92:	ea 2a       	or	r14, r26
     a94:	fb 2a       	or	r15, r27
     a96:	c8 82       	st	Y, r12
     a98:	d9 82       	std	Y+1, r13	; 0x01
     a9a:	ea 82       	std	Y+2, r14	; 0x02
     a9c:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     a9e:	c1 2c       	mov	r12, r1
     aa0:	d1 2c       	mov	r13, r1
     aa2:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     aa4:	3d c0       	rjmp	.+122    	; 0xb20 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     aa6:	a4 80       	ldd	r10, Z+4	; 0x04
     aa8:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	a2 81       	ldd	r26, Z+2	; 0x02
     ab0:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     ab2:	ac 01       	movw	r20, r24
     ab4:	bd 01       	movw	r22, r26
     ab6:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     ab8:	b2 fd       	sbrc	r27, 2
     aba:	0e c0       	rjmp	.+28     	; 0xad8 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     abc:	48 80       	ld	r4, Y
     abe:	59 80       	ldd	r5, Y+1	; 0x01
     ac0:	6a 80       	ldd	r6, Y+2	; 0x02
     ac2:	7b 80       	ldd	r7, Y+3	; 0x03
     ac4:	44 22       	and	r4, r20
     ac6:	55 22       	and	r5, r21
     ac8:	66 22       	and	r6, r22
     aca:	77 22       	and	r7, r23
     acc:	45 28       	or	r4, r5
     ace:	46 28       	or	r4, r6
     ad0:	47 28       	or	r4, r7
     ad2:	89 f4       	brne	.+34     	; 0xaf6 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     ad8:	48 80       	ld	r4, Y
     ada:	59 80       	ldd	r5, Y+1	; 0x01
     adc:	6a 80       	ldd	r6, Y+2	; 0x02
     ade:	7b 80       	ldd	r7, Y+3	; 0x03
     ae0:	44 22       	and	r4, r20
     ae2:	55 22       	and	r5, r21
     ae4:	66 22       	and	r6, r22
     ae6:	77 22       	and	r7, r23
     ae8:	44 15       	cp	r20, r4
     aea:	55 05       	cpc	r21, r5
     aec:	66 05       	cpc	r22, r6
     aee:	77 05       	cpc	r23, r7
     af0:	21 f0       	breq	.+8      	; 0xafa <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	03 c0       	rjmp	.+6      	; 0xafc <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	01 c0       	rjmp	.+2      	; 0xafc <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     afa:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     afc:	22 23       	and	r18, r18
     afe:	71 f0       	breq	.+28     	; 0xb1c <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b00:	b0 ff       	sbrs	r27, 0
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     b04:	c4 2a       	or	r12, r20
     b06:	d5 2a       	or	r13, r21
     b08:	e6 2a       	or	r14, r22
     b0a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b0c:	48 81       	ld	r20, Y
     b0e:	59 81       	ldd	r21, Y+1	; 0x01
     b10:	6a 81       	ldd	r22, Y+2	; 0x02
     b12:	7b 81       	ldd	r23, Y+3	; 0x03
     b14:	72 60       	ori	r23, 0x02	; 2
     b16:	cf 01       	movw	r24, r30
     b18:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b1c:	ea 2d       	mov	r30, r10
     b1e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b20:	e0 17       	cp	r30, r16
     b22:	f1 07       	cpc	r31, r17
     b24:	09 f0       	breq	.+2      	; 0xb28 <xEventGroupSetBits+0xd2>
     b26:	bf cf       	rjmp	.-130    	; 0xaa6 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b28:	c0 94       	com	r12
     b2a:	d0 94       	com	r13
     b2c:	e0 94       	com	r14
     b2e:	f0 94       	com	r15
     b30:	88 81       	ld	r24, Y
     b32:	99 81       	ldd	r25, Y+1	; 0x01
     b34:	aa 81       	ldd	r26, Y+2	; 0x02
     b36:	bb 81       	ldd	r27, Y+3	; 0x03
     b38:	c8 22       	and	r12, r24
     b3a:	d9 22       	and	r13, r25
     b3c:	ea 22       	and	r14, r26
     b3e:	fb 22       	and	r15, r27
     b40:	c8 82       	st	Y, r12
     b42:	d9 82       	std	Y+1, r13	; 0x01
     b44:	ea 82       	std	Y+2, r14	; 0x02
     b46:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b48:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b4c:	68 81       	ld	r22, Y
     b4e:	79 81       	ldd	r23, Y+1	; 0x01
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	df 90       	pop	r13
     b62:	cf 90       	pop	r12
     b64:	bf 90       	pop	r11
     b66:	af 90       	pop	r10
     b68:	7f 90       	pop	r7
     b6a:	6f 90       	pop	r6
     b6c:	5f 90       	pop	r5
     b6e:	4f 90       	pop	r4
     b70:	08 95       	ret

00000b72 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b72:	e5 ec       	ldi	r30, 0xC5	; 197
     b74:	f4 e0       	ldi	r31, 0x04	; 4
     b76:	a9 ec       	ldi	r26, 0xC9	; 201
     b78:	b4 e0       	ldi	r27, 0x04	; 4
     b7a:	b1 83       	std	Z+1, r27	; 0x01
     b7c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     b7e:	13 82       	std	Z+3, r1	; 0x03
     b80:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     b82:	e1 e7       	ldi	r30, 0x71	; 113
     b84:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     b86:	f0 93 c4 04 	sts	0x04C4, r31	; 0x8004c4 <pxEnd+0x1>
     b8a:	e0 93 c3 04 	sts	0x04C3, r30	; 0x8004c3 <pxEnd>
    pxEnd->xBlockSize = 0;
     b8e:	13 82       	std	Z+3, r1	; 0x03
     b90:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     b92:	11 82       	std	Z+1, r1	; 0x01
     b94:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     b96:	88 ea       	ldi	r24, 0xA8	; 168
     b98:	9d e0       	ldi	r25, 0x0D	; 13
     b9a:	13 96       	adiw	r26, 0x03	; 3
     b9c:	9c 93       	st	X, r25
     b9e:	8e 93       	st	-X, r24
     ba0:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     ba2:	ed 93       	st	X+, r30
     ba4:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     ba6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <xMinimumEverFreeBytesRemaining+0x1>
     baa:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bae:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <xFreeBytesRemaining+0x1>
     bb2:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e8       	ldi	r25, 0x80	; 128
     bba:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <xBlockAllocatedBit+0x1>
     bbe:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <xBlockAllocatedBit>
     bc2:	08 95       	ret

00000bc4 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     bca:	a5 ec       	ldi	r26, 0xC5	; 197
     bcc:	b4 e0       	ldi	r27, 0x04	; 4
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <prvInsertBlockIntoFreeList+0xe>
     bd0:	df 01       	movw	r26, r30
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	ec 17       	cp	r30, r28
     bda:	fd 07       	cpc	r31, r29
     bdc:	c8 f3       	brcs	.-14     	; 0xbd0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     bde:	12 96       	adiw	r26, 0x02	; 2
     be0:	8d 91       	ld	r24, X+
     be2:	9c 91       	ld	r25, X
     be4:	13 97       	sbiw	r26, 0x03	; 3
     be6:	9d 01       	movw	r18, r26
     be8:	28 0f       	add	r18, r24
     bea:	39 1f       	adc	r19, r25
     bec:	c2 17       	cp	r28, r18
     bee:	d3 07       	cpc	r29, r19
     bf0:	49 f4       	brne	.+18     	; 0xc04 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     bf2:	2a 81       	ldd	r18, Y+2	; 0x02
     bf4:	3b 81       	ldd	r19, Y+3	; 0x03
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	9c 93       	st	X, r25
     bfe:	8e 93       	st	-X, r24
     c00:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     c02:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	9e 01       	movw	r18, r28
     c0a:	28 0f       	add	r18, r24
     c0c:	39 1f       	adc	r19, r25
     c0e:	e2 17       	cp	r30, r18
     c10:	f3 07       	cpc	r31, r19
     c12:	c1 f4       	brne	.+48     	; 0xc44 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c14:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <pxEnd>
     c18:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <pxEnd+0x1>
     c1c:	e2 17       	cp	r30, r18
     c1e:	f3 07       	cpc	r31, r19
     c20:	71 f0       	breq	.+28     	; 0xc3e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c22:	22 81       	ldd	r18, Z+2	; 0x02
     c24:	33 81       	ldd	r19, Z+3	; 0x03
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	9b 83       	std	Y+3, r25	; 0x03
     c2c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	99 83       	std	Y+1, r25	; 0x01
     c3a:	88 83       	st	Y, r24
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c3e:	39 83       	std	Y+1, r19	; 0x01
     c40:	28 83       	st	Y, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c44:	f9 83       	std	Y+1, r31	; 0x01
     c46:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c48:	ca 17       	cp	r28, r26
     c4a:	db 07       	cpc	r29, r27
     c4c:	11 f0       	breq	.+4      	; 0xc52 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c4e:	cd 93       	st	X+, r28
     c50:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c66:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c6a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <pxEnd>
     c6e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <pxEnd+0x1>
     c72:	89 2b       	or	r24, r25
     c74:	09 f4       	brne	.+2      	; 0xc78 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     c76:	7d df       	rcall	.-262    	; 0xb72 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     c78:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <xBlockAllocatedBit>
     c7c:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <xBlockAllocatedBit+0x1>
     c80:	80 23       	and	r24, r16
     c82:	91 23       	and	r25, r17
     c84:	89 2b       	or	r24, r25
     c86:	09 f0       	breq	.+2      	; 0xc8a <pvPortMalloc+0x32>
     c88:	76 c0       	rjmp	.+236    	; 0xd76 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c8a:	01 15       	cp	r16, r1
     c8c:	11 05       	cpc	r17, r1
     c8e:	49 f0       	breq	.+18     	; 0xca2 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     c90:	c8 01       	movw	r24, r16
     c92:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c94:	08 17       	cp	r16, r24
     c96:	19 07       	cpc	r17, r25
     c98:	18 f0       	brcs	.+6      	; 0xca0 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     ca0:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     ca2:	01 15       	cp	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <pvPortMalloc+0x52>
     ca8:	69 c0       	rjmp	.+210    	; 0xd7c <pvPortMalloc+0x124>
     caa:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <xFreeBytesRemaining>
     cae:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <xFreeBytesRemaining+0x1>
     cb2:	80 17       	cp	r24, r16
     cb4:	91 07       	cpc	r25, r17
     cb6:	08 f4       	brcc	.+2      	; 0xcba <pvPortMalloc+0x62>
     cb8:	64 c0       	rjmp	.+200    	; 0xd82 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     cba:	c0 91 c5 04 	lds	r28, 0x04C5	; 0x8004c5 <xStart>
     cbe:	d0 91 c6 04 	lds	r29, 0x04C6	; 0x8004c6 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     cc2:	e5 ec       	ldi	r30, 0xC5	; 197
     cc4:	f4 e0       	ldi	r31, 0x04	; 4
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     cc8:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     cca:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	9b 81       	ldd	r25, Y+3	; 0x03
     cd0:	80 17       	cp	r24, r16
     cd2:	91 07       	cpc	r25, r17
     cd4:	20 f4       	brcc	.+8      	; 0xcde <pvPortMalloc+0x86>
     cd6:	88 81       	ld	r24, Y
     cd8:	99 81       	ldd	r25, Y+1	; 0x01
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	a9 f7       	brne	.-22     	; 0xcc8 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     cde:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <pxEnd>
     ce2:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <pxEnd+0x1>
     ce6:	c8 17       	cp	r28, r24
     ce8:	d9 07       	cpc	r29, r25
     cea:	09 f4       	brne	.+2      	; 0xcee <pvPortMalloc+0x96>
     cec:	4d c0       	rjmp	.+154    	; 0xd88 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     cee:	e0 80       	ld	r14, Z
     cf0:	f1 80       	ldd	r15, Z+1	; 0x01
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	e8 0e       	add	r14, r24
     cf6:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     cf8:	88 81       	ld	r24, Y
     cfa:	99 81       	ldd	r25, Y+1	; 0x01
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d00:	2a 81       	ldd	r18, Y+2	; 0x02
     d02:	3b 81       	ldd	r19, Y+3	; 0x03
     d04:	20 1b       	sub	r18, r16
     d06:	31 0b       	sbc	r19, r17
     d08:	29 30       	cpi	r18, 0x09	; 9
     d0a:	31 05       	cpc	r19, r1
     d0c:	48 f0       	brcs	.+18     	; 0xd20 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d0e:	ce 01       	movw	r24, r28
     d10:	80 0f       	add	r24, r16
     d12:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d14:	fc 01       	movw	r30, r24
     d16:	33 83       	std	Z+3, r19	; 0x03
     d18:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d1a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d1c:	0a 83       	std	Y+2, r16	; 0x02
     d1e:	52 df       	rcall	.-348    	; 0xbc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d20:	2a 81       	ldd	r18, Y+2	; 0x02
     d22:	3b 81       	ldd	r19, Y+3	; 0x03
     d24:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <xFreeBytesRemaining>
     d28:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <xFreeBytesRemaining+0x1>
     d2c:	82 1b       	sub	r24, r18
     d2e:	93 0b       	sbc	r25, r19
     d30:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <xFreeBytesRemaining+0x1>
     d34:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d38:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <xMinimumEverFreeBytesRemaining>
     d3c:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <xMinimumEverFreeBytesRemaining+0x1>
     d40:	84 17       	cp	r24, r20
     d42:	95 07       	cpc	r25, r21
     d44:	20 f4       	brcc	.+8      	; 0xd4e <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d46:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <xMinimumEverFreeBytesRemaining+0x1>
     d4a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d4e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <xBlockAllocatedBit>
     d52:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <xBlockAllocatedBit+0x1>
     d56:	28 2b       	or	r18, r24
     d58:	39 2b       	or	r19, r25
     d5a:	3b 83       	std	Y+3, r19	; 0x03
     d5c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d62:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <xNumberOfSuccessfulAllocations>
     d66:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <xNumberOfSuccessfulAllocations+0x1>
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <xNumberOfSuccessfulAllocations+0x1>
     d70:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <xNumberOfSuccessfulAllocations>
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     d76:	e1 2c       	mov	r14, r1
     d78:	f1 2c       	mov	r15, r1
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <pvPortMalloc+0x134>
     d7c:	e1 2c       	mov	r14, r1
     d7e:	f1 2c       	mov	r15, r1
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <pvPortMalloc+0x134>
     d82:	e1 2c       	mov	r14, r1
     d84:	f1 2c       	mov	r15, r1
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <pvPortMalloc+0x134>
     d88:	e1 2c       	mov	r14, r1
     d8a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     d8c:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     d90:	e1 14       	cp	r14, r1
     d92:	f1 04       	cpc	r15, r1
     d94:	11 f4       	brne	.+4      	; 0xd9a <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     d96:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     d9a:	c7 01       	movw	r24, r14
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	08 95       	ret

00000daa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	91 f1       	breq	.+100    	; 0xe1a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     db6:	ec 01       	movw	r28, r24
     db8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     dba:	4a 81       	ldd	r20, Y+2	; 0x02
     dbc:	5b 81       	ldd	r21, Y+3	; 0x03
     dbe:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <xBlockAllocatedBit>
     dc2:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <xBlockAllocatedBit+0x1>
     dc6:	ba 01       	movw	r22, r20
     dc8:	62 23       	and	r22, r18
     dca:	73 23       	and	r23, r19
     dcc:	67 2b       	or	r22, r23
     dce:	29 f1       	breq	.+74     	; 0xe1a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     dd0:	68 81       	ld	r22, Y
     dd2:	79 81       	ldd	r23, Y+1	; 0x01
     dd4:	67 2b       	or	r22, r23
     dd6:	09 f5       	brne	.+66     	; 0xe1a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     dd8:	20 95       	com	r18
     dda:	30 95       	com	r19
     ddc:	24 23       	and	r18, r20
     dde:	35 23       	and	r19, r21
     de0:	3b 83       	std	Y+3, r19	; 0x03
     de2:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     de4:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <xFreeBytesRemaining>
     df0:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <xFreeBytesRemaining+0x1>
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <xFreeBytesRemaining+0x1>
     dfc:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e00:	ce 01       	movw	r24, r28
     e02:	e0 de       	rcall	.-576    	; 0xbc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     e04:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <xNumberOfSuccessfulFrees>
     e08:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <xNumberOfSuccessfulFrees+0x1>
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <xNumberOfSuccessfulFrees+0x1>
     e12:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e16:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e24:	fc 01       	movw	r30, r24
     e26:	03 96       	adiw	r24, 0x03	; 3
     e28:	92 83       	std	Z+2, r25	; 0x02
     e2a:	81 83       	std	Z+1, r24	; 0x01
     e2c:	4f ef       	ldi	r20, 0xFF	; 255
     e2e:	5f ef       	ldi	r21, 0xFF	; 255
     e30:	ba 01       	movw	r22, r20
     e32:	43 83       	std	Z+3, r20	; 0x03
     e34:	54 83       	std	Z+4, r21	; 0x04
     e36:	65 83       	std	Z+5, r22	; 0x05
     e38:	76 83       	std	Z+6, r23	; 0x06
     e3a:	90 87       	std	Z+8, r25	; 0x08
     e3c:	87 83       	std	Z+7, r24	; 0x07
     e3e:	92 87       	std	Z+10, r25	; 0x0a
     e40:	81 87       	std	Z+9, r24	; 0x09
     e42:	10 82       	st	Z, r1
     e44:	08 95       	ret

00000e46 <vListInitialiseItem>:
     e46:	fc 01       	movw	r30, r24
     e48:	13 86       	std	Z+11, r1	; 0x0b
     e4a:	12 86       	std	Z+10, r1	; 0x0a
     e4c:	08 95       	ret

00000e4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e58:	08 81       	ld	r16, Y
     e5a:	19 81       	ldd	r17, Y+1	; 0x01
     e5c:	2a 81       	ldd	r18, Y+2	; 0x02
     e5e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e60:	0f 3f       	cpi	r16, 0xFF	; 255
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	14 07       	cpc	r17, r20
     e66:	24 07       	cpc	r18, r20
     e68:	34 07       	cpc	r19, r20
     e6a:	21 f4       	brne	.+8      	; 0xe74 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e6c:	fc 01       	movw	r30, r24
     e6e:	a1 85       	ldd	r26, Z+9	; 0x09
     e70:	b2 85       	ldd	r27, Z+10	; 0x0a
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e74:	dc 01       	movw	r26, r24
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vListInsert+0x2e>
     e7a:	df 01       	movw	r26, r30
     e7c:	14 96       	adiw	r26, 0x04	; 4
     e7e:	ed 91       	ld	r30, X+
     e80:	fc 91       	ld	r31, X
     e82:	15 97       	sbiw	r26, 0x05	; 5
     e84:	40 81       	ld	r20, Z
     e86:	51 81       	ldd	r21, Z+1	; 0x01
     e88:	62 81       	ldd	r22, Z+2	; 0x02
     e8a:	73 81       	ldd	r23, Z+3	; 0x03
     e8c:	04 17       	cp	r16, r20
     e8e:	15 07       	cpc	r17, r21
     e90:	26 07       	cpc	r18, r22
     e92:	37 07       	cpc	r19, r23
     e94:	90 f7       	brcc	.-28     	; 0xe7a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     e96:	14 96       	adiw	r26, 0x04	; 4
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	15 97       	sbiw	r26, 0x05	; 5
     e9e:	fd 83       	std	Y+5, r31	; 0x05
     ea0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ea2:	d7 83       	std	Z+7, r29	; 0x07
     ea4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     ea6:	bf 83       	std	Y+7, r27	; 0x07
     ea8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     eaa:	15 96       	adiw	r26, 0x05	; 5
     eac:	dc 93       	st	X, r29
     eae:	ce 93       	st	-X, r28
     eb0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     eb2:	9b 87       	std	Y+11, r25	; 0x0b
     eb4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 81       	ld	r18, Z
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	20 83       	st	Z, r18
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     ece:	a2 85       	ldd	r26, Z+10	; 0x0a
     ed0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ed2:	c4 81       	ldd	r28, Z+4	; 0x04
     ed4:	d5 81       	ldd	r29, Z+5	; 0x05
     ed6:	86 81       	ldd	r24, Z+6	; 0x06
     ed8:	97 81       	ldd	r25, Z+7	; 0x07
     eda:	9f 83       	std	Y+7, r25	; 0x07
     edc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ede:	c6 81       	ldd	r28, Z+6	; 0x06
     ee0:	d7 81       	ldd	r29, Z+7	; 0x07
     ee2:	84 81       	ldd	r24, Z+4	; 0x04
     ee4:	95 81       	ldd	r25, Z+5	; 0x05
     ee6:	9d 83       	std	Y+5, r25	; 0x05
     ee8:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	8d 91       	ld	r24, X+
     eee:	9c 91       	ld	r25, X
     ef0:	12 97       	sbiw	r26, 0x02	; 2
     ef2:	e8 17       	cp	r30, r24
     ef4:	f9 07       	cpc	r31, r25
     ef6:	31 f4       	brne	.+12     	; 0xf04 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ef8:	86 81       	ldd	r24, Z+6	; 0x06
     efa:	97 81       	ldd	r25, Z+7	; 0x07
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	9c 93       	st	X, r25
     f00:	8e 93       	st	-X, r24
     f02:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f04:	13 86       	std	Z+11, r1	; 0x0b
     f06:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f08:	8c 91       	ld	r24, X
     f0a:	81 50       	subi	r24, 0x01	; 1
     f0c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     f0e:	8c 91       	ld	r24, X
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f16:	a8 95       	wdr
     f18:	90 ec       	ldi	r25, 0xC0	; 192
     f1a:	88 e1       	ldi	r24, 0x18	; 24
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	a8 95       	wdr
     f22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f2c:	08 95       	ret

00000f2e <pxPortInitialiseStack>:
     f2e:	fc 01       	movw	r30, r24
     f30:	60 83       	st	Z, r22
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	70 83       	st	Z, r23
     f36:	31 97       	sbiw	r30, 0x01	; 1
     f38:	10 82       	st	Z, r1
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	10 82       	st	Z, r1
     f3e:	31 97       	sbiw	r30, 0x01	; 1
     f40:	20 e8       	ldi	r18, 0x80	; 128
     f42:	20 83       	st	Z, r18
     f44:	31 97       	sbiw	r30, 0x01	; 1
     f46:	10 82       	st	Z, r1
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	10 82       	st	Z, r1
     f4c:	31 97       	sbiw	r30, 0x01	; 1
     f4e:	10 82       	st	Z, r1
     f50:	77 97       	sbiw	r30, 0x17	; 23
     f52:	40 83       	st	Z, r20
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	50 83       	st	Z, r21
     f58:	86 97       	sbiw	r24, 0x26	; 38
     f5a:	08 95       	ret

00000f5c <xPortStartScheduler>:
     f5c:	dc df       	rcall	.-72     	; 0xf16 <prvSetupTimerInterrupt>
     f5e:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
     f62:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
     f66:	cd 91       	ld	r28, X+
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	dd 91       	ld	r29, X+
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	9f 90       	pop	r9
     f9c:	8f 90       	pop	r8
     f9e:	7f 90       	pop	r7
     fa0:	6f 90       	pop	r6
     fa2:	5f 90       	pop	r5
     fa4:	4f 90       	pop	r4
     fa6:	3f 90       	pop	r3
     fa8:	2f 90       	pop	r2
     faa:	1f 90       	pop	r1
     fac:	0f 90       	pop	r0
     fae:	0c be       	out	0x3c, r0	; 60
     fb0:	0f 90       	pop	r0
     fb2:	0b be       	out	0x3b, r0	; 59
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	08 95       	ret
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	08 95       	ret

00000fc0 <vPortYield>:
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	0f 92       	push	r0
     fc8:	0b b6       	in	r0, 0x3b	; 59
     fca:	0f 92       	push	r0
     fcc:	0c b6       	in	r0, 0x3c	; 60
     fce:	0f 92       	push	r0
     fd0:	1f 92       	push	r1
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 92       	push	r2
     fd6:	3f 92       	push	r3
     fd8:	4f 92       	push	r4
     fda:	5f 92       	push	r5
     fdc:	6f 92       	push	r6
     fde:	7f 92       	push	r7
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    1014:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    1018:	0d b6       	in	r0, 0x3d	; 61
    101a:	0d 92       	st	X+, r0
    101c:	0e b6       	in	r0, 0x3e	; 62
    101e:	0d 92       	st	X+, r0
    1020:	0e 94 a8 14 	call	0x2950	; 0x2950 <vTaskSwitchContext>
    1024:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    1028:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    102c:	cd 91       	ld	r28, X+
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	dd 91       	ld	r29, X+
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	9f 90       	pop	r9
    1062:	8f 90       	pop	r8
    1064:	7f 90       	pop	r7
    1066:	6f 90       	pop	r6
    1068:	5f 90       	pop	r5
    106a:	4f 90       	pop	r4
    106c:	3f 90       	pop	r3
    106e:	2f 90       	pop	r2
    1070:	1f 90       	pop	r1
    1072:	0f 90       	pop	r0
    1074:	0c be       	out	0x3c, r0	; 60
    1076:	0f 90       	pop	r0
    1078:	0b be       	out	0x3b, r0	; 59
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	08 95       	ret

00001082 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	0f 92       	push	r0
    108a:	0b b6       	in	r0, 0x3b	; 59
    108c:	0f 92       	push	r0
    108e:	0c b6       	in	r0, 0x3c	; 60
    1090:	0f 92       	push	r0
    1092:	1f 92       	push	r1
    1094:	11 24       	eor	r1, r1
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
    10d2:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    10d6:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    10da:	0d b6       	in	r0, 0x3d	; 61
    10dc:	0d 92       	st	X+, r0
    10de:	0e b6       	in	r0, 0x3e	; 62
    10e0:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    10e2:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    10e4:	0e 94 20 12 	call	0x2440	; 0x2440 <xTaskIncrementTick>
    10e8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    10ea:	0e 94 a8 14 	call	0x2950	; 0x2950 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    10ee:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    10f2:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    10f6:	cd 91       	ld	r28, X+
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	dd 91       	ld	r29, X+
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	ff 91       	pop	r31
    1100:	ef 91       	pop	r30
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	bf 90       	pop	r11
    1128:	af 90       	pop	r10
    112a:	9f 90       	pop	r9
    112c:	8f 90       	pop	r8
    112e:	7f 90       	pop	r7
    1130:	6f 90       	pop	r6
    1132:	5f 90       	pop	r5
    1134:	4f 90       	pop	r4
    1136:	3f 90       	pop	r3
    1138:	2f 90       	pop	r2
    113a:	1f 90       	pop	r1
    113c:	0f 90       	pop	r0
    113e:	0c be       	out	0x3c, r0	; 60
    1140:	0f 90       	pop	r0
    1142:	0b be       	out	0x3b, r0	; 59
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    114a:	08 95       	ret

0000114c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    114c:	9a df       	rcall	.-204    	; 0x1082 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    114e:	18 95       	reti

00001150 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1150:	dc 01       	movw	r26, r24
    1152:	53 96       	adiw	r26, 0x13	; 19
    1154:	2c 91       	ld	r18, X
    1156:	53 97       	sbiw	r26, 0x13	; 19
    1158:	22 23       	and	r18, r18
    115a:	41 f0       	breq	.+16     	; 0x116c <prvGetDisinheritPriorityAfterTimeout+0x1c>
    115c:	5a 96       	adiw	r26, 0x1a	; 26
    115e:	ed 91       	ld	r30, X+
    1160:	fc 91       	ld	r31, X
    1162:	5b 97       	sbiw	r26, 0x1b	; 27
    1164:	90 81       	ld	r25, Z
    1166:	8a e0       	ldi	r24, 0x0A	; 10
    1168:	89 1b       	sub	r24, r25
    116a:	08 95       	ret
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 95       	ret

00001170 <prvIsQueueEmpty>:
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	0f 92       	push	r0
    1176:	fc 01       	movw	r30, r24
    1178:	86 8d       	ldd	r24, Z+30	; 0x1e
    117a:	81 11       	cpse	r24, r1
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <prvIsQueueEmpty+0x12>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <prvIsQueueEmpty+0x14>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	08 95       	ret

0000118a <prvIsQueueFull>:
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	0f 92       	push	r0
    1190:	fc 01       	movw	r30, r24
    1192:	26 8d       	ldd	r18, Z+30	; 0x1e
    1194:	87 8d       	ldd	r24, Z+31	; 0x1f
    1196:	28 13       	cpse	r18, r24
    1198:	02 c0       	rjmp	.+4      	; 0x119e <prvIsQueueFull+0x14>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <prvIsQueueFull+0x16>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	08 95       	ret

000011a6 <prvCopyDataToQueue>:
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	ec 01       	movw	r28, r24
    11b0:	04 2f       	mov	r16, r20
    11b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11b4:	48 a1       	ldd	r20, Y+32	; 0x20
    11b6:	41 11       	cpse	r20, r1
    11b8:	0c c0       	rjmp	.+24     	; 0x11d2 <prvCopyDataToQueue+0x2c>
    11ba:	88 81       	ld	r24, Y
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
    11be:	89 2b       	or	r24, r25
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <prvCopyDataToQueue+0x1e>
    11c2:	42 c0       	rjmp	.+132    	; 0x1248 <prvCopyDataToQueue+0xa2>
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	0e 94 24 18 	call	0x3048	; 0x3048 <xTaskPriorityDisinherit>
    11cc:	1d 82       	std	Y+5, r1	; 0x05
    11ce:	1c 82       	std	Y+4, r1	; 0x04
    11d0:	42 c0       	rjmp	.+132    	; 0x1256 <prvCopyDataToQueue+0xb0>
    11d2:	01 11       	cpse	r16, r1
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <prvCopyDataToQueue+0x5e>
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    11e0:	28 a1       	ldd	r18, Y+32	; 0x20
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	82 0f       	add	r24, r18
    11e8:	91 1d       	adc	r25, r1
    11ea:	9b 83       	std	Y+3, r25	; 0x03
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	82 17       	cp	r24, r18
    11f4:	93 07       	cpc	r25, r19
    11f6:	50 f1       	brcs	.+84     	; 0x124c <prvCopyDataToQueue+0xa6>
    11f8:	88 81       	ld	r24, Y
    11fa:	99 81       	ldd	r25, Y+1	; 0x01
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	29 c0       	rjmp	.+82     	; 0x1256 <prvCopyDataToQueue+0xb0>
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    120e:	88 a1       	ldd	r24, Y+32	; 0x20
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	91 95       	neg	r25
    1214:	81 95       	neg	r24
    1216:	91 09       	sbc	r25, r1
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
    121a:	3f 81       	ldd	r19, Y+7	; 0x07
    121c:	28 0f       	add	r18, r24
    121e:	39 1f       	adc	r19, r25
    1220:	3f 83       	std	Y+7, r19	; 0x07
    1222:	2e 83       	std	Y+6, r18	; 0x06
    1224:	48 81       	ld	r20, Y
    1226:	59 81       	ldd	r21, Y+1	; 0x01
    1228:	24 17       	cp	r18, r20
    122a:	35 07       	cpc	r19, r21
    122c:	30 f4       	brcc	.+12     	; 0x123a <prvCopyDataToQueue+0x94>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	9f 83       	std	Y+7, r25	; 0x07
    1238:	8e 83       	std	Y+6, r24	; 0x06
    123a:	02 30       	cpi	r16, 0x02	; 2
    123c:	49 f4       	brne	.+18     	; 0x1250 <prvCopyDataToQueue+0xaa>
    123e:	11 23       	and	r17, r17
    1240:	49 f0       	breq	.+18     	; 0x1254 <prvCopyDataToQueue+0xae>
    1242:	11 50       	subi	r17, 0x01	; 1
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <prvCopyDataToQueue+0xb0>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <prvCopyDataToQueue+0xb0>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <prvCopyDataToQueue+0xb0>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <prvCopyDataToQueue+0xb0>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	1f 5f       	subi	r17, 0xFF	; 255
    1258:	1e 8f       	std	Y+30, r17	; 0x1e
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <prvCopyDataFromQueue>:
    1264:	fc 01       	movw	r30, r24
    1266:	40 a1       	ldd	r20, Z+32	; 0x20
    1268:	44 23       	and	r20, r20
    126a:	a9 f0       	breq	.+42     	; 0x1296 <prvCopyDataFromQueue+0x32>
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	26 81       	ldd	r18, Z+6	; 0x06
    1270:	37 81       	ldd	r19, Z+7	; 0x07
    1272:	24 0f       	add	r18, r20
    1274:	35 1f       	adc	r19, r21
    1276:	37 83       	std	Z+7, r19	; 0x07
    1278:	26 83       	std	Z+6, r18	; 0x06
    127a:	84 81       	ldd	r24, Z+4	; 0x04
    127c:	95 81       	ldd	r25, Z+5	; 0x05
    127e:	28 17       	cp	r18, r24
    1280:	39 07       	cpc	r19, r25
    1282:	20 f0       	brcs	.+8      	; 0x128c <prvCopyDataFromQueue+0x28>
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	97 83       	std	Z+7, r25	; 0x07
    128a:	86 83       	std	Z+6, r24	; 0x06
    128c:	cb 01       	movw	r24, r22
    128e:	66 81       	ldd	r22, Z+6	; 0x06
    1290:	77 81       	ldd	r23, Z+7	; 0x07
    1292:	0c 94 08 32 	jmp	0x6410	; 0x6410 <memcpy>
    1296:	08 95       	ret

00001298 <prvUnlockQueue>:
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	ec 01       	movw	r28, r24
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	0f 92       	push	r0
    12a6:	1a a1       	ldd	r17, Y+34	; 0x22
    12a8:	0b c0       	rjmp	.+22     	; 0x12c0 <prvUnlockQueue+0x28>
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	88 23       	and	r24, r24
    12ae:	51 f0       	breq	.+20     	; 0x12c4 <prvUnlockQueue+0x2c>
    12b0:	ce 01       	movw	r24, r28
    12b2:	43 96       	adiw	r24, 0x13	; 19
    12b4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    12b8:	81 11       	cpse	r24, r1
    12ba:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <vTaskMissedYield>
    12be:	11 50       	subi	r17, 0x01	; 1
    12c0:	11 16       	cp	r1, r17
    12c2:	9c f3       	brlt	.-26     	; 0x12aa <prvUnlockQueue+0x12>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	8a a3       	std	Y+34, r24	; 0x22
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	0f 92       	push	r0
    12d2:	19 a1       	ldd	r17, Y+33	; 0x21
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <prvUnlockQueue+0x54>
    12d6:	88 85       	ldd	r24, Y+8	; 0x08
    12d8:	88 23       	and	r24, r24
    12da:	51 f0       	breq	.+20     	; 0x12f0 <prvUnlockQueue+0x58>
    12dc:	ce 01       	movw	r24, r28
    12de:	08 96       	adiw	r24, 0x08	; 8
    12e0:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    12e4:	81 11       	cpse	r24, r1
    12e6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <vTaskMissedYield>
    12ea:	11 50       	subi	r17, 0x01	; 1
    12ec:	11 16       	cp	r1, r17
    12ee:	9c f3       	brlt	.-26     	; 0x12d6 <prvUnlockQueue+0x3e>
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	89 a3       	std	Y+33, r24	; 0x21
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	08 95       	ret

00001300 <xQueueGenericReset>:
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	ec 01       	movw	r28, r24
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	0f 92       	push	r0
    130c:	e8 81       	ld	r30, Y
    130e:	f9 81       	ldd	r31, Y+1	; 0x01
    1310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1312:	28 a1       	ldd	r18, Y+32	; 0x20
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	82 9f       	mul	r24, r18
    131a:	a0 01       	movw	r20, r0
    131c:	83 9f       	mul	r24, r19
    131e:	50 0d       	add	r21, r0
    1320:	92 9f       	mul	r25, r18
    1322:	50 0d       	add	r21, r0
    1324:	11 24       	eor	r1, r1
    1326:	4e 0f       	add	r20, r30
    1328:	5f 1f       	adc	r21, r31
    132a:	5d 83       	std	Y+5, r21	; 0x05
    132c:	4c 83       	std	Y+4, r20	; 0x04
    132e:	1e 8e       	std	Y+30, r1	; 0x1e
    1330:	fb 83       	std	Y+3, r31	; 0x03
    1332:	ea 83       	std	Y+2, r30	; 0x02
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	28 9f       	mul	r18, r24
    1338:	a0 01       	movw	r20, r0
    133a:	29 9f       	mul	r18, r25
    133c:	50 0d       	add	r21, r0
    133e:	38 9f       	mul	r19, r24
    1340:	50 0d       	add	r21, r0
    1342:	11 24       	eor	r1, r1
    1344:	cf 01       	movw	r24, r30
    1346:	84 0f       	add	r24, r20
    1348:	95 1f       	adc	r25, r21
    134a:	9f 83       	std	Y+7, r25	; 0x07
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	89 a3       	std	Y+33, r24	; 0x21
    1352:	8a a3       	std	Y+34, r24	; 0x22
    1354:	61 11       	cpse	r22, r1
    1356:	0b c0       	rjmp	.+22     	; 0x136e <xQueueGenericReset+0x6e>
    1358:	88 85       	ldd	r24, Y+8	; 0x08
    135a:	88 23       	and	r24, r24
    135c:	71 f0       	breq	.+28     	; 0x137a <xQueueGenericReset+0x7a>
    135e:	ce 01       	movw	r24, r28
    1360:	08 96       	adiw	r24, 0x08	; 8
    1362:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    1366:	88 23       	and	r24, r24
    1368:	41 f0       	breq	.+16     	; 0x137a <xQueueGenericReset+0x7a>
    136a:	2a de       	rcall	.-940    	; 0xfc0 <vPortYield>
    136c:	06 c0       	rjmp	.+12     	; 0x137a <xQueueGenericReset+0x7a>
    136e:	ce 01       	movw	r24, r28
    1370:	08 96       	adiw	r24, 0x08	; 8
    1372:	58 dd       	rcall	.-1360   	; 0xe24 <vListInitialise>
    1374:	ce 01       	movw	r24, r28
    1376:	43 96       	adiw	r24, 0x13	; 19
    1378:	55 dd       	rcall	.-1366   	; 0xe24 <vListInitialise>
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <prvInitialiseNewQueue>:
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	f8 01       	movw	r30, r16
    138c:	61 11       	cpse	r22, r1
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <prvInitialiseNewQueue+0x10>
    1390:	11 83       	std	Z+1, r17	; 0x01
    1392:	00 83       	st	Z, r16
    1394:	02 c0       	rjmp	.+4      	; 0x139a <prvInitialiseNewQueue+0x14>
    1396:	51 83       	std	Z+1, r21	; 0x01
    1398:	40 83       	st	Z, r20
    139a:	87 8f       	std	Z+31, r24	; 0x1f
    139c:	60 a3       	std	Z+32, r22	; 0x20
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	cf 01       	movw	r24, r30
    13a2:	ae df       	rcall	.-164    	; 0x1300 <xQueueGenericReset>
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <xQueueGenericCreate>:
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	f8 2e       	mov	r15, r24
    13ba:	e6 2e       	mov	r14, r22
    13bc:	d4 2e       	mov	r13, r20
    13be:	86 9f       	mul	r24, r22
    13c0:	c0 01       	movw	r24, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	83 96       	adiw	r24, 0x23	; 35
    13c6:	48 dc       	rcall	.-1904   	; 0xc58 <pvPortMalloc>
    13c8:	ec 01       	movw	r28, r24
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	41 f0       	breq	.+16     	; 0x13de <xQueueGenericCreate+0x34>
    13ce:	8c 01       	movw	r16, r24
    13d0:	2d 2d       	mov	r18, r13
    13d2:	ac 01       	movw	r20, r24
    13d4:	4d 5d       	subi	r20, 0xDD	; 221
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	6e 2d       	mov	r22, r14
    13da:	8f 2d       	mov	r24, r15
    13dc:	d4 df       	rcall	.-88     	; 0x1386 <prvInitialiseNewQueue>
    13de:	ce 01       	movw	r24, r28
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	08 95       	ret

000013f0 <xQueueGenericSend>:
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	29 97       	sbiw	r28, 0x09	; 9
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	7c 01       	movw	r14, r24
    1412:	6b 01       	movw	r12, r22
    1414:	2e 83       	std	Y+6, r18	; 0x06
    1416:	3f 83       	std	Y+7, r19	; 0x07
    1418:	48 87       	std	Y+8, r20	; 0x08
    141a:	59 87       	std	Y+9, r21	; 0x09
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	0f 92       	push	r0
    1424:	f7 01       	movw	r30, r14
    1426:	96 8d       	ldd	r25, Z+30	; 0x1e
    1428:	87 8d       	ldd	r24, Z+31	; 0x1f
    142a:	98 17       	cp	r25, r24
    142c:	10 f0       	brcs	.+4      	; 0x1432 <xQueueGenericSend+0x42>
    142e:	02 30       	cpi	r16, 0x02	; 2
    1430:	b1 f4       	brne	.+44     	; 0x145e <xQueueGenericSend+0x6e>
    1432:	40 2f       	mov	r20, r16
    1434:	b6 01       	movw	r22, r12
    1436:	c7 01       	movw	r24, r14
    1438:	b6 de       	rcall	.-660    	; 0x11a6 <prvCopyDataToQueue>
    143a:	f7 01       	movw	r30, r14
    143c:	93 89       	ldd	r25, Z+19	; 0x13
    143e:	99 23       	and	r25, r25
    1440:	41 f0       	breq	.+16     	; 0x1452 <xQueueGenericSend+0x62>
    1442:	c7 01       	movw	r24, r14
    1444:	43 96       	adiw	r24, 0x13	; 19
    1446:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    144a:	88 23       	and	r24, r24
    144c:	21 f0       	breq	.+8      	; 0x1456 <xQueueGenericSend+0x66>
    144e:	b8 dd       	rcall	.-1168   	; 0xfc0 <vPortYield>
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <xQueueGenericSend+0x66>
    1452:	81 11       	cpse	r24, r1
    1454:	b5 dd       	rcall	.-1174   	; 0xfc0 <vPortYield>
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	4c c0       	rjmp	.+152    	; 0x14f6 <xQueueGenericSend+0x106>
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	a8 85       	ldd	r26, Y+8	; 0x08
    1464:	b9 85       	ldd	r27, Y+9	; 0x09
    1466:	89 2b       	or	r24, r25
    1468:	8a 2b       	or	r24, r26
    146a:	8b 2b       	or	r24, r27
    146c:	21 f4       	brne	.+8      	; 0x1476 <xQueueGenericSend+0x86>
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	40 c0       	rjmp	.+128    	; 0x14f6 <xQueueGenericSend+0x106>
    1476:	11 11       	cpse	r17, r1
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <xQueueGenericSend+0x94>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskInternalSetTimeOutState>
    1482:	11 e0       	ldi	r17, 0x01	; 1
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	c7 d7       	rcall	.+3982   	; 0x2418 <vTaskSuspendAll>
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	0f 92       	push	r0
    1490:	f7 01       	movw	r30, r14
    1492:	81 a1       	ldd	r24, Z+33	; 0x21
    1494:	8f 3f       	cpi	r24, 0xFF	; 255
    1496:	09 f4       	brne	.+2      	; 0x149a <xQueueGenericSend+0xaa>
    1498:	11 a2       	std	Z+33, r1	; 0x21
    149a:	f7 01       	movw	r30, r14
    149c:	82 a1       	ldd	r24, Z+34	; 0x22
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <xQueueGenericSend+0xb4>
    14a2:	12 a2       	std	Z+34, r1	; 0x22
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	be 01       	movw	r22, r28
    14aa:	6a 5f       	subi	r22, 0xFA	; 250
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xTaskCheckForTimeOut>
    14b6:	81 11       	cpse	r24, r1
    14b8:	19 c0       	rjmp	.+50     	; 0x14ec <xQueueGenericSend+0xfc>
    14ba:	c7 01       	movw	r24, r14
    14bc:	66 de       	rcall	.-820    	; 0x118a <prvIsQueueFull>
    14be:	88 23       	and	r24, r24
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <xQueueGenericSend+0xf2>
    14c2:	4e 81       	ldd	r20, Y+6	; 0x06
    14c4:	5f 81       	ldd	r21, Y+7	; 0x07
    14c6:	68 85       	ldd	r22, Y+8	; 0x08
    14c8:	79 85       	ldd	r23, Y+9	; 0x09
    14ca:	c7 01       	movw	r24, r14
    14cc:	08 96       	adiw	r24, 0x08	; 8
    14ce:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <vTaskPlaceOnEventList>
    14d2:	c7 01       	movw	r24, r14
    14d4:	e1 de       	rcall	.-574    	; 0x1298 <prvUnlockQueue>
    14d6:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
    14da:	81 11       	cpse	r24, r1
    14dc:	a0 cf       	rjmp	.-192    	; 0x141e <xQueueGenericSend+0x2e>
    14de:	70 dd       	rcall	.-1312   	; 0xfc0 <vPortYield>
    14e0:	9e cf       	rjmp	.-196    	; 0x141e <xQueueGenericSend+0x2e>
    14e2:	c7 01       	movw	r24, r14
    14e4:	d9 de       	rcall	.-590    	; 0x1298 <prvUnlockQueue>
    14e6:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
    14ea:	99 cf       	rjmp	.-206    	; 0x141e <xQueueGenericSend+0x2e>
    14ec:	c7 01       	movw	r24, r14
    14ee:	d4 de       	rcall	.-600    	; 0x1298 <prvUnlockQueue>
    14f0:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	08 95       	ret

00001514 <prvInitialiseMutex>:
    1514:	0f 93       	push	r16
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f0       	breq	.+26     	; 0x1534 <prvInitialiseMutex+0x20>
    151a:	fc 01       	movw	r30, r24
    151c:	15 82       	std	Z+5, r1	; 0x05
    151e:	14 82       	std	Z+4, r1	; 0x04
    1520:	11 82       	std	Z+1, r1	; 0x01
    1522:	10 82       	st	Z, r1
    1524:	16 82       	std	Z+6, r1	; 0x06
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	5e df       	rcall	.-324    	; 0x13f0 <xQueueGenericSend>
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <xQueueCreateMutex>:
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	48 2f       	mov	r20, r24
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	33 df       	rcall	.-410    	; 0x13aa <xQueueGenericCreate>
    1544:	ec 01       	movw	r28, r24
    1546:	e6 df       	rcall	.-52     	; 0x1514 <prvInitialiseMutex>
    1548:	ce 01       	movw	r24, r28
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <xQueueGenericSendFromISR>:
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	8a 01       	movw	r16, r20
    155e:	fc 01       	movw	r30, r24
    1560:	56 8d       	ldd	r21, Z+30	; 0x1e
    1562:	37 8d       	ldd	r19, Z+31	; 0x1f
    1564:	53 17       	cp	r21, r19
    1566:	10 f0       	brcs	.+4      	; 0x156c <xQueueGenericSendFromISR+0x1c>
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	f9 f4       	brne	.+62     	; 0x15aa <xQueueGenericSendFromISR+0x5a>
    156c:	42 2f       	mov	r20, r18
    156e:	78 01       	movw	r14, r16
    1570:	ec 01       	movw	r28, r24
    1572:	1a a1       	ldd	r17, Y+34	; 0x22
    1574:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1576:	ce 01       	movw	r24, r28
    1578:	16 de       	rcall	.-980    	; 0x11a6 <prvCopyDataToQueue>
    157a:	1f 3f       	cpi	r17, 0xFF	; 255
    157c:	81 f4       	brne	.+32     	; 0x159e <xQueueGenericSendFromISR+0x4e>
    157e:	8b 89       	ldd	r24, Y+19	; 0x13
    1580:	88 23       	and	r24, r24
    1582:	a9 f0       	breq	.+42     	; 0x15ae <xQueueGenericSendFromISR+0x5e>
    1584:	ce 01       	movw	r24, r28
    1586:	43 96       	adiw	r24, 0x13	; 19
    1588:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    158c:	88 23       	and	r24, r24
    158e:	89 f0       	breq	.+34     	; 0x15b2 <xQueueGenericSendFromISR+0x62>
    1590:	e1 14       	cp	r14, r1
    1592:	f1 04       	cpc	r15, r1
    1594:	81 f0       	breq	.+32     	; 0x15b6 <xQueueGenericSendFromISR+0x66>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	f7 01       	movw	r30, r14
    159a:	80 83       	st	Z, r24
    159c:	0d c0       	rjmp	.+26     	; 0x15b8 <xQueueGenericSendFromISR+0x68>
    159e:	ff 24       	eor	r15, r15
    15a0:	f3 94       	inc	r15
    15a2:	f1 0e       	add	r15, r17
    15a4:	fa a2       	std	Y+34, r15	; 0x22
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <xQueueGenericSendFromISR+0x68>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <xQueueGenericSendFromISR+0x68>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <xQueueGenericSendFromISR+0x68>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <xQueueGenericSendFromISR+0x68>
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	08 95       	ret

000015c6 <xQueueReceive>:
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	29 97       	sbiw	r28, 0x09	; 9
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	8c 01       	movw	r16, r24
    15e8:	6b 01       	movw	r12, r22
    15ea:	2e 83       	std	Y+6, r18	; 0x06
    15ec:	3f 83       	std	Y+7, r19	; 0x07
    15ee:	48 87       	std	Y+8, r20	; 0x08
    15f0:	59 87       	std	Y+9, r21	; 0x09
    15f2:	e1 2c       	mov	r14, r1
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	0f 92       	push	r0
    15fa:	f8 01       	movw	r30, r16
    15fc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    15fe:	ff 20       	and	r15, r15
    1600:	99 f0       	breq	.+38     	; 0x1628 <xQueueReceive+0x62>
    1602:	b6 01       	movw	r22, r12
    1604:	c8 01       	movw	r24, r16
    1606:	2e de       	rcall	.-932    	; 0x1264 <prvCopyDataFromQueue>
    1608:	fa 94       	dec	r15
    160a:	f8 01       	movw	r30, r16
    160c:	f6 8e       	std	Z+30, r15	; 0x1e
    160e:	80 85       	ldd	r24, Z+8	; 0x08
    1610:	88 23       	and	r24, r24
    1612:	31 f0       	breq	.+12     	; 0x1620 <xQueueReceive+0x5a>
    1614:	c8 01       	movw	r24, r16
    1616:	08 96       	adiw	r24, 0x08	; 8
    1618:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    161c:	81 11       	cpse	r24, r1
    161e:	d0 dc       	rcall	.-1632   	; 0xfc0 <vPortYield>
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	4f c0       	rjmp	.+158    	; 0x16c6 <xQueueReceive+0x100>
    1628:	8e 81       	ldd	r24, Y+6	; 0x06
    162a:	9f 81       	ldd	r25, Y+7	; 0x07
    162c:	a8 85       	ldd	r26, Y+8	; 0x08
    162e:	b9 85       	ldd	r27, Y+9	; 0x09
    1630:	89 2b       	or	r24, r25
    1632:	8a 2b       	or	r24, r26
    1634:	8b 2b       	or	r24, r27
    1636:	21 f4       	brne	.+8      	; 0x1640 <xQueueReceive+0x7a>
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	43 c0       	rjmp	.+134    	; 0x16c6 <xQueueReceive+0x100>
    1640:	e1 10       	cpse	r14, r1
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <xQueueReceive+0x8a>
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskInternalSetTimeOutState>
    164c:	ee 24       	eor	r14, r14
    164e:	e3 94       	inc	r14
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	e1 d6       	rcall	.+3522   	; 0x2418 <vTaskSuspendAll>
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	0f 92       	push	r0
    165c:	f8 01       	movw	r30, r16
    165e:	81 a1       	ldd	r24, Z+33	; 0x21
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	09 f4       	brne	.+2      	; 0x1666 <xQueueReceive+0xa0>
    1664:	11 a2       	std	Z+33, r1	; 0x21
    1666:	f8 01       	movw	r30, r16
    1668:	82 a1       	ldd	r24, Z+34	; 0x22
    166a:	8f 3f       	cpi	r24, 0xFF	; 255
    166c:	09 f4       	brne	.+2      	; 0x1670 <xQueueReceive+0xaa>
    166e:	12 a2       	std	Z+34, r1	; 0x22
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	be 01       	movw	r22, r28
    1676:	6a 5f       	subi	r22, 0xFA	; 250
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xTaskCheckForTimeOut>
    1682:	81 11       	cpse	r24, r1
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <xQueueReceive+0xee>
    1686:	c8 01       	movw	r24, r16
    1688:	73 dd       	rcall	.-1306   	; 0x1170 <prvIsQueueEmpty>
    168a:	88 23       	and	r24, r24
    168c:	79 f0       	breq	.+30     	; 0x16ac <xQueueReceive+0xe6>
    168e:	4e 81       	ldd	r20, Y+6	; 0x06
    1690:	5f 81       	ldd	r21, Y+7	; 0x07
    1692:	68 85       	ldd	r22, Y+8	; 0x08
    1694:	79 85       	ldd	r23, Y+9	; 0x09
    1696:	c8 01       	movw	r24, r16
    1698:	43 96       	adiw	r24, 0x13	; 19
    169a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <vTaskPlaceOnEventList>
    169e:	c8 01       	movw	r24, r16
    16a0:	fb dd       	rcall	.-1034   	; 0x1298 <prvUnlockQueue>
    16a2:	fa d7       	rcall	.+4084   	; 0x2698 <xTaskResumeAll>
    16a4:	81 11       	cpse	r24, r1
    16a6:	a6 cf       	rjmp	.-180    	; 0x15f4 <xQueueReceive+0x2e>
    16a8:	8b dc       	rcall	.-1770   	; 0xfc0 <vPortYield>
    16aa:	a4 cf       	rjmp	.-184    	; 0x15f4 <xQueueReceive+0x2e>
    16ac:	c8 01       	movw	r24, r16
    16ae:	f4 dd       	rcall	.-1048   	; 0x1298 <prvUnlockQueue>
    16b0:	f3 d7       	rcall	.+4070   	; 0x2698 <xTaskResumeAll>
    16b2:	a0 cf       	rjmp	.-192    	; 0x15f4 <xQueueReceive+0x2e>
    16b4:	c8 01       	movw	r24, r16
    16b6:	f0 dd       	rcall	.-1056   	; 0x1298 <prvUnlockQueue>
    16b8:	ef d7       	rcall	.+4062   	; 0x2698 <xTaskResumeAll>
    16ba:	c8 01       	movw	r24, r16
    16bc:	59 dd       	rcall	.-1358   	; 0x1170 <prvIsQueueEmpty>
    16be:	88 23       	and	r24, r24
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <xQueueReceive+0xfe>
    16c2:	98 cf       	rjmp	.-208    	; 0x15f4 <xQueueReceive+0x2e>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	29 96       	adiw	r28, 0x09	; 9
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	08 95       	ret

000016e4 <xQueueSemaphoreTake>:
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	29 97       	sbiw	r28, 0x09	; 9
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	8c 01       	movw	r16, r24
    1702:	4e 83       	std	Y+6, r20	; 0x06
    1704:	5f 83       	std	Y+7, r21	; 0x07
    1706:	68 87       	std	Y+8, r22	; 0x08
    1708:	79 87       	std	Y+9, r23	; 0x09
    170a:	e1 2c       	mov	r14, r1
    170c:	f1 2c       	mov	r15, r1
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	0f 92       	push	r0
    1714:	f8 01       	movw	r30, r16
    1716:	86 8d       	ldd	r24, Z+30	; 0x1e
    1718:	88 23       	and	r24, r24
    171a:	c9 f0       	breq	.+50     	; 0x174e <xQueueSemaphoreTake+0x6a>
    171c:	81 50       	subi	r24, 0x01	; 1
    171e:	86 8f       	std	Z+30, r24	; 0x1e
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	89 2b       	or	r24, r25
    1726:	29 f4       	brne	.+10     	; 0x1732 <xQueueSemaphoreTake+0x4e>
    1728:	0e 94 10 19 	call	0x3220	; 0x3220 <pvTaskIncrementMutexHeldCount>
    172c:	f8 01       	movw	r30, r16
    172e:	95 83       	std	Z+5, r25	; 0x05
    1730:	84 83       	std	Z+4, r24	; 0x04
    1732:	f8 01       	movw	r30, r16
    1734:	80 85       	ldd	r24, Z+8	; 0x08
    1736:	88 23       	and	r24, r24
    1738:	31 f0       	breq	.+12     	; 0x1746 <xQueueSemaphoreTake+0x62>
    173a:	c8 01       	movw	r24, r16
    173c:	08 96       	adiw	r24, 0x08	; 8
    173e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <xTaskRemoveFromEventList>
    1742:	81 11       	cpse	r24, r1
    1744:	3d dc       	rcall	.-1926   	; 0xfc0 <vPortYield>
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	6f c0       	rjmp	.+222    	; 0x182c <xQueueSemaphoreTake+0x148>
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	a8 85       	ldd	r26, Y+8	; 0x08
    1754:	b9 85       	ldd	r27, Y+9	; 0x09
    1756:	89 2b       	or	r24, r25
    1758:	8a 2b       	or	r24, r26
    175a:	8b 2b       	or	r24, r27
    175c:	21 f4       	brne	.+8      	; 0x1766 <xQueueSemaphoreTake+0x82>
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	63 c0       	rjmp	.+198    	; 0x182c <xQueueSemaphoreTake+0x148>
    1766:	f1 10       	cpse	r15, r1
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <xQueueSemaphoreTake+0x92>
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskInternalSetTimeOutState>
    1772:	ff 24       	eor	r15, r15
    1774:	f3 94       	inc	r15
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	4e d6       	rcall	.+3228   	; 0x2418 <vTaskSuspendAll>
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
    1782:	f8 01       	movw	r30, r16
    1784:	81 a1       	ldd	r24, Z+33	; 0x21
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	09 f4       	brne	.+2      	; 0x178c <xQueueSemaphoreTake+0xa8>
    178a:	11 a2       	std	Z+33, r1	; 0x21
    178c:	f8 01       	movw	r30, r16
    178e:	82 a1       	ldd	r24, Z+34	; 0x22
    1790:	8f 3f       	cpi	r24, 0xFF	; 255
    1792:	09 f4       	brne	.+2      	; 0x1796 <xQueueSemaphoreTake+0xb2>
    1794:	12 a2       	std	Z+34, r1	; 0x22
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	be 01       	movw	r22, r28
    179c:	6a 5f       	subi	r22, 0xFA	; 250
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xTaskCheckForTimeOut>
    17a8:	81 11       	cpse	r24, r1
    17aa:	26 c0       	rjmp	.+76     	; 0x17f8 <xQueueSemaphoreTake+0x114>
    17ac:	c8 01       	movw	r24, r16
    17ae:	e0 dc       	rcall	.-1600   	; 0x1170 <prvIsQueueEmpty>
    17b0:	88 23       	and	r24, r24
    17b2:	f1 f0       	breq	.+60     	; 0x17f0 <xQueueSemaphoreTake+0x10c>
    17b4:	f8 01       	movw	r30, r16
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	89 2b       	or	r24, r25
    17bc:	51 f4       	brne	.+20     	; 0x17d2 <xQueueSemaphoreTake+0xee>
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	0f 92       	push	r0
    17c4:	84 81       	ldd	r24, Z+4	; 0x04
    17c6:	95 81       	ldd	r25, Z+5	; 0x05
    17c8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <xTaskPriorityInherit>
    17cc:	e8 2e       	mov	r14, r24
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	4e 81       	ldd	r20, Y+6	; 0x06
    17d4:	5f 81       	ldd	r21, Y+7	; 0x07
    17d6:	68 85       	ldd	r22, Y+8	; 0x08
    17d8:	79 85       	ldd	r23, Y+9	; 0x09
    17da:	c8 01       	movw	r24, r16
    17dc:	43 96       	adiw	r24, 0x13	; 19
    17de:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <vTaskPlaceOnEventList>
    17e2:	c8 01       	movw	r24, r16
    17e4:	59 dd       	rcall	.-1358   	; 0x1298 <prvUnlockQueue>
    17e6:	58 d7       	rcall	.+3760   	; 0x2698 <xTaskResumeAll>
    17e8:	81 11       	cpse	r24, r1
    17ea:	91 cf       	rjmp	.-222    	; 0x170e <xQueueSemaphoreTake+0x2a>
    17ec:	e9 db       	rcall	.-2094   	; 0xfc0 <vPortYield>
    17ee:	8f cf       	rjmp	.-226    	; 0x170e <xQueueSemaphoreTake+0x2a>
    17f0:	c8 01       	movw	r24, r16
    17f2:	52 dd       	rcall	.-1372   	; 0x1298 <prvUnlockQueue>
    17f4:	51 d7       	rcall	.+3746   	; 0x2698 <xTaskResumeAll>
    17f6:	8b cf       	rjmp	.-234    	; 0x170e <xQueueSemaphoreTake+0x2a>
    17f8:	c8 01       	movw	r24, r16
    17fa:	4e dd       	rcall	.-1380   	; 0x1298 <prvUnlockQueue>
    17fc:	4d d7       	rcall	.+3738   	; 0x2698 <xTaskResumeAll>
    17fe:	c8 01       	movw	r24, r16
    1800:	b7 dc       	rcall	.-1682   	; 0x1170 <prvIsQueueEmpty>
    1802:	88 23       	and	r24, r24
    1804:	09 f4       	brne	.+2      	; 0x1808 <xQueueSemaphoreTake+0x124>
    1806:	83 cf       	rjmp	.-250    	; 0x170e <xQueueSemaphoreTake+0x2a>
    1808:	ee 20       	and	r14, r14
    180a:	79 f0       	breq	.+30     	; 0x182a <xQueueSemaphoreTake+0x146>
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	0f 92       	push	r0
    1812:	c8 01       	movw	r24, r16
    1814:	9d dc       	rcall	.-1734   	; 0x1150 <prvGetDisinheritPriorityAfterTimeout>
    1816:	68 2f       	mov	r22, r24
    1818:	f8 01       	movw	r30, r16
    181a:	84 81       	ldd	r24, Z+4	; 0x04
    181c:	95 81       	ldd	r25, Z+5	; 0x05
    181e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <vTaskPriorityDisinheritAfterTimeout>
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	01 c0       	rjmp	.+2      	; 0x182c <xQueueSemaphoreTake+0x148>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	29 96       	adiw	r28, 0x09	; 9
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	08 95       	ret

00001846 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	0f 92       	push	r0
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	09 f4       	brne	.+2      	; 0x185a <vQueueWaitForMessageRestricted+0x14>
    1858:	19 a2       	std	Y+33, r1	; 0x21
    185a:	8a a1       	ldd	r24, Y+34	; 0x22
    185c:	8f 3f       	cpi	r24, 0xFF	; 255
    185e:	09 f4       	brne	.+2      	; 0x1862 <vQueueWaitForMessageRestricted+0x1c>
    1860:	1a a2       	std	Y+34, r1	; 0x22
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1866:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1868:	81 11       	cpse	r24, r1
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    186c:	ce 01       	movw	r24, r28
    186e:	43 96       	adiw	r24, 0x13	; 19
    1870:	0e 94 6e 15 	call	0x2adc	; 0x2adc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1874:	ce 01       	movw	r24, r28
    1876:	10 dd       	rcall	.-1504   	; 0x1298 <prvUnlockQueue>
    }
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    187e:	fc 01       	movw	r30, r24
    1880:	44 81       	ldd	r20, Z+4	; 0x04
    1882:	55 81       	ldd	r21, Z+5	; 0x05
    1884:	22 81       	ldd	r18, Z+2	; 0x02
    1886:	33 81       	ldd	r19, Z+3	; 0x03
    1888:	24 0f       	add	r18, r20
    188a:	35 1f       	adc	r19, r21
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	b9 01       	movw	r22, r18
    1892:	68 1b       	sub	r22, r24
    1894:	79 0b       	sbc	r23, r25
    1896:	cb 01       	movw	r24, r22
    1898:	64 17       	cp	r22, r20
    189a:	75 07       	cpc	r23, r21
    189c:	10 f0       	brcs	.+4      	; 0x18a2 <prvBytesInBuffer+0x24>
    189e:	84 1b       	sub	r24, r20
    18a0:	95 0b       	sbc	r25, r21
    18a2:	08 95       	ret

000018a4 <prvInitialiseNewStreamBuffer>:
    18a4:	0f 93       	push	r16
    18a6:	fc 01       	movw	r30, r24
    18a8:	8f e0       	ldi	r24, 0x0F	; 15
    18aa:	df 01       	movw	r26, r30
    18ac:	1d 92       	st	X+, r1
    18ae:	8a 95       	dec	r24
    18b0:	e9 f7       	brne	.-6      	; 0x18ac <prvInitialiseNewStreamBuffer+0x8>
    18b2:	75 87       	std	Z+13, r23	; 0x0d
    18b4:	64 87       	std	Z+12, r22	; 0x0c
    18b6:	55 83       	std	Z+5, r21	; 0x05
    18b8:	44 83       	std	Z+4, r20	; 0x04
    18ba:	37 83       	std	Z+7, r19	; 0x07
    18bc:	26 83       	std	Z+6, r18	; 0x06
    18be:	06 87       	std	Z+14, r16	; 0x0e
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <prvWriteBytesToBuffer>:
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	6c 01       	movw	r12, r24
    18da:	5b 01       	movw	r10, r22
    18dc:	7a 01       	movw	r14, r20
    18de:	fc 01       	movw	r30, r24
    18e0:	c2 81       	ldd	r28, Z+2	; 0x02
    18e2:	d3 81       	ldd	r29, Z+3	; 0x03
    18e4:	04 81       	ldd	r16, Z+4	; 0x04
    18e6:	15 81       	ldd	r17, Z+5	; 0x05
    18e8:	0c 1b       	sub	r16, r28
    18ea:	1d 0b       	sbc	r17, r29
    18ec:	40 17       	cp	r20, r16
    18ee:	51 07       	cpc	r21, r17
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <prvWriteBytesToBuffer+0x30>
    18f2:	8a 01       	movw	r16, r20
    18f4:	f6 01       	movw	r30, r12
    18f6:	84 85       	ldd	r24, Z+12	; 0x0c
    18f8:	95 85       	ldd	r25, Z+13	; 0x0d
    18fa:	a8 01       	movw	r20, r16
    18fc:	b5 01       	movw	r22, r10
    18fe:	8c 0f       	add	r24, r28
    1900:	9d 1f       	adc	r25, r29
    1902:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    1906:	0e 15       	cp	r16, r14
    1908:	1f 05       	cpc	r17, r15
    190a:	58 f4       	brcc	.+22     	; 0x1922 <prvWriteBytesToBuffer+0x5e>
    190c:	a7 01       	movw	r20, r14
    190e:	40 1b       	sub	r20, r16
    1910:	51 0b       	sbc	r21, r17
    1912:	b5 01       	movw	r22, r10
    1914:	60 0f       	add	r22, r16
    1916:	71 1f       	adc	r23, r17
    1918:	f6 01       	movw	r30, r12
    191a:	84 85       	ldd	r24, Z+12	; 0x0c
    191c:	95 85       	ldd	r25, Z+13	; 0x0d
    191e:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    1922:	ce 01       	movw	r24, r28
    1924:	8e 0d       	add	r24, r14
    1926:	9f 1d       	adc	r25, r15
    1928:	f6 01       	movw	r30, r12
    192a:	24 81       	ldd	r18, Z+4	; 0x04
    192c:	35 81       	ldd	r19, Z+5	; 0x05
    192e:	82 17       	cp	r24, r18
    1930:	93 07       	cpc	r25, r19
    1932:	10 f0       	brcs	.+4      	; 0x1938 <prvWriteBytesToBuffer+0x74>
    1934:	82 1b       	sub	r24, r18
    1936:	93 0b       	sbc	r25, r19
    1938:	f6 01       	movw	r30, r12
    193a:	93 83       	std	Z+3, r25	; 0x03
    193c:	82 83       	std	Z+2, r24	; 0x02
    193e:	c7 01       	movw	r24, r14
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	bf 90       	pop	r11
    1952:	af 90       	pop	r10
    1954:	08 95       	ret

00001956 <prvWriteMessageToBuffer>:
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	1f 92       	push	r1
    1968:	1f 92       	push	r1
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	7c 01       	movw	r14, r24
    1970:	6b 01       	movw	r12, r22
    1972:	5a 83       	std	Y+2, r21	; 0x02
    1974:	49 83       	std	Y+1, r20	; 0x01
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	c1 f0       	breq	.+48     	; 0x19ac <prvWriteMessageToBuffer+0x56>
    197c:	fc 01       	movw	r30, r24
    197e:	86 85       	ldd	r24, Z+14	; 0x0e
    1980:	80 fd       	sbrc	r24, 0
    1982:	08 c0       	rjmp	.+16     	; 0x1994 <prvWriteMessageToBuffer+0x3e>
    1984:	42 17       	cp	r20, r18
    1986:	53 07       	cpc	r21, r19
    1988:	08 f4       	brcc	.+2      	; 0x198c <prvWriteMessageToBuffer+0x36>
    198a:	9a 01       	movw	r18, r20
    198c:	3a 83       	std	Y+2, r19	; 0x02
    198e:	29 83       	std	Y+1, r18	; 0x01
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <prvWriteMessageToBuffer+0x5c>
    1994:	20 17       	cp	r18, r16
    1996:	31 07       	cpc	r19, r17
    1998:	58 f0       	brcs	.+22     	; 0x19b0 <prvWriteMessageToBuffer+0x5a>
    199a:	42 e0       	ldi	r20, 0x02	; 2
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	be 01       	movw	r22, r28
    19a0:	6f 5f       	subi	r22, 0xFF	; 255
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	c7 01       	movw	r24, r14
    19a6:	8e df       	rcall	.-228    	; 0x18c4 <prvWriteBytesToBuffer>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <prvWriteMessageToBuffer+0x5c>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <prvWriteMessageToBuffer+0x5c>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	88 23       	and	r24, r24
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <prvWriteMessageToBuffer+0x6c>
    19b6:	49 81       	ldd	r20, Y+1	; 0x01
    19b8:	5a 81       	ldd	r21, Y+2	; 0x02
    19ba:	b6 01       	movw	r22, r12
    19bc:	c7 01       	movw	r24, r14
    19be:	82 df       	rcall	.-252    	; 0x18c4 <prvWriteBytesToBuffer>
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <prvWriteMessageToBuffer+0x70>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	08 95       	ret

000019dc <prvReadBytesFromBuffer>:
    19dc:	af 92       	push	r10
    19de:	bf 92       	push	r11
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	7c 01       	movw	r14, r24
    19f2:	5b 01       	movw	r10, r22
    19f4:	e9 01       	movw	r28, r18
    19f6:	42 17       	cp	r20, r18
    19f8:	53 07       	cpc	r21, r19
    19fa:	08 f4       	brcc	.+2      	; 0x19fe <prvReadBytesFromBuffer+0x22>
    19fc:	ea 01       	movw	r28, r20
    19fe:	20 97       	sbiw	r28, 0x00	; 0
    1a00:	81 f1       	breq	.+96     	; 0x1a62 <prvReadBytesFromBuffer+0x86>
    1a02:	f7 01       	movw	r30, r14
    1a04:	00 81       	ld	r16, Z
    1a06:	11 81       	ldd	r17, Z+1	; 0x01
    1a08:	84 81       	ldd	r24, Z+4	; 0x04
    1a0a:	95 81       	ldd	r25, Z+5	; 0x05
    1a0c:	80 1b       	sub	r24, r16
    1a0e:	91 0b       	sbc	r25, r17
    1a10:	6e 01       	movw	r12, r28
    1a12:	8c 17       	cp	r24, r28
    1a14:	9d 07       	cpc	r25, r29
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <prvReadBytesFromBuffer+0x3e>
    1a18:	6c 01       	movw	r12, r24
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	64 85       	ldd	r22, Z+12	; 0x0c
    1a1e:	75 85       	ldd	r23, Z+13	; 0x0d
    1a20:	60 0f       	add	r22, r16
    1a22:	71 1f       	adc	r23, r17
    1a24:	a6 01       	movw	r20, r12
    1a26:	c5 01       	movw	r24, r10
    1a28:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    1a2c:	cc 16       	cp	r12, r28
    1a2e:	dd 06       	cpc	r13, r29
    1a30:	58 f4       	brcc	.+22     	; 0x1a48 <prvReadBytesFromBuffer+0x6c>
    1a32:	ae 01       	movw	r20, r28
    1a34:	4c 19       	sub	r20, r12
    1a36:	5d 09       	sbc	r21, r13
    1a38:	f7 01       	movw	r30, r14
    1a3a:	64 85       	ldd	r22, Z+12	; 0x0c
    1a3c:	75 85       	ldd	r23, Z+13	; 0x0d
    1a3e:	c5 01       	movw	r24, r10
    1a40:	8c 0d       	add	r24, r12
    1a42:	9d 1d       	adc	r25, r13
    1a44:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    1a48:	0c 0f       	add	r16, r28
    1a4a:	1d 1f       	adc	r17, r29
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	84 81       	ldd	r24, Z+4	; 0x04
    1a50:	95 81       	ldd	r25, Z+5	; 0x05
    1a52:	08 17       	cp	r16, r24
    1a54:	19 07       	cpc	r17, r25
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <prvReadBytesFromBuffer+0x80>
    1a58:	08 1b       	sub	r16, r24
    1a5a:	19 0b       	sbc	r17, r25
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	11 83       	std	Z+1, r17	; 0x01
    1a60:	00 83       	st	Z, r16
    1a62:	ce 01       	movw	r24, r28
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	08 95       	ret

00001a7a <prvReadMessageFromBuffer>:
    1a7a:	6f 92       	push	r6
    1a7c:	7f 92       	push	r7
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	1f 92       	push	r1
    1a98:	1f 92       	push	r1
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	6c 01       	movw	r12, r24
    1aa0:	4b 01       	movw	r8, r22
    1aa2:	5a 01       	movw	r10, r20
    1aa4:	79 01       	movw	r14, r18
    1aa6:	01 15       	cp	r16, r1
    1aa8:	11 05       	cpc	r17, r1
    1aaa:	b1 f0       	breq	.+44     	; 0x1ad8 <prvReadMessageFromBuffer+0x5e>
    1aac:	fc 01       	movw	r30, r24
    1aae:	60 80       	ld	r6, Z
    1ab0:	71 80       	ldd	r7, Z+1	; 0x01
    1ab2:	a8 01       	movw	r20, r16
    1ab4:	be 01       	movw	r22, r28
    1ab6:	6f 5f       	subi	r22, 0xFF	; 255
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	90 df       	rcall	.-224    	; 0x19dc <prvReadBytesFromBuffer>
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	e0 1a       	sub	r14, r16
    1ac2:	f1 0a       	sbc	r15, r17
    1ac4:	a8 16       	cp	r10, r24
    1ac6:	b9 06       	cpc	r11, r25
    1ac8:	30 f4       	brcc	.+12     	; 0x1ad6 <prvReadMessageFromBuffer+0x5c>
    1aca:	f6 01       	movw	r30, r12
    1acc:	71 82       	std	Z+1, r7	; 0x01
    1ace:	60 82       	st	Z, r6
    1ad0:	a1 2c       	mov	r10, r1
    1ad2:	b1 2c       	mov	r11, r1
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <prvReadMessageFromBuffer+0x5e>
    1ad6:	5c 01       	movw	r10, r24
    1ad8:	97 01       	movw	r18, r14
    1ada:	a5 01       	movw	r20, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	c6 01       	movw	r24, r12
    1ae0:	7d df       	rcall	.-262    	; 0x19dc <prvReadBytesFromBuffer>
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	08 95       	ret

00001b04 <xStreamBufferGenericCreate>:
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	ec 01       	movw	r28, r24
    1b14:	6b 01       	movw	r12, r22
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <xStreamBufferGenericCreate+0x1a>
    1b1a:	01 e0       	ldi	r16, 0x01	; 1
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <xStreamBufferGenericCreate+0x1c>
    1b1e:	00 e0       	ldi	r16, 0x00	; 0
    1b20:	c1 14       	cp	r12, r1
    1b22:	d1 04       	cpc	r13, r1
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <xStreamBufferGenericCreate+0x28>
    1b26:	cc 24       	eor	r12, r12
    1b28:	c3 94       	inc	r12
    1b2a:	d1 2c       	mov	r13, r1
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	40 96       	adiw	r24, 0x10	; 16
    1b30:	c8 17       	cp	r28, r24
    1b32:	d9 07       	cpc	r29, r25
    1b34:	20 f4       	brcc	.+8      	; 0x1b3e <xStreamBufferGenericCreate+0x3a>
    1b36:	21 96       	adiw	r28, 0x01	; 1
    1b38:	8f d8       	rcall	.-3810   	; 0xc58 <pvPortMalloc>
    1b3a:	7c 01       	movw	r14, r24
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <xStreamBufferGenericCreate+0x3e>
    1b3e:	e1 2c       	mov	r14, r1
    1b40:	f1 2c       	mov	r15, r1
    1b42:	e1 14       	cp	r14, r1
    1b44:	f1 04       	cpc	r15, r1
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <xStreamBufferGenericCreate+0x52>
    1b48:	96 01       	movw	r18, r12
    1b4a:	ae 01       	movw	r20, r28
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	61 5f       	subi	r22, 0xF1	; 241
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	c7 01       	movw	r24, r14
    1b54:	a7 de       	rcall	.-690    	; 0x18a4 <prvInitialiseNewStreamBuffer>
    1b56:	c7 01       	movw	r24, r14
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	df 90       	pop	r13
    1b64:	cf 90       	pop	r12
    1b66:	08 95       	ret

00001b68 <xStreamBufferReset>:
    1b68:	0f 93       	push	r16
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	0f 92       	push	r0
    1b70:	fc 01       	movw	r30, r24
    1b72:	20 85       	ldd	r18, Z+8	; 0x08
    1b74:	31 85       	ldd	r19, Z+9	; 0x09
    1b76:	23 2b       	or	r18, r19
    1b78:	71 f4       	brne	.+28     	; 0x1b96 <xStreamBufferReset+0x2e>
    1b7a:	22 85       	ldd	r18, Z+10	; 0x0a
    1b7c:	33 85       	ldd	r19, Z+11	; 0x0b
    1b7e:	23 2b       	or	r18, r19
    1b80:	61 f4       	brne	.+24     	; 0x1b9a <xStreamBufferReset+0x32>
    1b82:	26 81       	ldd	r18, Z+6	; 0x06
    1b84:	37 81       	ldd	r19, Z+7	; 0x07
    1b86:	44 81       	ldd	r20, Z+4	; 0x04
    1b88:	55 81       	ldd	r21, Z+5	; 0x05
    1b8a:	64 85       	ldd	r22, Z+12	; 0x0c
    1b8c:	75 85       	ldd	r23, Z+13	; 0x0d
    1b8e:	06 85       	ldd	r16, Z+14	; 0x0e
    1b90:	89 de       	rcall	.-750    	; 0x18a4 <prvInitialiseNewStreamBuffer>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <xStreamBufferReset+0x34>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <xStreamBufferReset+0x34>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <xStreamBufferSpacesAvailable>:
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	24 81       	ldd	r18, Z+4	; 0x04
    1ba8:	35 81       	ldd	r19, Z+5	; 0x05
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	82 0f       	add	r24, r18
    1bb0:	93 1f       	adc	r25, r19
    1bb2:	42 81       	ldd	r20, Z+2	; 0x02
    1bb4:	53 81       	ldd	r21, Z+3	; 0x03
    1bb6:	84 1b       	sub	r24, r20
    1bb8:	95 0b       	sbc	r25, r21
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	82 17       	cp	r24, r18
    1bbe:	93 07       	cpc	r25, r19
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <xStreamBufferSpacesAvailable+0x22>
    1bc2:	82 1b       	sub	r24, r18
    1bc4:	93 0b       	sbc	r25, r19
    1bc6:	08 95       	ret

00001bc8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1bc8:	2f 92       	push	r2
    1bca:	3f 92       	push	r3
    1bcc:	4f 92       	push	r4
    1bce:	5f 92       	push	r5
    1bd0:	6f 92       	push	r6
    1bd2:	7f 92       	push	r7
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	2b 97       	sbiw	r28, 0x0b	; 11
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	4c 01       	movw	r8, r24
    1bfe:	7b 87       	std	Y+11, r23	; 0x0b
    1c00:	6a 87       	std	Y+10, r22	; 0x0a
    1c02:	1a 01       	movw	r2, r20
    1c04:	0e 83       	std	Y+6, r16	; 0x06
    1c06:	1f 83       	std	Y+7, r17	; 0x07
    1c08:	28 87       	std	Y+8, r18	; 0x08
    1c0a:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	95 81       	ldd	r25, Z+5	; 0x05
    1c12:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c14:	26 85       	ldd	r18, Z+14	; 0x0e
    1c16:	20 ff       	sbrs	r18, 0
    1c18:	0c c0       	rjmp	.+24     	; 0x1c32 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c1a:	2a 01       	movw	r4, r20
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	4f 0e       	add	r4, r31
    1c20:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c22:	84 15       	cp	r24, r4
    1c24:	95 05       	cpc	r25, r5
    1c26:	58 f4       	brcc	.+22     	; 0x1c3e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1c28:	1e 82       	std	Y+6, r1	; 0x06
    1c2a:	1f 82       	std	Y+7, r1	; 0x07
    1c2c:	18 86       	std	Y+8, r1	; 0x08
    1c2e:	19 86       	std	Y+9, r1	; 0x09
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c32:	84 17       	cp	r24, r20
    1c34:	95 07       	cpc	r25, r21
    1c36:	10 f0       	brcs	.+4      	; 0x1c3c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1c38:	2a 01       	movw	r4, r20
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1c3c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	9f 81       	ldd	r25, Y+7	; 0x07
    1c42:	a8 85       	ldd	r26, Y+8	; 0x08
    1c44:	b9 85       	ldd	r27, Y+9	; 0x09
    1c46:	89 2b       	or	r24, r25
    1c48:	8a 2b       	or	r24, r26
    1c4a:	8b 2b       	or	r24, r27
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <xStreamBufferSend+0x88>
    1c4e:	38 c0       	rjmp	.+112    	; 0x1cc0 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c5e:	c4 01       	movw	r24, r8
    1c60:	a1 df       	rcall	.-190    	; 0x1ba4 <xStreamBufferSpacesAvailable>
    1c62:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1c64:	84 15       	cp	r24, r4
    1c66:	95 05       	cpc	r25, r5
    1c68:	40 f5       	brcc	.+80     	; 0x1cba <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1c74:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <xTaskGetCurrentTaskHandle>
    1c78:	f4 01       	movw	r30, r8
    1c7a:	93 87       	std	Z+11, r25	; 0x0b
    1c7c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c82:	ae 80       	ldd	r10, Y+6	; 0x06
    1c84:	bf 80       	ldd	r11, Y+7	; 0x07
    1c86:	c8 84       	ldd	r12, Y+8	; 0x08
    1c88:	d9 84       	ldd	r13, Y+9	; 0x09
    1c8a:	e1 2c       	mov	r14, r1
    1c8c:	f1 2c       	mov	r15, r1
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	98 01       	movw	r18, r16
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	ba 01       	movw	r22, r20
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	0e 94 22 19 	call	0x3244	; 0x3244 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1ca0:	f4 01       	movw	r30, r8
    1ca2:	13 86       	std	Z+11, r1	; 0x0b
    1ca4:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ca6:	be 01       	movw	r22, r28
    1ca8:	6a 5f       	subi	r22, 0xFA	; 250
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	ce 01       	movw	r24, r28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xTaskCheckForTimeOut>
    1cb4:	88 23       	and	r24, r24
    1cb6:	81 f2       	breq	.-96     	; 0x1c58 <xStreamBufferSend+0x90>
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
                    break;
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1cc0:	61 2c       	mov	r6, r1
    1cc2:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1cc4:	61 14       	cp	r6, r1
    1cc6:	71 04       	cpc	r7, r1
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1cca:	c4 01       	movw	r24, r8
    1ccc:	6b df       	rcall	.-298    	; 0x1ba4 <xStreamBufferSpacesAvailable>
    1cce:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1cd0:	82 01       	movw	r16, r4
    1cd2:	93 01       	movw	r18, r6
    1cd4:	a1 01       	movw	r20, r2
    1cd6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1cd8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1cda:	c4 01       	movw	r24, r8
    1cdc:	3c de       	rcall	.-904    	; 0x1956 <prvWriteMessageToBuffer>
    1cde:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1ce0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1ce2:	e9 f0       	breq	.+58     	; 0x1d1e <xStreamBufferSend+0x156>
    1ce4:	c4 01       	movw	r24, r8
    1ce6:	cb dd       	rcall	.-1130   	; 0x187e <prvBytesInBuffer>
    1ce8:	f4 01       	movw	r30, r8
    1cea:	26 81       	ldd	r18, Z+6	; 0x06
    1cec:	37 81       	ldd	r19, Z+7	; 0x07
    1cee:	82 17       	cp	r24, r18
    1cf0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1cf2:	a8 f0       	brcs	.+42     	; 0x1d1e <xStreamBufferSend+0x156>
    1cf4:	91 d3       	rcall	.+1826   	; 0x2418 <vTaskSuspendAll>
    1cf6:	f4 01       	movw	r30, r8
    1cf8:	80 85       	ldd	r24, Z+8	; 0x08
    1cfa:	91 85       	ldd	r25, Z+9	; 0x09
    1cfc:	89 2b       	or	r24, r25
    1cfe:	71 f0       	breq	.+28     	; 0x1d1c <xStreamBufferSend+0x154>
    1d00:	80 85       	ldd	r24, Z+8	; 0x08
    1d02:	91 85       	ldd	r25, Z+9	; 0x09
    1d04:	e1 2c       	mov	r14, r1
    1d06:	f1 2c       	mov	r15, r1
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	0e 94 ca 19 	call	0x3394	; 0x3394 <xTaskGenericNotify>
    1d16:	f4 01       	movw	r30, r8
    1d18:	11 86       	std	Z+9, r1	; 0x09
    1d1a:	10 86       	std	Z+8, r1	; 0x08
    1d1c:	bd d4       	rcall	.+2426   	; 0x2698 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1d1e:	c6 01       	movw	r24, r12
    1d20:	2b 96       	adiw	r28, 0x0b	; 11
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	9f 90       	pop	r9
    1d42:	8f 90       	pop	r8
    1d44:	7f 90       	pop	r7
    1d46:	6f 90       	pop	r6
    1d48:	5f 90       	pop	r5
    1d4a:	4f 90       	pop	r4
    1d4c:	3f 90       	pop	r3
    1d4e:	2f 90       	pop	r2
    1d50:	08 95       	ret

00001d52 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	ec 01       	movw	r28, r24
    1d68:	7b 01       	movw	r14, r22
    1d6a:	5a 01       	movw	r10, r20
    1d6c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d70:	80 ff       	sbrs	r24, 0
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1d74:	8a 01       	movw	r16, r20
    1d76:	0e 5f       	subi	r16, 0xFE	; 254
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1d7c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1d7e:	ce 01       	movw	r24, r28
    1d80:	11 df       	rcall	.-478    	; 0x1ba4 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1d82:	9c 01       	movw	r18, r24
    1d84:	a5 01       	movw	r20, r10
    1d86:	b7 01       	movw	r22, r14
    1d88:	ce 01       	movw	r24, r28
    1d8a:	e5 dd       	rcall	.-1078   	; 0x1956 <prvWriteMessageToBuffer>
    1d8c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1d8e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1d90:	c1 f0       	breq	.+48     	; 0x1dc2 <xStreamBufferSendFromISR+0x70>
    1d92:	ce 01       	movw	r24, r28
    1d94:	74 dd       	rcall	.-1304   	; 0x187e <prvBytesInBuffer>
    1d96:	2e 81       	ldd	r18, Y+6	; 0x06
    1d98:	3f 81       	ldd	r19, Y+7	; 0x07
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	88 f0       	brcs	.+34     	; 0x1dc2 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1da0:	88 85       	ldd	r24, Y+8	; 0x08
    1da2:	99 85       	ldd	r25, Y+9	; 0x09
    1da4:	89 2b       	or	r24, r25
    1da6:	69 f0       	breq	.+26     	; 0x1dc2 <xStreamBufferSendFromISR+0x70>
    1da8:	88 85       	ldd	r24, Y+8	; 0x08
    1daa:	99 85       	ldd	r25, Y+9	; 0x09
    1dac:	e1 2c       	mov	r14, r1
    1dae:	f1 2c       	mov	r15, r1
    1db0:	00 e0       	ldi	r16, 0x00	; 0
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	a9 01       	movw	r20, r18
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 c1 1a 	call	0x3582	; 0x3582 <xTaskGenericNotifyFromISR>
    1dbe:	19 86       	std	Y+9, r1	; 0x09
    1dc0:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1dc2:	c5 01       	movw	r24, r10
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	bf 90       	pop	r11
    1dd6:	af 90       	pop	r10
    1dd8:	08 95       	ret

00001dda <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1dda:	4f 92       	push	r4
    1ddc:	5f 92       	push	r5
    1dde:	6f 92       	push	r6
    1de0:	7f 92       	push	r7
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	2b 01       	movw	r4, r22
    1dfe:	3a 01       	movw	r6, r20
    1e00:	58 01       	movw	r10, r16
    1e02:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e06:	80 ff       	sbrs	r24, 0
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e0a:	68 94       	set
    1e0c:	88 24       	eor	r8, r8
    1e0e:	81 f8       	bld	r8, 1
    1e10:	91 2c       	mov	r9, r1
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1e14:	81 2c       	mov	r8, r1
    1e16:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e18:	a1 14       	cp	r10, r1
    1e1a:	b1 04       	cpc	r11, r1
    1e1c:	c1 04       	cpc	r12, r1
    1e1e:	d1 04       	cpc	r13, r1
    1e20:	41 f1       	breq	.+80     	; 0x1e72 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e28:	ce 01       	movw	r24, r28
    1e2a:	29 dd       	rcall	.-1454   	; 0x187e <prvBytesInBuffer>
    1e2c:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e2e:	88 16       	cp	r8, r24
    1e30:	99 06       	cpc	r9, r25
    1e32:	48 f0       	brcs	.+18     	; 0x1e46 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1e3e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <xTaskGetCurrentTaskHandle>
    1e42:	99 87       	std	Y+9, r25	; 0x09
    1e44:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e4a:	8e 14       	cp	r8, r14
    1e4c:	9f 04       	cpc	r9, r15
    1e4e:	a0 f0       	brcs	.+40     	; 0x1e78 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e50:	e1 2c       	mov	r14, r1
    1e52:	f1 2c       	mov	r15, r1
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	98 01       	movw	r18, r16
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	ba 01       	movw	r22, r20
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	0e 94 22 19 	call	0x3244	; 0x3244 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1e66:	19 86       	std	Y+9, r1	; 0x09
    1e68:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	08 dd       	rcall	.-1520   	; 0x187e <prvBytesInBuffer>
    1e6e:	7c 01       	movw	r14, r24
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e72:	ce 01       	movw	r24, r28
    1e74:	04 dd       	rcall	.-1528   	; 0x187e <prvBytesInBuffer>
    1e76:	7c 01       	movw	r14, r24
    1e78:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1e7a:	9f 04       	cpc	r9, r15
    1e7c:	e8 f4       	brcc	.+58     	; 0x1eb8 <xStreamBufferReceive+0xde>
    1e7e:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1e80:	97 01       	movw	r18, r14
    1e82:	a3 01       	movw	r20, r6
    1e84:	b2 01       	movw	r22, r4
    1e86:	ce 01       	movw	r24, r28
    1e88:	f8 dd       	rcall	.-1040   	; 0x1a7a <prvReadMessageFromBuffer>
    1e8a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1e8c:	89 2b       	or	r24, r25
    1e8e:	b1 f0       	breq	.+44     	; 0x1ebc <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1e90:	c3 d2       	rcall	.+1414   	; 0x2418 <vTaskSuspendAll>
    1e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e96:	89 2b       	or	r24, r25
    1e98:	69 f0       	breq	.+26     	; 0x1eb4 <xStreamBufferReceive+0xda>
    1e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9e:	e1 2c       	mov	r14, r1
    1ea0:	f1 2c       	mov	r15, r1
    1ea2:	00 e0       	ldi	r16, 0x00	; 0
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	0e 94 ca 19 	call	0x3394	; 0x3394 <xTaskGenericNotify>
    1eb0:	1b 86       	std	Y+11, r1	; 0x0b
    1eb2:	1a 86       	std	Y+10, r1	; 0x0a
    1eb4:	f1 d3       	rcall	.+2018   	; 0x2698 <xTaskResumeAll>
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <xStreamBufferReceive+0xe2>
    1eb8:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1eba:	d1 2c       	mov	r13, r1
    1ebc:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	9f 90       	pop	r9
    1ed4:	8f 90       	pop	r8
    1ed6:	7f 90       	pop	r7
    1ed8:	6f 90       	pop	r6
    1eda:	5f 90       	pop	r5
    1edc:	4f 90       	pop	r4
    1ede:	08 95       	ret

00001ee0 <prvResetNextTaskUnblockTime>:
    1ee0:	e0 91 ae 12 	lds	r30, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    1ee4:	f0 91 af 12 	lds	r31, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    1ee8:	80 81       	ld	r24, Z
    1eea:	81 11       	cpse	r24, r1
    1eec:	0c c0       	rjmp	.+24     	; 0x1f06 <prvResetNextTaskUnblockTime+0x26>
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	9f ef       	ldi	r25, 0xFF	; 255
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <xNextTaskUnblockTime>
    1ef8:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <xNextTaskUnblockTime+0x1>
    1efc:	a0 93 7a 12 	sts	0x127A, r26	; 0x80127a <xNextTaskUnblockTime+0x2>
    1f00:	b0 93 7b 12 	sts	0x127B, r27	; 0x80127b <xNextTaskUnblockTime+0x3>
    1f04:	08 95       	ret
    1f06:	e0 91 ae 12 	lds	r30, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    1f0a:	f0 91 af 12 	lds	r31, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    1f0e:	07 80       	ldd	r0, Z+7	; 0x07
    1f10:	f0 85       	ldd	r31, Z+8	; 0x08
    1f12:	e0 2d       	mov	r30, r0
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	a2 81       	ldd	r26, Z+2	; 0x02
    1f1a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f1c:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <xNextTaskUnblockTime>
    1f20:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <xNextTaskUnblockTime+0x1>
    1f24:	a0 93 7a 12 	sts	0x127A, r26	; 0x80127a <xNextTaskUnblockTime+0x2>
    1f28:	b0 93 7b 12 	sts	0x127B, r27	; 0x80127b <xNextTaskUnblockTime+0x3>
    1f2c:	08 95       	ret

00001f2e <prvDeleteTCB>:
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	0e 94 d5 06 	call	0xdaa	; 0xdaa <vPortFree>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <vPortFree>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <prvInitialiseNewTask>:
    1f48:	4f 92       	push	r4
    1f4a:	5f 92       	push	r5
    1f4c:	6f 92       	push	r6
    1f4e:	7f 92       	push	r7
    1f50:	8f 92       	push	r8
    1f52:	9f 92       	push	r9
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	2c 01       	movw	r4, r24
    1f68:	5b 01       	movw	r10, r22
    1f6a:	4a 01       	movw	r8, r20
    1f6c:	39 01       	movw	r6, r18
    1f6e:	e6 01       	movw	r28, r12
    1f70:	65 ea       	ldi	r22, 0xA5	; 165
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	0e 94 11 32 	call	0x6422	; 0x6422 <memset>
    1f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	82 1a       	sub	r8, r18
    1f84:	91 08       	sbc	r9, r1
    1f86:	88 0e       	add	r8, r24
    1f88:	99 1e       	adc	r9, r25
    1f8a:	a1 14       	cp	r10, r1
    1f8c:	b1 04       	cpc	r11, r1
    1f8e:	89 f4       	brne	.+34     	; 0x1fb2 <prvInitialiseNewTask+0x6a>
    1f90:	15 c0       	rjmp	.+42     	; 0x1fbc <prvInitialiseNewTask+0x74>
    1f92:	82 2f       	mov	r24, r18
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	f5 01       	movw	r30, r10
    1f98:	e8 0f       	add	r30, r24
    1f9a:	f9 1f       	adc	r31, r25
    1f9c:	30 81       	ld	r19, Z
    1f9e:	de 01       	movw	r26, r28
    1fa0:	a8 0f       	add	r26, r24
    1fa2:	b9 1f       	adc	r27, r25
    1fa4:	5d 96       	adiw	r26, 0x1d	; 29
    1fa6:	3c 93       	st	X, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	29 f0       	breq	.+10     	; 0x1fb8 <prvInitialiseNewTask+0x70>
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <prvInitialiseNewTask+0x6c>
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	20 31       	cpi	r18, 0x10	; 16
    1fb6:	68 f3       	brcs	.-38     	; 0x1f92 <prvInitialiseNewTask+0x4a>
    1fb8:	1c a6       	std	Y+44, r1	; 0x2c
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <prvInitialiseNewTask+0x76>
    1fbc:	1d 8e       	std	Y+29, r1	; 0x1d
    1fbe:	0a 30       	cpi	r16, 0x0A	; 10
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <prvInitialiseNewTask+0x7c>
    1fc2:	09 e0       	ldi	r16, 0x09	; 9
    1fc4:	0a 8f       	std	Y+26, r16	; 0x1a
    1fc6:	0d a7       	std	Y+45, r16	; 0x2d
    1fc8:	1e a6       	std	Y+46, r1	; 0x2e
    1fca:	ce 01       	movw	r24, r28
    1fcc:	02 96       	adiw	r24, 0x02	; 2
    1fce:	0e 94 23 07 	call	0xe46	; 0xe46 <vListInitialiseItem>
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0e 96       	adiw	r24, 0x0e	; 14
    1fd6:	0e 94 23 07 	call	0xe46	; 0xe46 <vListInitialiseItem>
    1fda:	db 87       	std	Y+11, r29	; 0x0b
    1fdc:	ca 87       	std	Y+10, r28	; 0x0a
    1fde:	8a e0       	ldi	r24, 0x0A	; 10
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	80 1b       	sub	r24, r16
    1fe8:	91 09       	sbc	r25, r1
    1fea:	a1 09       	sbc	r26, r1
    1fec:	b1 09       	sbc	r27, r1
    1fee:	8e 87       	std	Y+14, r24	; 0x0e
    1ff0:	9f 87       	std	Y+15, r25	; 0x0f
    1ff2:	a8 8b       	std	Y+16, r26	; 0x10
    1ff4:	b9 8b       	std	Y+17, r27	; 0x11
    1ff6:	df 8b       	std	Y+23, r29	; 0x17
    1ff8:	ce 8b       	std	Y+22, r28	; 0x16
    1ffa:	84 e0       	ldi	r24, 0x04	; 4
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	bf 96       	adiw	r30, 0x2f	; 47
    2000:	df 01       	movw	r26, r30
    2002:	1d 92       	st	X+, r1
    2004:	8a 95       	dec	r24
    2006:	e9 f7       	brne	.-6      	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    2008:	1b aa       	std	Y+51, r1	; 0x33
    200a:	a3 01       	movw	r20, r6
    200c:	b2 01       	movw	r22, r4
    200e:	c4 01       	movw	r24, r8
    2010:	0e 94 97 07 	call	0xf2e	; 0xf2e <pxPortInitialiseStack>
    2014:	99 83       	std	Y+1, r25	; 0x01
    2016:	88 83       	st	Y, r24
    2018:	e1 14       	cp	r14, r1
    201a:	f1 04       	cpc	r15, r1
    201c:	19 f0       	breq	.+6      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    201e:	f7 01       	movw	r30, r14
    2020:	d1 83       	std	Z+1, r29	; 0x01
    2022:	c0 83       	st	Z, r28
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	9f 90       	pop	r9
    2038:	8f 90       	pop	r8
    203a:	7f 90       	pop	r7
    203c:	6f 90       	pop	r6
    203e:	5f 90       	pop	r5
    2040:	4f 90       	pop	r4
    2042:	08 95       	ret

00002044 <prvInitialiseTaskLists>:
    2044:	cf 93       	push	r28
    2046:	c0 e0       	ldi	r28, 0x00	; 0
    2048:	09 c0       	rjmp	.+18     	; 0x205c <prvInitialiseTaskLists+0x18>
    204a:	2b e0       	ldi	r18, 0x0B	; 11
    204c:	c2 9f       	mul	r28, r18
    204e:	c0 01       	movw	r24, r0
    2050:	11 24       	eor	r1, r1
    2052:	8a 53       	subi	r24, 0x3A	; 58
    2054:	9d 4e       	sbci	r25, 0xED	; 237
    2056:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    205a:	cf 5f       	subi	r28, 0xFF	; 255
    205c:	ca 30       	cpi	r28, 0x0A	; 10
    205e:	a8 f3       	brcs	.-22     	; 0x204a <prvInitialiseTaskLists+0x6>
    2060:	8b eb       	ldi	r24, 0xBB	; 187
    2062:	92 e1       	ldi	r25, 0x12	; 18
    2064:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    2068:	80 eb       	ldi	r24, 0xB0	; 176
    206a:	92 e1       	ldi	r25, 0x12	; 18
    206c:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    2070:	81 ea       	ldi	r24, 0xA1	; 161
    2072:	92 e1       	ldi	r25, 0x12	; 18
    2074:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    2078:	86 e9       	ldi	r24, 0x96	; 150
    207a:	92 e1       	ldi	r25, 0x12	; 18
    207c:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    2080:	8a e8       	ldi	r24, 0x8A	; 138
    2082:	92 e1       	ldi	r25, 0x12	; 18
    2084:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    2088:	8b eb       	ldi	r24, 0xBB	; 187
    208a:	92 e1       	ldi	r25, 0x12	; 18
    208c:	90 93 af 12 	sts	0x12AF, r25	; 0x8012af <pxDelayedTaskList+0x1>
    2090:	80 93 ae 12 	sts	0x12AE, r24	; 0x8012ae <pxDelayedTaskList>
    2094:	80 eb       	ldi	r24, 0xB0	; 176
    2096:	92 e1       	ldi	r25, 0x12	; 18
    2098:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <pxOverflowDelayedTaskList+0x1>
    209c:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <pxOverflowDelayedTaskList>
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <prvAddNewTaskToReadyList>:
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	ec 01       	movw	r28, r24
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	0f 92       	push	r0
    20b0:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <uxCurrentNumberOfTasks>
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	80 93 89 12 	sts	0x1289, r24	; 0x801289 <uxCurrentNumberOfTasks>
    20ba:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    20be:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    20c2:	89 2b       	or	r24, r25
    20c4:	51 f4       	brne	.+20     	; 0x20da <prvAddNewTaskToReadyList+0x36>
    20c6:	d0 93 35 13 	sts	0x1335, r29	; 0x801335 <pxCurrentTCB+0x1>
    20ca:	c0 93 34 13 	sts	0x1334, r28	; 0x801334 <pxCurrentTCB>
    20ce:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <uxCurrentNumberOfTasks>
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 f4       	brne	.+36     	; 0x20fa <prvAddNewTaskToReadyList+0x56>
    20d6:	b6 df       	rcall	.-148    	; 0x2044 <prvInitialiseTaskLists>
    20d8:	10 c0       	rjmp	.+32     	; 0x20fa <prvAddNewTaskToReadyList+0x56>
    20da:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <xSchedulerRunning>
    20de:	81 11       	cpse	r24, r1
    20e0:	0c c0       	rjmp	.+24     	; 0x20fa <prvAddNewTaskToReadyList+0x56>
    20e2:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    20e6:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    20ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    20ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ee:	89 17       	cp	r24, r25
    20f0:	20 f0       	brcs	.+8      	; 0x20fa <prvAddNewTaskToReadyList+0x56>
    20f2:	d0 93 35 13 	sts	0x1335, r29	; 0x801335 <pxCurrentTCB+0x1>
    20f6:	c0 93 34 13 	sts	0x1334, r28	; 0x801334 <pxCurrentTCB>
    20fa:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <uxTaskNumber>
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	80 93 7c 12 	sts	0x127C, r24	; 0x80127c <uxTaskNumber>
    2104:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2106:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    210a:	8e 17       	cp	r24, r30
    210c:	10 f4       	brcc	.+4      	; 0x2112 <prvAddNewTaskToReadyList+0x6e>
    210e:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    2112:	8b e0       	ldi	r24, 0x0B	; 11
    2114:	8e 9f       	mul	r24, r30
    2116:	f0 01       	movw	r30, r0
    2118:	11 24       	eor	r1, r1
    211a:	ea 53       	subi	r30, 0x3A	; 58
    211c:	fd 4e       	sbci	r31, 0xED	; 237
    211e:	01 80       	ldd	r0, Z+1	; 0x01
    2120:	f2 81       	ldd	r31, Z+2	; 0x02
    2122:	e0 2d       	mov	r30, r0
    2124:	ff 83       	std	Y+7, r31	; 0x07
    2126:	ee 83       	std	Y+6, r30	; 0x06
    2128:	26 81       	ldd	r18, Z+6	; 0x06
    212a:	37 81       	ldd	r19, Z+7	; 0x07
    212c:	39 87       	std	Y+9, r19	; 0x09
    212e:	28 87       	std	Y+8, r18	; 0x08
    2130:	a6 81       	ldd	r26, Z+6	; 0x06
    2132:	b7 81       	ldd	r27, Z+7	; 0x07
    2134:	9e 01       	movw	r18, r28
    2136:	2e 5f       	subi	r18, 0xFE	; 254
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	15 96       	adiw	r26, 0x05	; 5
    213c:	3c 93       	st	X, r19
    213e:	2e 93       	st	-X, r18
    2140:	14 97       	sbiw	r26, 0x04	; 4
    2142:	37 83       	std	Z+7, r19	; 0x07
    2144:	26 83       	std	Z+6, r18	; 0x06
    2146:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2148:	8e 9f       	mul	r24, r30
    214a:	f0 01       	movw	r30, r0
    214c:	11 24       	eor	r1, r1
    214e:	ea 53       	subi	r30, 0x3A	; 58
    2150:	fd 4e       	sbci	r31, 0xED	; 237
    2152:	fd 87       	std	Y+13, r31	; 0x0d
    2154:	ec 87       	std	Y+12, r30	; 0x0c
    2156:	80 81       	ld	r24, Z
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	80 83       	st	Z, r24
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <xSchedulerRunning>
    2164:	88 23       	and	r24, r24
    2166:	51 f0       	breq	.+20     	; 0x217c <prvAddNewTaskToReadyList+0xd8>
    2168:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    216c:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2170:	92 8d       	ldd	r25, Z+26	; 0x1a
    2172:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2174:	98 17       	cp	r25, r24
    2176:	10 f4       	brcc	.+4      	; 0x217c <prvAddNewTaskToReadyList+0xd8>
    2178:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <prvCheckTasksWaitingTermination>:
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	1b c0       	rjmp	.+54     	; 0x21be <prvCheckTasksWaitingTermination+0x3c>
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	0f 92       	push	r0
    218e:	e0 91 9d 12 	lds	r30, 0x129D	; 0x80129d <xTasksWaitingTermination+0x7>
    2192:	f0 91 9e 12 	lds	r31, 0x129E	; 0x80129e <xTasksWaitingTermination+0x8>
    2196:	c0 85       	ldd	r28, Z+8	; 0x08
    2198:	d1 85       	ldd	r29, Z+9	; 0x09
    219a:	ce 01       	movw	r24, r28
    219c:	02 96       	adiw	r24, 0x02	; 2
    219e:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
    21a2:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <uxCurrentNumberOfTasks>
    21a6:	81 50       	subi	r24, 0x01	; 1
    21a8:	80 93 89 12 	sts	0x1289, r24	; 0x801289 <uxCurrentNumberOfTasks>
    21ac:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <uxDeletedTasksWaitingCleanUp>
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <uxDeletedTasksWaitingCleanUp>
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	ce 01       	movw	r24, r28
    21bc:	b8 de       	rcall	.-656    	; 0x1f2e <prvDeleteTCB>
    21be:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <uxDeletedTasksWaitingCleanUp>
    21c2:	81 11       	cpse	r24, r1
    21c4:	e1 cf       	rjmp	.-62     	; 0x2188 <prvCheckTasksWaitingTermination+0x6>
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <prvAddCurrentTaskToDelayedList>:
    21cc:	8f 92       	push	r8
    21ce:	9f 92       	push	r9
    21d0:	af 92       	push	r10
    21d2:	bf 92       	push	r11
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	6b 01       	movw	r12, r22
    21e2:	7c 01       	movw	r14, r24
    21e4:	c4 2f       	mov	r28, r20
    21e6:	80 90 85 12 	lds	r8, 0x1285	; 0x801285 <xTickCount>
    21ea:	90 90 86 12 	lds	r9, 0x1286	; 0x801286 <xTickCount+0x1>
    21ee:	a0 90 87 12 	lds	r10, 0x1287	; 0x801287 <xTickCount+0x2>
    21f2:	b0 90 88 12 	lds	r11, 0x1288	; 0x801288 <xTickCount+0x3>
    21f6:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    21fa:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    21fe:	02 96       	adiw	r24, 0x02	; 2
    2200:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
    2204:	8f ef       	ldi	r24, 0xFF	; 255
    2206:	c8 16       	cp	r12, r24
    2208:	d8 06       	cpc	r13, r24
    220a:	e8 06       	cpc	r14, r24
    220c:	f8 06       	cpc	r15, r24
    220e:	b1 f5       	brne	.+108    	; 0x227c <__stack+0x7d>
    2210:	cc 23       	and	r28, r28
    2212:	a1 f1       	breq	.+104    	; 0x227c <__stack+0x7d>
    2214:	ea e8       	ldi	r30, 0x8A	; 138
    2216:	f2 e1       	ldi	r31, 0x12	; 18
    2218:	a1 81       	ldd	r26, Z+1	; 0x01
    221a:	b2 81       	ldd	r27, Z+2	; 0x02
    221c:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    2220:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2224:	bf 83       	std	Y+7, r27	; 0x07
    2226:	ae 83       	std	Y+6, r26	; 0x06
    2228:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    222c:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2230:	16 96       	adiw	r26, 0x06	; 6
    2232:	8d 91       	ld	r24, X+
    2234:	9c 91       	ld	r25, X
    2236:	17 97       	sbiw	r26, 0x07	; 7
    2238:	99 87       	std	Y+9, r25	; 0x09
    223a:	88 87       	std	Y+8, r24	; 0x08
    223c:	16 96       	adiw	r26, 0x06	; 6
    223e:	cd 91       	ld	r28, X+
    2240:	dc 91       	ld	r29, X
    2242:	17 97       	sbiw	r26, 0x07	; 7
    2244:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2248:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    224c:	02 96       	adiw	r24, 0x02	; 2
    224e:	9d 83       	std	Y+5, r25	; 0x05
    2250:	8c 83       	std	Y+4, r24	; 0x04
    2252:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2256:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    225a:	02 96       	adiw	r24, 0x02	; 2
    225c:	17 96       	adiw	r26, 0x07	; 7
    225e:	9c 93       	st	X, r25
    2260:	8e 93       	st	-X, r24
    2262:	16 97       	sbiw	r26, 0x06	; 6
    2264:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2268:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    226c:	1d 96       	adiw	r26, 0x0d	; 13
    226e:	fc 93       	st	X, r31
    2270:	ee 93       	st	-X, r30
    2272:	1c 97       	sbiw	r26, 0x0c	; 12
    2274:	80 81       	ld	r24, Z
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	80 83       	st	Z, r24
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <__stack+0xfb>
    227c:	c8 0c       	add	r12, r8
    227e:	d9 1c       	adc	r13, r9
    2280:	ea 1c       	adc	r14, r10
    2282:	fb 1c       	adc	r15, r11
    2284:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2288:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    228c:	c2 82       	std	Z+2, r12	; 0x02
    228e:	d3 82       	std	Z+3, r13	; 0x03
    2290:	e4 82       	std	Z+4, r14	; 0x04
    2292:	f5 82       	std	Z+5, r15	; 0x05
    2294:	c8 14       	cp	r12, r8
    2296:	d9 04       	cpc	r13, r9
    2298:	ea 04       	cpc	r14, r10
    229a:	fb 04       	cpc	r15, r11
    229c:	68 f4       	brcc	.+26     	; 0x22b8 <__stack+0xb9>
    229e:	60 91 34 13 	lds	r22, 0x1334	; 0x801334 <pxCurrentTCB>
    22a2:	70 91 35 13 	lds	r23, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    22a6:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <pxOverflowDelayedTaskList>
    22aa:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <pxOverflowDelayedTaskList+0x1>
    22ae:	6e 5f       	subi	r22, 0xFE	; 254
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    22b6:	21 c0       	rjmp	.+66     	; 0x22fa <__stack+0xfb>
    22b8:	60 91 34 13 	lds	r22, 0x1334	; 0x801334 <pxCurrentTCB>
    22bc:	70 91 35 13 	lds	r23, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    22c0:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    22c4:	90 91 af 12 	lds	r25, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    22c8:	6e 5f       	subi	r22, 0xFE	; 254
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    22d0:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <xNextTaskUnblockTime>
    22d4:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <xNextTaskUnblockTime+0x1>
    22d8:	a0 91 7a 12 	lds	r26, 0x127A	; 0x80127a <xNextTaskUnblockTime+0x2>
    22dc:	b0 91 7b 12 	lds	r27, 0x127B	; 0x80127b <xNextTaskUnblockTime+0x3>
    22e0:	c8 16       	cp	r12, r24
    22e2:	d9 06       	cpc	r13, r25
    22e4:	ea 06       	cpc	r14, r26
    22e6:	fb 06       	cpc	r15, r27
    22e8:	40 f4       	brcc	.+16     	; 0x22fa <__stack+0xfb>
    22ea:	c0 92 78 12 	sts	0x1278, r12	; 0x801278 <xNextTaskUnblockTime>
    22ee:	d0 92 79 12 	sts	0x1279, r13	; 0x801279 <xNextTaskUnblockTime+0x1>
    22f2:	e0 92 7a 12 	sts	0x127A, r14	; 0x80127a <xNextTaskUnblockTime+0x2>
    22f6:	f0 92 7b 12 	sts	0x127B, r15	; 0x80127b <xNextTaskUnblockTime+0x3>
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	ff 90       	pop	r15
    2300:	ef 90       	pop	r14
    2302:	df 90       	pop	r13
    2304:	cf 90       	pop	r12
    2306:	bf 90       	pop	r11
    2308:	af 90       	pop	r10
    230a:	9f 90       	pop	r9
    230c:	8f 90       	pop	r8
    230e:	08 95       	ret

00002310 <xTaskCreate>:
    2310:	2f 92       	push	r2
    2312:	3f 92       	push	r3
    2314:	4f 92       	push	r4
    2316:	5f 92       	push	r5
    2318:	6f 92       	push	r6
    231a:	7f 92       	push	r7
    231c:	8f 92       	push	r8
    231e:	9f 92       	push	r9
    2320:	af 92       	push	r10
    2322:	bf 92       	push	r11
    2324:	cf 92       	push	r12
    2326:	df 92       	push	r13
    2328:	ef 92       	push	r14
    232a:	ff 92       	push	r15
    232c:	0f 93       	push	r16
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	3c 01       	movw	r6, r24
    2334:	1b 01       	movw	r2, r22
    2336:	4a 01       	movw	r8, r20
    2338:	29 01       	movw	r4, r18
    233a:	ca 01       	movw	r24, r20
    233c:	0e 94 2c 06 	call	0xc58	; 0xc58 <pvPortMalloc>
    2340:	6c 01       	movw	r12, r24
    2342:	89 2b       	or	r24, r25
    2344:	71 f0       	breq	.+28     	; 0x2362 <xTaskCreate+0x52>
    2346:	84 e3       	ldi	r24, 0x34	; 52
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 2c 06 	call	0xc58	; 0xc58 <pvPortMalloc>
    234e:	ec 01       	movw	r28, r24
    2350:	89 2b       	or	r24, r25
    2352:	19 f0       	breq	.+6      	; 0x235a <xTaskCreate+0x4a>
    2354:	dc 8e       	std	Y+28, r13	; 0x1c
    2356:	cb 8e       	std	Y+27, r12	; 0x1b
    2358:	06 c0       	rjmp	.+12     	; 0x2366 <xTaskCreate+0x56>
    235a:	c6 01       	movw	r24, r12
    235c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <vPortFree>
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <xTaskCreate+0x56>
    2362:	c0 e0       	ldi	r28, 0x00	; 0
    2364:	d0 e0       	ldi	r29, 0x00	; 0
    2366:	20 97       	sbiw	r28, 0x00	; 0
    2368:	61 f0       	breq	.+24     	; 0x2382 <xTaskCreate+0x72>
    236a:	a1 2c       	mov	r10, r1
    236c:	b1 2c       	mov	r11, r1
    236e:	6e 01       	movw	r12, r28
    2370:	92 01       	movw	r18, r4
    2372:	a4 01       	movw	r20, r8
    2374:	b1 01       	movw	r22, r2
    2376:	c3 01       	movw	r24, r6
    2378:	e7 dd       	rcall	.-1074   	; 0x1f48 <prvInitialiseNewTask>
    237a:	ce 01       	movw	r24, r28
    237c:	93 de       	rcall	.-730    	; 0x20a4 <prvAddNewTaskToReadyList>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <xTaskCreate+0x74>
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	df 90       	pop	r13
    2390:	cf 90       	pop	r12
    2392:	bf 90       	pop	r11
    2394:	af 90       	pop	r10
    2396:	9f 90       	pop	r9
    2398:	8f 90       	pop	r8
    239a:	7f 90       	pop	r7
    239c:	6f 90       	pop	r6
    239e:	5f 90       	pop	r5
    23a0:	4f 90       	pop	r4
    23a2:	3f 90       	pop	r3
    23a4:	2f 90       	pop	r2
    23a6:	08 95       	ret

000023a8 <vTaskStartScheduler>:
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	0f 2e       	mov	r0, r31
    23b0:	f6 e7       	ldi	r31, 0x76	; 118
    23b2:	ef 2e       	mov	r14, r31
    23b4:	f2 e1       	ldi	r31, 0x12	; 18
    23b6:	ff 2e       	mov	r15, r31
    23b8:	f0 2d       	mov	r31, r0
    23ba:	00 e0       	ldi	r16, 0x00	; 0
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 ec       	ldi	r20, 0xC0	; 192
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	6a e2       	ldi	r22, 0x2A	; 42
    23c6:	73 e0       	ldi	r23, 0x03	; 3
    23c8:	8e e4       	ldi	r24, 0x4E	; 78
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	a1 df       	rcall	.-190    	; 0x2310 <xTaskCreate>
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	11 f4       	brne	.+4      	; 0x23d6 <vTaskStartScheduler+0x2e>
    23d2:	0e 94 87 1c 	call	0x390e	; 0x390e <xTimerCreateTimerTask>
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	c9 f4       	brne	.+50     	; 0x240c <vTaskStartScheduler+0x64>
    23da:	f8 94       	cli
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	9f ef       	ldi	r25, 0xFF	; 255
    23e0:	dc 01       	movw	r26, r24
    23e2:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <xNextTaskUnblockTime>
    23e6:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <xNextTaskUnblockTime+0x1>
    23ea:	a0 93 7a 12 	sts	0x127A, r26	; 0x80127a <xNextTaskUnblockTime+0x2>
    23ee:	b0 93 7b 12 	sts	0x127B, r27	; 0x80127b <xNextTaskUnblockTime+0x3>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	80 93 83 12 	sts	0x1283, r24	; 0x801283 <xSchedulerRunning>
    23f8:	10 92 85 12 	sts	0x1285, r1	; 0x801285 <xTickCount>
    23fc:	10 92 86 12 	sts	0x1286, r1	; 0x801286 <xTickCount+0x1>
    2400:	10 92 87 12 	sts	0x1287, r1	; 0x801287 <xTickCount+0x2>
    2404:	10 92 88 12 	sts	0x1288, r1	; 0x801288 <xTickCount+0x3>
    2408:	0e 94 ae 07 	call	0xf5c	; 0xf5c <xPortStartScheduler>
    240c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	08 95       	ret

00002418 <vTaskSuspendAll>:
    2418:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	80 93 75 12 	sts	0x1275, r24	; 0x801275 <uxSchedulerSuspended>
    2422:	08 95       	ret

00002424 <xTaskGetTickCount>:
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	0f 92       	push	r0
    242a:	60 91 85 12 	lds	r22, 0x1285	; 0x801285 <xTickCount>
    242e:	70 91 86 12 	lds	r23, 0x1286	; 0x801286 <xTickCount+0x1>
    2432:	80 91 87 12 	lds	r24, 0x1287	; 0x801287 <xTickCount+0x2>
    2436:	90 91 88 12 	lds	r25, 0x1288	; 0x801288 <xTickCount+0x3>
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	08 95       	ret

00002440 <xTaskIncrementTick>:
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    2450:	81 11       	cpse	r24, r1
    2452:	05 c1       	rjmp	.+522    	; 0x265e <xTaskIncrementTick+0x21e>
    2454:	c0 90 85 12 	lds	r12, 0x1285	; 0x801285 <xTickCount>
    2458:	d0 90 86 12 	lds	r13, 0x1286	; 0x801286 <xTickCount+0x1>
    245c:	e0 90 87 12 	lds	r14, 0x1287	; 0x801287 <xTickCount+0x2>
    2460:	f0 90 88 12 	lds	r15, 0x1288	; 0x801288 <xTickCount+0x3>
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	c8 1a       	sub	r12, r24
    2468:	d8 0a       	sbc	r13, r24
    246a:	e8 0a       	sbc	r14, r24
    246c:	f8 0a       	sbc	r15, r24
    246e:	c0 92 85 12 	sts	0x1285, r12	; 0x801285 <xTickCount>
    2472:	d0 92 86 12 	sts	0x1286, r13	; 0x801286 <xTickCount+0x1>
    2476:	e0 92 87 12 	sts	0x1287, r14	; 0x801287 <xTickCount+0x2>
    247a:	f0 92 88 12 	sts	0x1288, r15	; 0x801288 <xTickCount+0x3>
    247e:	c1 14       	cp	r12, r1
    2480:	d1 04       	cpc	r13, r1
    2482:	e1 04       	cpc	r14, r1
    2484:	f1 04       	cpc	r15, r1
    2486:	b1 f4       	brne	.+44     	; 0x24b4 <xTaskIncrementTick+0x74>
    2488:	80 91 ae 12 	lds	r24, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    248c:	90 91 af 12 	lds	r25, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    2490:	20 91 ac 12 	lds	r18, 0x12AC	; 0x8012ac <pxOverflowDelayedTaskList>
    2494:	30 91 ad 12 	lds	r19, 0x12AD	; 0x8012ad <pxOverflowDelayedTaskList+0x1>
    2498:	30 93 af 12 	sts	0x12AF, r19	; 0x8012af <pxDelayedTaskList+0x1>
    249c:	20 93 ae 12 	sts	0x12AE, r18	; 0x8012ae <pxDelayedTaskList>
    24a0:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <pxOverflowDelayedTaskList+0x1>
    24a4:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <pxOverflowDelayedTaskList>
    24a8:	80 91 7d 12 	lds	r24, 0x127D	; 0x80127d <xNumOfOverflows>
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <xNumOfOverflows>
    24b2:	16 dd       	rcall	.-1492   	; 0x1ee0 <prvResetNextTaskUnblockTime>
    24b4:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <xNextTaskUnblockTime>
    24b8:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <xNextTaskUnblockTime+0x1>
    24bc:	a0 91 7a 12 	lds	r26, 0x127A	; 0x80127a <xNextTaskUnblockTime+0x2>
    24c0:	b0 91 7b 12 	lds	r27, 0x127B	; 0x80127b <xNextTaskUnblockTime+0x3>
    24c4:	c8 16       	cp	r12, r24
    24c6:	d9 06       	cpc	r13, r25
    24c8:	ea 06       	cpc	r14, r26
    24ca:	fb 06       	cpc	r15, r27
    24cc:	20 f4       	brcc	.+8      	; 0x24d6 <xTaskIncrementTick+0x96>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	b2 c0       	rjmp	.+356    	; 0x2636 <xTaskIncrementTick+0x1f6>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <xTaskIncrementTick+0x98>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	e0 91 ae 12 	lds	r30, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    24dc:	f0 91 af 12 	lds	r31, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    24e0:	90 81       	ld	r25, Z
    24e2:	91 11       	cpse	r25, r1
    24e4:	0c c0       	rjmp	.+24     	; 0x24fe <xTaskIncrementTick+0xbe>
    24e6:	4f ef       	ldi	r20, 0xFF	; 255
    24e8:	5f ef       	ldi	r21, 0xFF	; 255
    24ea:	ba 01       	movw	r22, r20
    24ec:	40 93 78 12 	sts	0x1278, r20	; 0x801278 <xNextTaskUnblockTime>
    24f0:	50 93 79 12 	sts	0x1279, r21	; 0x801279 <xNextTaskUnblockTime+0x1>
    24f4:	60 93 7a 12 	sts	0x127A, r22	; 0x80127a <xNextTaskUnblockTime+0x2>
    24f8:	70 93 7b 12 	sts	0x127B, r23	; 0x80127b <xNextTaskUnblockTime+0x3>
    24fc:	9c c0       	rjmp	.+312    	; 0x2636 <xTaskIncrementTick+0x1f6>
    24fe:	e0 91 ae 12 	lds	r30, 0x12AE	; 0x8012ae <pxDelayedTaskList>
    2502:	f0 91 af 12 	lds	r31, 0x12AF	; 0x8012af <pxDelayedTaskList+0x1>
    2506:	07 80       	ldd	r0, Z+7	; 0x07
    2508:	f0 85       	ldd	r31, Z+8	; 0x08
    250a:	e0 2d       	mov	r30, r0
    250c:	00 84       	ldd	r0, Z+8	; 0x08
    250e:	f1 85       	ldd	r31, Z+9	; 0x09
    2510:	e0 2d       	mov	r30, r0
    2512:	42 81       	ldd	r20, Z+2	; 0x02
    2514:	53 81       	ldd	r21, Z+3	; 0x03
    2516:	64 81       	ldd	r22, Z+4	; 0x04
    2518:	75 81       	ldd	r23, Z+5	; 0x05
    251a:	c4 16       	cp	r12, r20
    251c:	d5 06       	cpc	r13, r21
    251e:	e6 06       	cpc	r14, r22
    2520:	f7 06       	cpc	r15, r23
    2522:	48 f4       	brcc	.+18     	; 0x2536 <xTaskIncrementTick+0xf6>
    2524:	40 93 78 12 	sts	0x1278, r20	; 0x801278 <xNextTaskUnblockTime>
    2528:	50 93 79 12 	sts	0x1279, r21	; 0x801279 <xNextTaskUnblockTime+0x1>
    252c:	60 93 7a 12 	sts	0x127A, r22	; 0x80127a <xNextTaskUnblockTime+0x2>
    2530:	70 93 7b 12 	sts	0x127B, r23	; 0x80127b <xNextTaskUnblockTime+0x3>
    2534:	80 c0       	rjmp	.+256    	; 0x2636 <xTaskIncrementTick+0x1f6>
    2536:	a4 85       	ldd	r26, Z+12	; 0x0c
    2538:	b5 85       	ldd	r27, Z+13	; 0x0d
    253a:	c6 81       	ldd	r28, Z+6	; 0x06
    253c:	d7 81       	ldd	r29, Z+7	; 0x07
    253e:	20 85       	ldd	r18, Z+8	; 0x08
    2540:	31 85       	ldd	r19, Z+9	; 0x09
    2542:	3f 83       	std	Y+7, r19	; 0x07
    2544:	2e 83       	std	Y+6, r18	; 0x06
    2546:	c0 85       	ldd	r28, Z+8	; 0x08
    2548:	d1 85       	ldd	r29, Z+9	; 0x09
    254a:	26 81       	ldd	r18, Z+6	; 0x06
    254c:	37 81       	ldd	r19, Z+7	; 0x07
    254e:	3d 83       	std	Y+5, r19	; 0x05
    2550:	2c 83       	std	Y+4, r18	; 0x04
    2552:	11 96       	adiw	r26, 0x01	; 1
    2554:	4d 91       	ld	r20, X+
    2556:	5c 91       	ld	r21, X
    2558:	12 97       	sbiw	r26, 0x02	; 2
    255a:	9f 01       	movw	r18, r30
    255c:	2e 5f       	subi	r18, 0xFE	; 254
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	42 17       	cp	r20, r18
    2562:	53 07       	cpc	r21, r19
    2564:	31 f4       	brne	.+12     	; 0x2572 <xTaskIncrementTick+0x132>
    2566:	40 85       	ldd	r20, Z+8	; 0x08
    2568:	51 85       	ldd	r21, Z+9	; 0x09
    256a:	12 96       	adiw	r26, 0x02	; 2
    256c:	5c 93       	st	X, r21
    256e:	4e 93       	st	-X, r20
    2570:	11 97       	sbiw	r26, 0x01	; 1
    2572:	15 86       	std	Z+13, r1	; 0x0d
    2574:	14 86       	std	Z+12, r1	; 0x0c
    2576:	9c 91       	ld	r25, X
    2578:	91 50       	subi	r25, 0x01	; 1
    257a:	9c 93       	st	X, r25
    257c:	a0 8d       	ldd	r26, Z+24	; 0x18
    257e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2580:	10 97       	sbiw	r26, 0x00	; 0
    2582:	09 f1       	breq	.+66     	; 0x25c6 <xTaskIncrementTick+0x186>
    2584:	c2 89       	ldd	r28, Z+18	; 0x12
    2586:	d3 89       	ldd	r29, Z+19	; 0x13
    2588:	44 89       	ldd	r20, Z+20	; 0x14
    258a:	55 89       	ldd	r21, Z+21	; 0x15
    258c:	5f 83       	std	Y+7, r21	; 0x07
    258e:	4e 83       	std	Y+6, r20	; 0x06
    2590:	c4 89       	ldd	r28, Z+20	; 0x14
    2592:	d5 89       	ldd	r29, Z+21	; 0x15
    2594:	42 89       	ldd	r20, Z+18	; 0x12
    2596:	53 89       	ldd	r21, Z+19	; 0x13
    2598:	5d 83       	std	Y+5, r21	; 0x05
    259a:	4c 83       	std	Y+4, r20	; 0x04
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	6d 91       	ld	r22, X+
    25a0:	7c 91       	ld	r23, X
    25a2:	12 97       	sbiw	r26, 0x02	; 2
    25a4:	af 01       	movw	r20, r30
    25a6:	42 5f       	subi	r20, 0xF2	; 242
    25a8:	5f 4f       	sbci	r21, 0xFF	; 255
    25aa:	64 17       	cp	r22, r20
    25ac:	75 07       	cpc	r23, r21
    25ae:	31 f4       	brne	.+12     	; 0x25bc <xTaskIncrementTick+0x17c>
    25b0:	44 89       	ldd	r20, Z+20	; 0x14
    25b2:	55 89       	ldd	r21, Z+21	; 0x15
    25b4:	12 96       	adiw	r26, 0x02	; 2
    25b6:	5c 93       	st	X, r21
    25b8:	4e 93       	st	-X, r20
    25ba:	11 97       	sbiw	r26, 0x01	; 1
    25bc:	11 8e       	std	Z+25, r1	; 0x19
    25be:	10 8e       	std	Z+24, r1	; 0x18
    25c0:	9c 91       	ld	r25, X
    25c2:	91 50       	subi	r25, 0x01	; 1
    25c4:	9c 93       	st	X, r25
    25c6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25c8:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <uxTopReadyPriority>
    25cc:	9a 17       	cp	r25, r26
    25ce:	10 f4       	brcc	.+4      	; 0x25d4 <xTaskIncrementTick+0x194>
    25d0:	a0 93 84 12 	sts	0x1284, r26	; 0x801284 <uxTopReadyPriority>
    25d4:	9b e0       	ldi	r25, 0x0B	; 11
    25d6:	9a 9f       	mul	r25, r26
    25d8:	d0 01       	movw	r26, r0
    25da:	11 24       	eor	r1, r1
    25dc:	aa 53       	subi	r26, 0x3A	; 58
    25de:	bd 4e       	sbci	r27, 0xED	; 237
    25e0:	11 96       	adiw	r26, 0x01	; 1
    25e2:	0d 90       	ld	r0, X+
    25e4:	bc 91       	ld	r27, X
    25e6:	a0 2d       	mov	r26, r0
    25e8:	b7 83       	std	Z+7, r27	; 0x07
    25ea:	a6 83       	std	Z+6, r26	; 0x06
    25ec:	16 96       	adiw	r26, 0x06	; 6
    25ee:	4d 91       	ld	r20, X+
    25f0:	5c 91       	ld	r21, X
    25f2:	17 97       	sbiw	r26, 0x07	; 7
    25f4:	51 87       	std	Z+9, r21	; 0x09
    25f6:	40 87       	std	Z+8, r20	; 0x08
    25f8:	16 96       	adiw	r26, 0x06	; 6
    25fa:	cd 91       	ld	r28, X+
    25fc:	dc 91       	ld	r29, X
    25fe:	17 97       	sbiw	r26, 0x07	; 7
    2600:	3d 83       	std	Y+5, r19	; 0x05
    2602:	2c 83       	std	Y+4, r18	; 0x04
    2604:	17 96       	adiw	r26, 0x07	; 7
    2606:	3c 93       	st	X, r19
    2608:	2e 93       	st	-X, r18
    260a:	16 97       	sbiw	r26, 0x06	; 6
    260c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    260e:	9a 9f       	mul	r25, r26
    2610:	d0 01       	movw	r26, r0
    2612:	11 24       	eor	r1, r1
    2614:	aa 53       	subi	r26, 0x3A	; 58
    2616:	bd 4e       	sbci	r27, 0xED	; 237
    2618:	b5 87       	std	Z+13, r27	; 0x0d
    261a:	a4 87       	std	Z+12, r26	; 0x0c
    261c:	9c 91       	ld	r25, X
    261e:	9f 5f       	subi	r25, 0xFF	; 255
    2620:	9c 93       	st	X, r25
    2622:	22 8d       	ldd	r18, Z+26	; 0x1a
    2624:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2628:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    262c:	92 8d       	ldd	r25, Z+26	; 0x1a
    262e:	29 17       	cp	r18, r25
    2630:	08 f0       	brcs	.+2      	; 0x2634 <xTaskIncrementTick+0x1f4>
    2632:	4f cf       	rjmp	.-354    	; 0x24d2 <xTaskIncrementTick+0x92>
    2634:	51 cf       	rjmp	.-350    	; 0x24d8 <xTaskIncrementTick+0x98>
    2636:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    263a:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    263e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2640:	9b e0       	ldi	r25, 0x0B	; 11
    2642:	e9 9f       	mul	r30, r25
    2644:	f0 01       	movw	r30, r0
    2646:	11 24       	eor	r1, r1
    2648:	ea 53       	subi	r30, 0x3A	; 58
    264a:	fd 4e       	sbci	r31, 0xED	; 237
    264c:	90 81       	ld	r25, Z
    264e:	92 30       	cpi	r25, 0x02	; 2
    2650:	08 f0       	brcs	.+2      	; 0x2654 <xTaskIncrementTick+0x214>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 91 7e 12 	lds	r25, 0x127E	; 0x80127e <xYieldPending>
    2658:	91 11       	cpse	r25, r1
    265a:	16 c0       	rjmp	.+44     	; 0x2688 <xTaskIncrementTick+0x248>
    265c:	16 c0       	rjmp	.+44     	; 0x268a <xTaskIncrementTick+0x24a>
    265e:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <xPendedTicks>
    2662:	90 91 80 12 	lds	r25, 0x1280	; 0x801280 <xPendedTicks+0x1>
    2666:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <xPendedTicks+0x2>
    266a:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <xPendedTicks+0x3>
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	a1 1d       	adc	r26, r1
    2672:	b1 1d       	adc	r27, r1
    2674:	80 93 7f 12 	sts	0x127F, r24	; 0x80127f <xPendedTicks>
    2678:	90 93 80 12 	sts	0x1280, r25	; 0x801280 <xPendedTicks+0x1>
    267c:	a0 93 81 12 	sts	0x1281, r26	; 0x801281 <xPendedTicks+0x2>
    2680:	b0 93 82 12 	sts	0x1282, r27	; 0x801282 <xPendedTicks+0x3>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	01 c0       	rjmp	.+2      	; 0x268a <xTaskIncrementTick+0x24a>
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	08 95       	ret

00002698 <xTaskResumeAll>:
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	0f 92       	push	r0
    26aa:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    26ae:	81 50       	subi	r24, 0x01	; 1
    26b0:	80 93 75 12 	sts	0x1275, r24	; 0x801275 <uxSchedulerSuspended>
    26b4:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    26b8:	81 11       	cpse	r24, r1
    26ba:	be c0       	rjmp	.+380    	; 0x2838 <xTaskResumeAll+0x1a0>
    26bc:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <uxCurrentNumberOfTasks>
    26c0:	81 11       	cpse	r24, r1
    26c2:	88 c0       	rjmp	.+272    	; 0x27d4 <xTaskResumeAll+0x13c>
    26c4:	bc c0       	rjmp	.+376    	; 0x283e <xTaskResumeAll+0x1a6>
    26c6:	e0 91 a8 12 	lds	r30, 0x12A8	; 0x8012a8 <xPendingReadyList+0x7>
    26ca:	f0 91 a9 12 	lds	r31, 0x12A9	; 0x8012a9 <xPendingReadyList+0x8>
    26ce:	00 84       	ldd	r0, Z+8	; 0x08
    26d0:	f1 85       	ldd	r31, Z+9	; 0x09
    26d2:	e0 2d       	mov	r30, r0
    26d4:	a0 8d       	ldd	r26, Z+24	; 0x18
    26d6:	b1 8d       	ldd	r27, Z+25	; 0x19
    26d8:	c2 89       	ldd	r28, Z+18	; 0x12
    26da:	d3 89       	ldd	r29, Z+19	; 0x13
    26dc:	84 89       	ldd	r24, Z+20	; 0x14
    26de:	95 89       	ldd	r25, Z+21	; 0x15
    26e0:	9f 83       	std	Y+7, r25	; 0x07
    26e2:	8e 83       	std	Y+6, r24	; 0x06
    26e4:	c4 89       	ldd	r28, Z+20	; 0x14
    26e6:	d5 89       	ldd	r29, Z+21	; 0x15
    26e8:	82 89       	ldd	r24, Z+18	; 0x12
    26ea:	93 89       	ldd	r25, Z+19	; 0x13
    26ec:	9d 83       	std	Y+5, r25	; 0x05
    26ee:	8c 83       	std	Y+4, r24	; 0x04
    26f0:	11 96       	adiw	r26, 0x01	; 1
    26f2:	2d 91       	ld	r18, X+
    26f4:	3c 91       	ld	r19, X
    26f6:	12 97       	sbiw	r26, 0x02	; 2
    26f8:	cf 01       	movw	r24, r30
    26fa:	0e 96       	adiw	r24, 0x0e	; 14
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	31 f4       	brne	.+12     	; 0x270e <xTaskResumeAll+0x76>
    2702:	84 89       	ldd	r24, Z+20	; 0x14
    2704:	95 89       	ldd	r25, Z+21	; 0x15
    2706:	12 96       	adiw	r26, 0x02	; 2
    2708:	9c 93       	st	X, r25
    270a:	8e 93       	st	-X, r24
    270c:	11 97       	sbiw	r26, 0x01	; 1
    270e:	11 8e       	std	Z+25, r1	; 0x19
    2710:	10 8e       	std	Z+24, r1	; 0x18
    2712:	8c 91       	ld	r24, X
    2714:	81 50       	subi	r24, 0x01	; 1
    2716:	8c 93       	st	X, r24
    2718:	a4 85       	ldd	r26, Z+12	; 0x0c
    271a:	b5 85       	ldd	r27, Z+13	; 0x0d
    271c:	c6 81       	ldd	r28, Z+6	; 0x06
    271e:	d7 81       	ldd	r29, Z+7	; 0x07
    2720:	80 85       	ldd	r24, Z+8	; 0x08
    2722:	91 85       	ldd	r25, Z+9	; 0x09
    2724:	9f 83       	std	Y+7, r25	; 0x07
    2726:	8e 83       	std	Y+6, r24	; 0x06
    2728:	c0 85       	ldd	r28, Z+8	; 0x08
    272a:	d1 85       	ldd	r29, Z+9	; 0x09
    272c:	86 81       	ldd	r24, Z+6	; 0x06
    272e:	97 81       	ldd	r25, Z+7	; 0x07
    2730:	9d 83       	std	Y+5, r25	; 0x05
    2732:	8c 83       	std	Y+4, r24	; 0x04
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	8d 91       	ld	r24, X+
    2738:	9c 91       	ld	r25, X
    273a:	12 97       	sbiw	r26, 0x02	; 2
    273c:	9f 01       	movw	r18, r30
    273e:	2e 5f       	subi	r18, 0xFE	; 254
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	82 17       	cp	r24, r18
    2744:	93 07       	cpc	r25, r19
    2746:	31 f4       	brne	.+12     	; 0x2754 <xTaskResumeAll+0xbc>
    2748:	80 85       	ldd	r24, Z+8	; 0x08
    274a:	91 85       	ldd	r25, Z+9	; 0x09
    274c:	12 96       	adiw	r26, 0x02	; 2
    274e:	9c 93       	st	X, r25
    2750:	8e 93       	st	-X, r24
    2752:	11 97       	sbiw	r26, 0x01	; 1
    2754:	15 86       	std	Z+13, r1	; 0x0d
    2756:	14 86       	std	Z+12, r1	; 0x0c
    2758:	8c 91       	ld	r24, X
    275a:	81 50       	subi	r24, 0x01	; 1
    275c:	8c 93       	st	X, r24
    275e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2760:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    2764:	8a 17       	cp	r24, r26
    2766:	10 f4       	brcc	.+4      	; 0x276c <xTaskResumeAll+0xd4>
    2768:	a0 93 84 12 	sts	0x1284, r26	; 0x801284 <uxTopReadyPriority>
    276c:	8b e0       	ldi	r24, 0x0B	; 11
    276e:	8a 9f       	mul	r24, r26
    2770:	d0 01       	movw	r26, r0
    2772:	11 24       	eor	r1, r1
    2774:	aa 53       	subi	r26, 0x3A	; 58
    2776:	bd 4e       	sbci	r27, 0xED	; 237
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	0d 90       	ld	r0, X+
    277c:	bc 91       	ld	r27, X
    277e:	a0 2d       	mov	r26, r0
    2780:	b7 83       	std	Z+7, r27	; 0x07
    2782:	a6 83       	std	Z+6, r26	; 0x06
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	4d 91       	ld	r20, X+
    2788:	5c 91       	ld	r21, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	51 87       	std	Z+9, r21	; 0x09
    278e:	40 87       	std	Z+8, r20	; 0x08
    2790:	16 96       	adiw	r26, 0x06	; 6
    2792:	cd 91       	ld	r28, X+
    2794:	dc 91       	ld	r29, X
    2796:	17 97       	sbiw	r26, 0x07	; 7
    2798:	3d 83       	std	Y+5, r19	; 0x05
    279a:	2c 83       	std	Y+4, r18	; 0x04
    279c:	17 96       	adiw	r26, 0x07	; 7
    279e:	3c 93       	st	X, r19
    27a0:	2e 93       	st	-X, r18
    27a2:	16 97       	sbiw	r26, 0x06	; 6
    27a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27a6:	8a 9f       	mul	r24, r26
    27a8:	d0 01       	movw	r26, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	aa 53       	subi	r26, 0x3A	; 58
    27ae:	bd 4e       	sbci	r27, 0xED	; 237
    27b0:	b5 87       	std	Z+13, r27	; 0x0d
    27b2:	a4 87       	std	Z+12, r26	; 0x0c
    27b4:	8c 91       	ld	r24, X
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	8c 93       	st	X, r24
    27ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    27bc:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    27c0:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    27c4:	5a 96       	adiw	r26, 0x1a	; 26
    27c6:	8c 91       	ld	r24, X
    27c8:	98 17       	cp	r25, r24
    27ca:	30 f0       	brcs	.+12     	; 0x27d8 <xTaskResumeAll+0x140>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <xTaskResumeAll+0x140>
    27d4:	e0 e0       	ldi	r30, 0x00	; 0
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <xPendingReadyList>
    27dc:	81 11       	cpse	r24, r1
    27de:	73 cf       	rjmp	.-282    	; 0x26c6 <xTaskResumeAll+0x2e>
    27e0:	ef 2b       	or	r30, r31
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <xTaskResumeAll+0x14e>
    27e4:	7d db       	rcall	.-2310   	; 0x1ee0 <prvResetNextTaskUnblockTime>
    27e6:	c0 90 7f 12 	lds	r12, 0x127F	; 0x80127f <xPendedTicks>
    27ea:	d0 90 80 12 	lds	r13, 0x1280	; 0x801280 <xPendedTicks+0x1>
    27ee:	e0 90 81 12 	lds	r14, 0x1281	; 0x801281 <xPendedTicks+0x2>
    27f2:	f0 90 82 12 	lds	r15, 0x1282	; 0x801282 <xPendedTicks+0x3>
    27f6:	c1 14       	cp	r12, r1
    27f8:	d1 04       	cpc	r13, r1
    27fa:	e1 04       	cpc	r14, r1
    27fc:	f1 04       	cpc	r15, r1
    27fe:	a1 f0       	breq	.+40     	; 0x2828 <xTaskResumeAll+0x190>
    2800:	1f de       	rcall	.-962    	; 0x2440 <xTaskIncrementTick>
    2802:	88 23       	and	r24, r24
    2804:	19 f0       	breq	.+6      	; 0x280c <xTaskResumeAll+0x174>
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	c8 1a       	sub	r12, r24
    2810:	d1 08       	sbc	r13, r1
    2812:	e1 08       	sbc	r14, r1
    2814:	f1 08       	sbc	r15, r1
    2816:	a1 f7       	brne	.-24     	; 0x2800 <xTaskResumeAll+0x168>
    2818:	10 92 7f 12 	sts	0x127F, r1	; 0x80127f <xPendedTicks>
    281c:	10 92 80 12 	sts	0x1280, r1	; 0x801280 <xPendedTicks+0x1>
    2820:	10 92 81 12 	sts	0x1281, r1	; 0x801281 <xPendedTicks+0x2>
    2824:	10 92 82 12 	sts	0x1282, r1	; 0x801282 <xPendedTicks+0x3>
    2828:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <xYieldPending>
    282c:	88 23       	and	r24, r24
    282e:	31 f0       	breq	.+12     	; 0x283c <xTaskResumeAll+0x1a4>
    2830:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	03 c0       	rjmp	.+6      	; 0x283e <xTaskResumeAll+0x1a6>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	01 c0       	rjmp	.+2      	; 0x283e <xTaskResumeAll+0x1a6>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	0f 90       	pop	r0
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	08 95       	ret

00002850 <xTaskDelayUntil>:
    2850:	8f 92       	push	r8
    2852:	9f 92       	push	r9
    2854:	af 92       	push	r10
    2856:	bf 92       	push	r11
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	ec 01       	movw	r28, r24
    2868:	6a 01       	movw	r12, r20
    286a:	7b 01       	movw	r14, r22
    286c:	d5 dd       	rcall	.-1110   	; 0x2418 <vTaskSuspendAll>
    286e:	80 90 85 12 	lds	r8, 0x1285	; 0x801285 <xTickCount>
    2872:	90 90 86 12 	lds	r9, 0x1286	; 0x801286 <xTickCount+0x1>
    2876:	a0 90 87 12 	lds	r10, 0x1287	; 0x801287 <xTickCount+0x2>
    287a:	b0 90 88 12 	lds	r11, 0x1288	; 0x801288 <xTickCount+0x3>
    287e:	88 81       	ld	r24, Y
    2880:	99 81       	ldd	r25, Y+1	; 0x01
    2882:	aa 81       	ldd	r26, Y+2	; 0x02
    2884:	bb 81       	ldd	r27, Y+3	; 0x03
    2886:	ac 01       	movw	r20, r24
    2888:	bd 01       	movw	r22, r26
    288a:	4c 0d       	add	r20, r12
    288c:	5d 1d       	adc	r21, r13
    288e:	6e 1d       	adc	r22, r14
    2890:	7f 1d       	adc	r23, r15
    2892:	88 16       	cp	r8, r24
    2894:	99 06       	cpc	r9, r25
    2896:	aa 06       	cpc	r10, r26
    2898:	bb 06       	cpc	r11, r27
    289a:	60 f4       	brcc	.+24     	; 0x28b4 <xTaskDelayUntil+0x64>
    289c:	48 17       	cp	r20, r24
    289e:	59 07       	cpc	r21, r25
    28a0:	6a 07       	cpc	r22, r26
    28a2:	7b 07       	cpc	r23, r27
    28a4:	98 f4       	brcc	.+38     	; 0x28cc <xTaskDelayUntil+0x7c>
    28a6:	84 16       	cp	r8, r20
    28a8:	95 06       	cpc	r9, r21
    28aa:	a6 06       	cpc	r10, r22
    28ac:	b7 06       	cpc	r11, r23
    28ae:	80 f0       	brcs	.+32     	; 0x28d0 <xTaskDelayUntil+0x80>
    28b0:	10 e0       	ldi	r17, 0x00	; 0
    28b2:	13 c0       	rjmp	.+38     	; 0x28da <xTaskDelayUntil+0x8a>
    28b4:	48 17       	cp	r20, r24
    28b6:	59 07       	cpc	r21, r25
    28b8:	6a 07       	cpc	r22, r26
    28ba:	7b 07       	cpc	r23, r27
    28bc:	58 f0       	brcs	.+22     	; 0x28d4 <xTaskDelayUntil+0x84>
    28be:	84 16       	cp	r8, r20
    28c0:	95 06       	cpc	r9, r21
    28c2:	a6 06       	cpc	r10, r22
    28c4:	b7 06       	cpc	r11, r23
    28c6:	40 f0       	brcs	.+16     	; 0x28d8 <xTaskDelayUntil+0x88>
    28c8:	10 e0       	ldi	r17, 0x00	; 0
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <xTaskDelayUntil+0x8a>
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <xTaskDelayUntil+0x8a>
    28d0:	11 e0       	ldi	r17, 0x01	; 1
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <xTaskDelayUntil+0x8a>
    28d4:	11 e0       	ldi	r17, 0x01	; 1
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <xTaskDelayUntil+0x8a>
    28d8:	11 e0       	ldi	r17, 0x01	; 1
    28da:	48 83       	st	Y, r20
    28dc:	59 83       	std	Y+1, r21	; 0x01
    28de:	6a 83       	std	Y+2, r22	; 0x02
    28e0:	7b 83       	std	Y+3, r23	; 0x03
    28e2:	11 23       	and	r17, r17
    28e4:	41 f0       	breq	.+16     	; 0x28f6 <xTaskDelayUntil+0xa6>
    28e6:	cb 01       	movw	r24, r22
    28e8:	ba 01       	movw	r22, r20
    28ea:	68 19       	sub	r22, r8
    28ec:	79 09       	sbc	r23, r9
    28ee:	8a 09       	sbc	r24, r10
    28f0:	9b 09       	sbc	r25, r11
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	6b dc       	rcall	.-1834   	; 0x21cc <prvAddCurrentTaskToDelayedList>
    28f6:	d0 de       	rcall	.-608    	; 0x2698 <xTaskResumeAll>
    28f8:	81 11       	cpse	r24, r1
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <xTaskDelayUntil+0xb0>
    28fc:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    2900:	81 2f       	mov	r24, r17
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	bf 90       	pop	r11
    2912:	af 90       	pop	r10
    2914:	9f 90       	pop	r9
    2916:	8f 90       	pop	r8
    2918:	08 95       	ret

0000291a <vTaskDelay>:
    291a:	cf 92       	push	r12
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	6b 01       	movw	r12, r22
    2924:	7c 01       	movw	r14, r24
    2926:	67 2b       	or	r22, r23
    2928:	68 2b       	or	r22, r24
    292a:	69 2b       	or	r22, r25
    292c:	39 f0       	breq	.+14     	; 0x293c <vTaskDelay+0x22>
    292e:	74 dd       	rcall	.-1304   	; 0x2418 <vTaskSuspendAll>
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	c7 01       	movw	r24, r14
    2934:	b6 01       	movw	r22, r12
    2936:	4a dc       	rcall	.-1900   	; 0x21cc <prvAddCurrentTaskToDelayedList>
    2938:	af de       	rcall	.-674    	; 0x2698 <xTaskResumeAll>
    293a:	01 c0       	rjmp	.+2      	; 0x293e <vTaskDelay+0x24>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	81 11       	cpse	r24, r1
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vTaskDelay+0x2c>
    2942:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	08 95       	ret

00002950 <vTaskSwitchContext>:
    2950:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    2954:	88 23       	and	r24, r24
    2956:	21 f0       	breq	.+8      	; 0x2960 <vTaskSwitchContext+0x10>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    295e:	08 95       	ret
    2960:	10 92 7e 12 	sts	0x127E, r1	; 0x80127e <xYieldPending>
    2964:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2968:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    296c:	20 81       	ld	r18, Z
    296e:	31 81       	ldd	r19, Z+1	; 0x01
    2970:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2974:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2978:	83 8d       	ldd	r24, Z+27	; 0x1b
    297a:	94 8d       	ldd	r25, Z+28	; 0x1c
    297c:	82 17       	cp	r24, r18
    297e:	93 07       	cpc	r25, r19
    2980:	60 f0       	brcs	.+24     	; 0x299a <vTaskSwitchContext+0x4a>
    2982:	60 91 34 13 	lds	r22, 0x1334	; 0x801334 <pxCurrentTCB>
    2986:	70 91 35 13 	lds	r23, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    298a:	63 5e       	subi	r22, 0xE3	; 227
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2992:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2996:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <vApplicationStackOverflowHook>
    299a:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <vTaskSwitchContext+0x52>
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	9b e0       	ldi	r25, 0x0B	; 11
    29a8:	92 9f       	mul	r25, r18
    29aa:	f0 01       	movw	r30, r0
    29ac:	93 9f       	mul	r25, r19
    29ae:	f0 0d       	add	r31, r0
    29b0:	11 24       	eor	r1, r1
    29b2:	ea 53       	subi	r30, 0x3A	; 58
    29b4:	fd 4e       	sbci	r31, 0xED	; 237
    29b6:	90 81       	ld	r25, Z
    29b8:	99 23       	and	r25, r25
    29ba:	91 f3       	breq	.-28     	; 0x29a0 <vTaskSwitchContext+0x50>
    29bc:	9b e0       	ldi	r25, 0x0B	; 11
    29be:	92 9f       	mul	r25, r18
    29c0:	a0 01       	movw	r20, r0
    29c2:	93 9f       	mul	r25, r19
    29c4:	50 0d       	add	r21, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	df 01       	movw	r26, r30
    29ca:	01 80       	ldd	r0, Z+1	; 0x01
    29cc:	f2 81       	ldd	r31, Z+2	; 0x02
    29ce:	e0 2d       	mov	r30, r0
    29d0:	04 80       	ldd	r0, Z+4	; 0x04
    29d2:	f5 81       	ldd	r31, Z+5	; 0x05
    29d4:	e0 2d       	mov	r30, r0
    29d6:	12 96       	adiw	r26, 0x02	; 2
    29d8:	fc 93       	st	X, r31
    29da:	ee 93       	st	-X, r30
    29dc:	11 97       	sbiw	r26, 0x01	; 1
    29de:	47 53       	subi	r20, 0x37	; 55
    29e0:	5d 4e       	sbci	r21, 0xED	; 237
    29e2:	e4 17       	cp	r30, r20
    29e4:	f5 07       	cpc	r31, r21
    29e6:	29 f4       	brne	.+10     	; 0x29f2 <vTaskSwitchContext+0xa2>
    29e8:	44 81       	ldd	r20, Z+4	; 0x04
    29ea:	55 81       	ldd	r21, Z+5	; 0x05
    29ec:	fd 01       	movw	r30, r26
    29ee:	52 83       	std	Z+2, r21	; 0x02
    29f0:	41 83       	std	Z+1, r20	; 0x01
    29f2:	9b e0       	ldi	r25, 0x0B	; 11
    29f4:	92 9f       	mul	r25, r18
    29f6:	f0 01       	movw	r30, r0
    29f8:	93 9f       	mul	r25, r19
    29fa:	f0 0d       	add	r31, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	ea 53       	subi	r30, 0x3A	; 58
    2a00:	fd 4e       	sbci	r31, 0xED	; 237
    2a02:	01 80       	ldd	r0, Z+1	; 0x01
    2a04:	f2 81       	ldd	r31, Z+2	; 0x02
    2a06:	e0 2d       	mov	r30, r0
    2a08:	20 85       	ldd	r18, Z+8	; 0x08
    2a0a:	31 85       	ldd	r19, Z+9	; 0x09
    2a0c:	30 93 35 13 	sts	0x1335, r19	; 0x801335 <pxCurrentTCB+0x1>
    2a10:	20 93 34 13 	sts	0x1334, r18	; 0x801334 <pxCurrentTCB>
    2a14:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <uxTopReadyPriority>
    2a18:	08 95       	ret

00002a1a <vTaskPlaceOnEventList>:
    2a1a:	cf 92       	push	r12
    2a1c:	df 92       	push	r13
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	6a 01       	movw	r12, r20
    2a24:	7b 01       	movw	r14, r22
    2a26:	60 91 34 13 	lds	r22, 0x1334	; 0x801334 <pxCurrentTCB>
    2a2a:	70 91 35 13 	lds	r23, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2a2e:	62 5f       	subi	r22, 0xF2	; 242
    2a30:	7f 4f       	sbci	r23, 0xFF	; 255
    2a32:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	c7 01       	movw	r24, r14
    2a3a:	b6 01       	movw	r22, r12
    2a3c:	c7 db       	rcall	.-2162   	; 0x21cc <prvAddCurrentTaskToDelayedList>
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
    2a46:	08 95       	ret

00002a48 <vTaskPlaceOnUnorderedEventList>:
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	fc 01       	movw	r30, r24
    2a52:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2a56:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2a5a:	70 68       	ori	r23, 0x80	; 128
    2a5c:	1e 96       	adiw	r26, 0x0e	; 14
    2a5e:	4d 93       	st	X+, r20
    2a60:	5d 93       	st	X+, r21
    2a62:	6d 93       	st	X+, r22
    2a64:	7c 93       	st	X, r23
    2a66:	51 97       	sbiw	r26, 0x11	; 17
    2a68:	a1 81       	ldd	r26, Z+1	; 0x01
    2a6a:	b2 81       	ldd	r27, Z+2	; 0x02
    2a6c:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    2a70:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2a74:	bb 8b       	std	Y+19, r27	; 0x13
    2a76:	aa 8b       	std	Y+18, r26	; 0x12
    2a78:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    2a7c:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2a80:	16 96       	adiw	r26, 0x06	; 6
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	17 97       	sbiw	r26, 0x07	; 7
    2a88:	9d 8b       	std	Y+21, r25	; 0x15
    2a8a:	8c 8b       	std	Y+20, r24	; 0x14
    2a8c:	16 96       	adiw	r26, 0x06	; 6
    2a8e:	cd 91       	ld	r28, X+
    2a90:	dc 91       	ld	r29, X
    2a92:	17 97       	sbiw	r26, 0x07	; 7
    2a94:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2a98:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2a9c:	0e 96       	adiw	r24, 0x0e	; 14
    2a9e:	9d 83       	std	Y+5, r25	; 0x05
    2aa0:	8c 83       	std	Y+4, r24	; 0x04
    2aa2:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2aa6:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2aaa:	0e 96       	adiw	r24, 0x0e	; 14
    2aac:	17 96       	adiw	r26, 0x07	; 7
    2aae:	9c 93       	st	X, r25
    2ab0:	8e 93       	st	-X, r24
    2ab2:	16 97       	sbiw	r26, 0x06	; 6
    2ab4:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2ab8:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2abc:	59 96       	adiw	r26, 0x19	; 25
    2abe:	fc 93       	st	X, r31
    2ac0:	ee 93       	st	-X, r30
    2ac2:	58 97       	sbiw	r26, 0x18	; 24
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8f 5f       	subi	r24, 0xFF	; 255
    2ac8:	80 83       	st	Z, r24
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	c9 01       	movw	r24, r18
    2ace:	b8 01       	movw	r22, r16
    2ad0:	7d db       	rcall	.-2310   	; 0x21cc <prvAddCurrentTaskToDelayedList>
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	08 95       	ret

00002adc <vTaskPlaceOnEventListRestricted>:
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	ba 01       	movw	r22, r20
    2ae6:	a1 81       	ldd	r26, Z+1	; 0x01
    2ae8:	b2 81       	ldd	r27, Z+2	; 0x02
    2aea:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    2aee:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2af2:	bb 8b       	std	Y+19, r27	; 0x13
    2af4:	aa 8b       	std	Y+18, r26	; 0x12
    2af6:	c0 91 34 13 	lds	r28, 0x1334	; 0x801334 <pxCurrentTCB>
    2afa:	d0 91 35 13 	lds	r29, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2afe:	16 96       	adiw	r26, 0x06	; 6
    2b00:	4d 91       	ld	r20, X+
    2b02:	5c 91       	ld	r21, X
    2b04:	17 97       	sbiw	r26, 0x07	; 7
    2b06:	5d 8b       	std	Y+21, r21	; 0x15
    2b08:	4c 8b       	std	Y+20, r20	; 0x14
    2b0a:	16 96       	adiw	r26, 0x06	; 6
    2b0c:	cd 91       	ld	r28, X+
    2b0e:	dc 91       	ld	r29, X
    2b10:	17 97       	sbiw	r26, 0x07	; 7
    2b12:	40 91 34 13 	lds	r20, 0x1334	; 0x801334 <pxCurrentTCB>
    2b16:	50 91 35 13 	lds	r21, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2b1a:	42 5f       	subi	r20, 0xF2	; 242
    2b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1e:	5d 83       	std	Y+5, r21	; 0x05
    2b20:	4c 83       	std	Y+4, r20	; 0x04
    2b22:	40 91 34 13 	lds	r20, 0x1334	; 0x801334 <pxCurrentTCB>
    2b26:	50 91 35 13 	lds	r21, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2b2a:	42 5f       	subi	r20, 0xF2	; 242
    2b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2e:	17 96       	adiw	r26, 0x07	; 7
    2b30:	5c 93       	st	X, r21
    2b32:	4e 93       	st	-X, r20
    2b34:	16 97       	sbiw	r26, 0x06	; 6
    2b36:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2b3a:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2b3e:	59 96       	adiw	r26, 0x19	; 25
    2b40:	fc 93       	st	X, r31
    2b42:	ee 93       	st	-X, r30
    2b44:	58 97       	sbiw	r26, 0x18	; 24
    2b46:	30 81       	ld	r19, Z
    2b48:	3f 5f       	subi	r19, 0xFF	; 255
    2b4a:	30 83       	st	Z, r19
    2b4c:	22 23       	and	r18, r18
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <vTaskPlaceOnEventListRestricted+0x7a>
    2b50:	6f ef       	ldi	r22, 0xFF	; 255
    2b52:	7f ef       	ldi	r23, 0xFF	; 255
    2b54:	cb 01       	movw	r24, r22
    2b56:	42 2f       	mov	r20, r18
    2b58:	39 db       	rcall	.-2446   	; 0x21cc <prvAddCurrentTaskToDelayedList>
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	08 95       	ret

00002b60 <xTaskRemoveFromEventList>:
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	dc 01       	movw	r26, r24
    2b66:	17 96       	adiw	r26, 0x07	; 7
    2b68:	ed 91       	ld	r30, X+
    2b6a:	fc 91       	ld	r31, X
    2b6c:	18 97       	sbiw	r26, 0x08	; 8
    2b6e:	00 84       	ldd	r0, Z+8	; 0x08
    2b70:	f1 85       	ldd	r31, Z+9	; 0x09
    2b72:	e0 2d       	mov	r30, r0
    2b74:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b76:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b78:	c2 89       	ldd	r28, Z+18	; 0x12
    2b7a:	d3 89       	ldd	r29, Z+19	; 0x13
    2b7c:	84 89       	ldd	r24, Z+20	; 0x14
    2b7e:	95 89       	ldd	r25, Z+21	; 0x15
    2b80:	9f 83       	std	Y+7, r25	; 0x07
    2b82:	8e 83       	std	Y+6, r24	; 0x06
    2b84:	c4 89       	ldd	r28, Z+20	; 0x14
    2b86:	d5 89       	ldd	r29, Z+21	; 0x15
    2b88:	82 89       	ldd	r24, Z+18	; 0x12
    2b8a:	93 89       	ldd	r25, Z+19	; 0x13
    2b8c:	9d 83       	std	Y+5, r25	; 0x05
    2b8e:	8c 83       	std	Y+4, r24	; 0x04
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	8d 91       	ld	r24, X+
    2b94:	9c 91       	ld	r25, X
    2b96:	12 97       	sbiw	r26, 0x02	; 2
    2b98:	9f 01       	movw	r18, r30
    2b9a:	22 5f       	subi	r18, 0xF2	; 242
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9e:	82 17       	cp	r24, r18
    2ba0:	93 07       	cpc	r25, r19
    2ba2:	31 f4       	brne	.+12     	; 0x2bb0 <xTaskRemoveFromEventList+0x50>
    2ba4:	84 89       	ldd	r24, Z+20	; 0x14
    2ba6:	95 89       	ldd	r25, Z+21	; 0x15
    2ba8:	12 96       	adiw	r26, 0x02	; 2
    2baa:	9c 93       	st	X, r25
    2bac:	8e 93       	st	-X, r24
    2bae:	11 97       	sbiw	r26, 0x01	; 1
    2bb0:	11 8e       	std	Z+25, r1	; 0x19
    2bb2:	10 8e       	std	Z+24, r1	; 0x18
    2bb4:	8c 91       	ld	r24, X
    2bb6:	81 50       	subi	r24, 0x01	; 1
    2bb8:	8c 93       	st	X, r24
    2bba:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	52 c0       	rjmp	.+164    	; 0x2c66 <xTaskRemoveFromEventList+0x106>
    2bc2:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bc4:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bc6:	c6 81       	ldd	r28, Z+6	; 0x06
    2bc8:	d7 81       	ldd	r29, Z+7	; 0x07
    2bca:	80 85       	ldd	r24, Z+8	; 0x08
    2bcc:	91 85       	ldd	r25, Z+9	; 0x09
    2bce:	9f 83       	std	Y+7, r25	; 0x07
    2bd0:	8e 83       	std	Y+6, r24	; 0x06
    2bd2:	c0 85       	ldd	r28, Z+8	; 0x08
    2bd4:	d1 85       	ldd	r29, Z+9	; 0x09
    2bd6:	86 81       	ldd	r24, Z+6	; 0x06
    2bd8:	97 81       	ldd	r25, Z+7	; 0x07
    2bda:	9d 83       	std	Y+5, r25	; 0x05
    2bdc:	8c 83       	std	Y+4, r24	; 0x04
    2bde:	11 96       	adiw	r26, 0x01	; 1
    2be0:	8d 91       	ld	r24, X+
    2be2:	9c 91       	ld	r25, X
    2be4:	12 97       	sbiw	r26, 0x02	; 2
    2be6:	9f 01       	movw	r18, r30
    2be8:	2e 5f       	subi	r18, 0xFE	; 254
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	31 f4       	brne	.+12     	; 0x2bfe <xTaskRemoveFromEventList+0x9e>
    2bf2:	80 85       	ldd	r24, Z+8	; 0x08
    2bf4:	91 85       	ldd	r25, Z+9	; 0x09
    2bf6:	12 96       	adiw	r26, 0x02	; 2
    2bf8:	9c 93       	st	X, r25
    2bfa:	8e 93       	st	-X, r24
    2bfc:	11 97       	sbiw	r26, 0x01	; 1
    2bfe:	15 86       	std	Z+13, r1	; 0x0d
    2c00:	14 86       	std	Z+12, r1	; 0x0c
    2c02:	8c 91       	ld	r24, X
    2c04:	81 50       	subi	r24, 0x01	; 1
    2c06:	8c 93       	st	X, r24
    2c08:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c0a:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    2c0e:	8a 17       	cp	r24, r26
    2c10:	10 f4       	brcc	.+4      	; 0x2c16 <xTaskRemoveFromEventList+0xb6>
    2c12:	a0 93 84 12 	sts	0x1284, r26	; 0x801284 <uxTopReadyPriority>
    2c16:	8b e0       	ldi	r24, 0x0B	; 11
    2c18:	8a 9f       	mul	r24, r26
    2c1a:	d0 01       	movw	r26, r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	aa 53       	subi	r26, 0x3A	; 58
    2c20:	bd 4e       	sbci	r27, 0xED	; 237
    2c22:	11 96       	adiw	r26, 0x01	; 1
    2c24:	0d 90       	ld	r0, X+
    2c26:	bc 91       	ld	r27, X
    2c28:	a0 2d       	mov	r26, r0
    2c2a:	b7 83       	std	Z+7, r27	; 0x07
    2c2c:	a6 83       	std	Z+6, r26	; 0x06
    2c2e:	16 96       	adiw	r26, 0x06	; 6
    2c30:	4d 91       	ld	r20, X+
    2c32:	5c 91       	ld	r21, X
    2c34:	17 97       	sbiw	r26, 0x07	; 7
    2c36:	51 87       	std	Z+9, r21	; 0x09
    2c38:	40 87       	std	Z+8, r20	; 0x08
    2c3a:	16 96       	adiw	r26, 0x06	; 6
    2c3c:	cd 91       	ld	r28, X+
    2c3e:	dc 91       	ld	r29, X
    2c40:	17 97       	sbiw	r26, 0x07	; 7
    2c42:	3d 83       	std	Y+5, r19	; 0x05
    2c44:	2c 83       	std	Y+4, r18	; 0x04
    2c46:	17 96       	adiw	r26, 0x07	; 7
    2c48:	3c 93       	st	X, r19
    2c4a:	2e 93       	st	-X, r18
    2c4c:	16 97       	sbiw	r26, 0x06	; 6
    2c4e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c50:	8a 9f       	mul	r24, r26
    2c52:	d0 01       	movw	r26, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	aa 53       	subi	r26, 0x3A	; 58
    2c58:	bd 4e       	sbci	r27, 0xED	; 237
    2c5a:	b5 87       	std	Z+13, r27	; 0x0d
    2c5c:	a4 87       	std	Z+12, r26	; 0x0c
    2c5e:	8c 91       	ld	r24, X
    2c60:	8f 5f       	subi	r24, 0xFF	; 255
    2c62:	8c 93       	st	X, r24
    2c64:	1c c0       	rjmp	.+56     	; 0x2c9e <xTaskRemoveFromEventList+0x13e>
    2c66:	41 ea       	ldi	r20, 0xA1	; 161
    2c68:	52 e1       	ldi	r21, 0x12	; 18
    2c6a:	da 01       	movw	r26, r20
    2c6c:	11 96       	adiw	r26, 0x01	; 1
    2c6e:	cd 91       	ld	r28, X+
    2c70:	dc 91       	ld	r29, X
    2c72:	12 97       	sbiw	r26, 0x02	; 2
    2c74:	d3 8b       	std	Z+19, r29	; 0x13
    2c76:	c2 8b       	std	Z+18, r28	; 0x12
    2c78:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7c:	95 8b       	std	Z+21, r25	; 0x15
    2c7e:	84 8b       	std	Z+20, r24	; 0x14
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	9f 81       	ldd	r25, Y+7	; 0x07
    2c84:	dc 01       	movw	r26, r24
    2c86:	15 96       	adiw	r26, 0x05	; 5
    2c88:	3c 93       	st	X, r19
    2c8a:	2e 93       	st	-X, r18
    2c8c:	14 97       	sbiw	r26, 0x04	; 4
    2c8e:	3f 83       	std	Y+7, r19	; 0x07
    2c90:	2e 83       	std	Y+6, r18	; 0x06
    2c92:	51 8f       	std	Z+25, r21	; 0x19
    2c94:	40 8f       	std	Z+24, r20	; 0x18
    2c96:	da 01       	movw	r26, r20
    2c98:	8c 91       	ld	r24, X
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	8c 93       	st	X, r24
    2c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ca0:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2ca4:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2ca8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2caa:	89 17       	cp	r24, r25
    2cac:	20 f4       	brcc	.+8      	; 0x2cb6 <xTaskRemoveFromEventList+0x156>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    2cb4:	01 c0       	rjmp	.+2      	; 0x2cb8 <xTaskRemoveFromEventList+0x158>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <vTaskRemoveFromUnorderedEventList>:
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	70 68       	ori	r23, 0x80	; 128
    2cc6:	4d 93       	st	X+, r20
    2cc8:	5d 93       	st	X+, r21
    2cca:	6d 93       	st	X+, r22
    2ccc:	7c 93       	st	X, r23
    2cce:	13 97       	sbiw	r26, 0x03	; 3
    2cd0:	18 96       	adiw	r26, 0x08	; 8
    2cd2:	ed 91       	ld	r30, X+
    2cd4:	fc 91       	ld	r31, X
    2cd6:	19 97       	sbiw	r26, 0x09	; 9
    2cd8:	1a 96       	adiw	r26, 0x0a	; 10
    2cda:	4d 91       	ld	r20, X+
    2cdc:	5c 91       	ld	r21, X
    2cde:	1b 97       	sbiw	r26, 0x0b	; 11
    2ce0:	14 96       	adiw	r26, 0x04	; 4
    2ce2:	8d 91       	ld	r24, X+
    2ce4:	9c 91       	ld	r25, X
    2ce6:	15 97       	sbiw	r26, 0x05	; 5
    2ce8:	16 96       	adiw	r26, 0x06	; 6
    2cea:	2d 91       	ld	r18, X+
    2cec:	3c 91       	ld	r19, X
    2cee:	17 97       	sbiw	r26, 0x07	; 7
    2cf0:	ec 01       	movw	r28, r24
    2cf2:	3f 83       	std	Y+7, r19	; 0x07
    2cf4:	2e 83       	std	Y+6, r18	; 0x06
    2cf6:	16 96       	adiw	r26, 0x06	; 6
    2cf8:	8d 91       	ld	r24, X+
    2cfa:	9c 91       	ld	r25, X
    2cfc:	17 97       	sbiw	r26, 0x07	; 7
    2cfe:	14 96       	adiw	r26, 0x04	; 4
    2d00:	2d 91       	ld	r18, X+
    2d02:	3c 91       	ld	r19, X
    2d04:	15 97       	sbiw	r26, 0x05	; 5
    2d06:	ec 01       	movw	r28, r24
    2d08:	3d 83       	std	Y+5, r19	; 0x05
    2d0a:	2c 83       	std	Y+4, r18	; 0x04
    2d0c:	ea 01       	movw	r28, r20
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	a8 17       	cp	r26, r24
    2d14:	b9 07       	cpc	r27, r25
    2d16:	31 f4       	brne	.+12     	; 0x2d24 <vTaskRemoveFromUnorderedEventList+0x66>
    2d18:	16 96       	adiw	r26, 0x06	; 6
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9c 91       	ld	r25, X
    2d1e:	17 97       	sbiw	r26, 0x07	; 7
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	1b 96       	adiw	r26, 0x0b	; 11
    2d26:	1c 92       	st	X, r1
    2d28:	1e 92       	st	-X, r1
    2d2a:	1a 97       	sbiw	r26, 0x0a	; 10
    2d2c:	da 01       	movw	r26, r20
    2d2e:	8c 91       	ld	r24, X
    2d30:	81 50       	subi	r24, 0x01	; 1
    2d32:	8c 93       	st	X, r24
    2d34:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d36:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d38:	c6 81       	ldd	r28, Z+6	; 0x06
    2d3a:	d7 81       	ldd	r29, Z+7	; 0x07
    2d3c:	80 85       	ldd	r24, Z+8	; 0x08
    2d3e:	91 85       	ldd	r25, Z+9	; 0x09
    2d40:	9f 83       	std	Y+7, r25	; 0x07
    2d42:	8e 83       	std	Y+6, r24	; 0x06
    2d44:	c0 85       	ldd	r28, Z+8	; 0x08
    2d46:	d1 85       	ldd	r29, Z+9	; 0x09
    2d48:	86 81       	ldd	r24, Z+6	; 0x06
    2d4a:	97 81       	ldd	r25, Z+7	; 0x07
    2d4c:	9d 83       	std	Y+5, r25	; 0x05
    2d4e:	8c 83       	std	Y+4, r24	; 0x04
    2d50:	11 96       	adiw	r26, 0x01	; 1
    2d52:	8d 91       	ld	r24, X+
    2d54:	9c 91       	ld	r25, X
    2d56:	12 97       	sbiw	r26, 0x02	; 2
    2d58:	9f 01       	movw	r18, r30
    2d5a:	2e 5f       	subi	r18, 0xFE	; 254
    2d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5e:	82 17       	cp	r24, r18
    2d60:	93 07       	cpc	r25, r19
    2d62:	31 f4       	brne	.+12     	; 0x2d70 <vTaskRemoveFromUnorderedEventList+0xb2>
    2d64:	80 85       	ldd	r24, Z+8	; 0x08
    2d66:	91 85       	ldd	r25, Z+9	; 0x09
    2d68:	12 96       	adiw	r26, 0x02	; 2
    2d6a:	9c 93       	st	X, r25
    2d6c:	8e 93       	st	-X, r24
    2d6e:	11 97       	sbiw	r26, 0x01	; 1
    2d70:	15 86       	std	Z+13, r1	; 0x0d
    2d72:	14 86       	std	Z+12, r1	; 0x0c
    2d74:	8c 91       	ld	r24, X
    2d76:	81 50       	subi	r24, 0x01	; 1
    2d78:	8c 93       	st	X, r24
    2d7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d7c:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    2d80:	8a 17       	cp	r24, r26
    2d82:	10 f4       	brcc	.+4      	; 0x2d88 <vTaskRemoveFromUnorderedEventList+0xca>
    2d84:	a0 93 84 12 	sts	0x1284, r26	; 0x801284 <uxTopReadyPriority>
    2d88:	8b e0       	ldi	r24, 0x0B	; 11
    2d8a:	8a 9f       	mul	r24, r26
    2d8c:	d0 01       	movw	r26, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	aa 53       	subi	r26, 0x3A	; 58
    2d92:	bd 4e       	sbci	r27, 0xED	; 237
    2d94:	11 96       	adiw	r26, 0x01	; 1
    2d96:	0d 90       	ld	r0, X+
    2d98:	bc 91       	ld	r27, X
    2d9a:	a0 2d       	mov	r26, r0
    2d9c:	b7 83       	std	Z+7, r27	; 0x07
    2d9e:	a6 83       	std	Z+6, r26	; 0x06
    2da0:	16 96       	adiw	r26, 0x06	; 6
    2da2:	4d 91       	ld	r20, X+
    2da4:	5c 91       	ld	r21, X
    2da6:	17 97       	sbiw	r26, 0x07	; 7
    2da8:	51 87       	std	Z+9, r21	; 0x09
    2daa:	40 87       	std	Z+8, r20	; 0x08
    2dac:	16 96       	adiw	r26, 0x06	; 6
    2dae:	cd 91       	ld	r28, X+
    2db0:	dc 91       	ld	r29, X
    2db2:	17 97       	sbiw	r26, 0x07	; 7
    2db4:	3d 83       	std	Y+5, r19	; 0x05
    2db6:	2c 83       	std	Y+4, r18	; 0x04
    2db8:	17 96       	adiw	r26, 0x07	; 7
    2dba:	3c 93       	st	X, r19
    2dbc:	2e 93       	st	-X, r18
    2dbe:	16 97       	sbiw	r26, 0x06	; 6
    2dc0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dc2:	8a 9f       	mul	r24, r26
    2dc4:	d0 01       	movw	r26, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	aa 53       	subi	r26, 0x3A	; 58
    2dca:	bd 4e       	sbci	r27, 0xED	; 237
    2dcc:	b5 87       	std	Z+13, r27	; 0x0d
    2dce:	a4 87       	std	Z+12, r26	; 0x0c
    2dd0:	8c 91       	ld	r24, X
    2dd2:	8f 5f       	subi	r24, 0xFF	; 255
    2dd4:	8c 93       	st	X, r24
    2dd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dd8:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2ddc:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2de0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2de2:	89 17       	cp	r24, r25
    2de4:	18 f4       	brcc	.+6      	; 0x2dec <vTaskRemoveFromUnorderedEventList+0x12e>
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

00002df2 <vTaskSetTimeOutState>:
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	0f 92       	push	r0
    2df8:	20 91 7d 12 	lds	r18, 0x127D	; 0x80127d <xNumOfOverflows>
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	20 83       	st	Z, r18
    2e00:	40 91 85 12 	lds	r20, 0x1285	; 0x801285 <xTickCount>
    2e04:	50 91 86 12 	lds	r21, 0x1286	; 0x801286 <xTickCount+0x1>
    2e08:	60 91 87 12 	lds	r22, 0x1287	; 0x801287 <xTickCount+0x2>
    2e0c:	70 91 88 12 	lds	r23, 0x1288	; 0x801288 <xTickCount+0x3>
    2e10:	41 83       	std	Z+1, r20	; 0x01
    2e12:	52 83       	std	Z+2, r21	; 0x02
    2e14:	63 83       	std	Z+3, r22	; 0x03
    2e16:	74 83       	std	Z+4, r23	; 0x04
    2e18:	0f 90       	pop	r0
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	08 95       	ret

00002e1e <vTaskInternalSetTimeOutState>:
    2e1e:	20 91 7d 12 	lds	r18, 0x127D	; 0x80127d <xNumOfOverflows>
    2e22:	fc 01       	movw	r30, r24
    2e24:	20 83       	st	Z, r18
    2e26:	40 91 85 12 	lds	r20, 0x1285	; 0x801285 <xTickCount>
    2e2a:	50 91 86 12 	lds	r21, 0x1286	; 0x801286 <xTickCount+0x1>
    2e2e:	60 91 87 12 	lds	r22, 0x1287	; 0x801287 <xTickCount+0x2>
    2e32:	70 91 88 12 	lds	r23, 0x1288	; 0x801288 <xTickCount+0x3>
    2e36:	41 83       	std	Z+1, r20	; 0x01
    2e38:	52 83       	std	Z+2, r21	; 0x02
    2e3a:	63 83       	std	Z+3, r22	; 0x03
    2e3c:	74 83       	std	Z+4, r23	; 0x04
    2e3e:	08 95       	ret

00002e40 <xTaskCheckForTimeOut>:
    2e40:	8f 92       	push	r8
    2e42:	9f 92       	push	r9
    2e44:	af 92       	push	r10
    2e46:	bf 92       	push	r11
    2e48:	cf 92       	push	r12
    2e4a:	df 92       	push	r13
    2e4c:	ef 92       	push	r14
    2e4e:	ff 92       	push	r15
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	fb 01       	movw	r30, r22
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	0f 92       	push	r0
    2e60:	c0 90 85 12 	lds	r12, 0x1285	; 0x801285 <xTickCount>
    2e64:	d0 90 86 12 	lds	r13, 0x1286	; 0x801286 <xTickCount+0x1>
    2e68:	e0 90 87 12 	lds	r14, 0x1287	; 0x801287 <xTickCount+0x2>
    2e6c:	f0 90 88 12 	lds	r15, 0x1288	; 0x801288 <xTickCount+0x3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	11 96       	adiw	r26, 0x01	; 1
    2e74:	0d 91       	ld	r16, X+
    2e76:	1d 91       	ld	r17, X+
    2e78:	2d 91       	ld	r18, X+
    2e7a:	3c 91       	ld	r19, X
    2e7c:	14 97       	sbiw	r26, 0x04	; 4
    2e7e:	46 01       	movw	r8, r12
    2e80:	57 01       	movw	r10, r14
    2e82:	80 1a       	sub	r8, r16
    2e84:	91 0a       	sbc	r9, r17
    2e86:	a2 0a       	sbc	r10, r18
    2e88:	b3 0a       	sbc	r11, r19
    2e8a:	40 81       	ld	r20, Z
    2e8c:	51 81       	ldd	r21, Z+1	; 0x01
    2e8e:	62 81       	ldd	r22, Z+2	; 0x02
    2e90:	73 81       	ldd	r23, Z+3	; 0x03
    2e92:	4f 3f       	cpi	r20, 0xFF	; 255
    2e94:	bf ef       	ldi	r27, 0xFF	; 255
    2e96:	5b 07       	cpc	r21, r27
    2e98:	6b 07       	cpc	r22, r27
    2e9a:	7b 07       	cpc	r23, r27
    2e9c:	39 f1       	breq	.+78     	; 0x2eec <xTaskCheckForTimeOut+0xac>
    2e9e:	ec 01       	movw	r28, r24
    2ea0:	b8 81       	ld	r27, Y
    2ea2:	a0 91 7d 12 	lds	r26, 0x127D	; 0x80127d <xNumOfOverflows>
    2ea6:	ba 17       	cp	r27, r26
    2ea8:	59 f0       	breq	.+22     	; 0x2ec0 <xTaskCheckForTimeOut+0x80>
    2eaa:	c0 16       	cp	r12, r16
    2eac:	d1 06       	cpc	r13, r17
    2eae:	e2 06       	cpc	r14, r18
    2eb0:	f3 06       	cpc	r15, r19
    2eb2:	30 f0       	brcs	.+12     	; 0x2ec0 <xTaskCheckForTimeOut+0x80>
    2eb4:	10 82       	st	Z, r1
    2eb6:	11 82       	std	Z+1, r1	; 0x01
    2eb8:	12 82       	std	Z+2, r1	; 0x02
    2eba:	13 82       	std	Z+3, r1	; 0x03
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	17 c0       	rjmp	.+46     	; 0x2eee <xTaskCheckForTimeOut+0xae>
    2ec0:	84 16       	cp	r8, r20
    2ec2:	95 06       	cpc	r9, r21
    2ec4:	a6 06       	cpc	r10, r22
    2ec6:	b7 06       	cpc	r11, r23
    2ec8:	58 f4       	brcc	.+22     	; 0x2ee0 <xTaskCheckForTimeOut+0xa0>
    2eca:	48 19       	sub	r20, r8
    2ecc:	59 09       	sbc	r21, r9
    2ece:	6a 09       	sbc	r22, r10
    2ed0:	7b 09       	sbc	r23, r11
    2ed2:	40 83       	st	Z, r20
    2ed4:	51 83       	std	Z+1, r21	; 0x01
    2ed6:	62 83       	std	Z+2, r22	; 0x02
    2ed8:	73 83       	std	Z+3, r23	; 0x03
    2eda:	a1 df       	rcall	.-190    	; 0x2e1e <vTaskInternalSetTimeOutState>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <xTaskCheckForTimeOut+0xae>
    2ee0:	10 82       	st	Z, r1
    2ee2:	11 82       	std	Z+1, r1	; 0x01
    2ee4:	12 82       	std	Z+2, r1	; 0x02
    2ee6:	13 82       	std	Z+3, r1	; 0x03
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <xTaskCheckForTimeOut+0xae>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	0f 90       	pop	r0
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	bf 90       	pop	r11
    2f04:	af 90       	pop	r10
    2f06:	9f 90       	pop	r9
    2f08:	8f 90       	pop	r8
    2f0a:	08 95       	ret

00002f0c <vTaskMissedYield>:
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xYieldPending>
    2f12:	08 95       	ret

00002f14 <xTaskGetCurrentTaskHandle>:
    2f14:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    2f18:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2f1c:	08 95       	ret

00002f1e <xTaskGetSchedulerState>:
    2f1e:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <xSchedulerRunning>
    2f22:	88 23       	and	r24, r24
    2f24:	31 f0       	breq	.+12     	; 0x2f32 <xTaskGetSchedulerState+0x14>
    2f26:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <uxSchedulerSuspended>
    2f2a:	81 11       	cpse	r24, r1
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <xTaskGetSchedulerState+0x18>
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	08 95       	ret
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	08 95       	ret
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	08 95       	ret

00002f3a <xTaskPriorityInherit>:
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	fc 01       	movw	r30, r24
    2f44:	89 2b       	or	r24, r25
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <xTaskPriorityInherit+0x10>
    2f48:	77 c0       	rjmp	.+238    	; 0x3038 <xTaskPriorityInherit+0xfe>
    2f4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f4c:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2f50:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2f54:	5a 96       	adiw	r26, 0x1a	; 26
    2f56:	9c 91       	ld	r25, X
    2f58:	89 17       	cp	r24, r25
    2f5a:	08 f0       	brcs	.+2      	; 0x2f5e <xTaskPriorityInherit+0x24>
    2f5c:	63 c0       	rjmp	.+198    	; 0x3024 <xTaskPriorityInherit+0xea>
    2f5e:	46 85       	ldd	r20, Z+14	; 0x0e
    2f60:	57 85       	ldd	r21, Z+15	; 0x0f
    2f62:	60 89       	ldd	r22, Z+16	; 0x10
    2f64:	71 89       	ldd	r23, Z+17	; 0x11
    2f66:	77 23       	and	r23, r23
    2f68:	94 f0       	brlt	.+36     	; 0x2f8e <xTaskPriorityInherit+0x54>
    2f6a:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    2f6e:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2f72:	5a 96       	adiw	r26, 0x1a	; 26
    2f74:	9c 91       	ld	r25, X
    2f76:	4a e0       	ldi	r20, 0x0A	; 10
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	49 1b       	sub	r20, r25
    2f80:	51 09       	sbc	r21, r1
    2f82:	61 09       	sbc	r22, r1
    2f84:	71 09       	sbc	r23, r1
    2f86:	46 87       	std	Z+14, r20	; 0x0e
    2f88:	57 87       	std	Z+15, r21	; 0x0f
    2f8a:	60 8b       	std	Z+16, r22	; 0x10
    2f8c:	71 8b       	std	Z+17, r23	; 0x11
    2f8e:	24 85       	ldd	r18, Z+12	; 0x0c
    2f90:	35 85       	ldd	r19, Z+13	; 0x0d
    2f92:	4b e0       	ldi	r20, 0x0B	; 11
    2f94:	84 9f       	mul	r24, r20
    2f96:	c0 01       	movw	r24, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	8a 53       	subi	r24, 0x3A	; 58
    2f9c:	9d 4e       	sbci	r25, 0xED	; 237
    2f9e:	28 17       	cp	r18, r24
    2fa0:	39 07       	cpc	r19, r25
    2fa2:	b9 f5       	brne	.+110    	; 0x3012 <xTaskPriorityInherit+0xd8>
    2fa4:	ef 01       	movw	r28, r30
    2fa6:	8f 01       	movw	r16, r30
    2fa8:	0e 5f       	subi	r16, 0xFE	; 254
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
    2fb2:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    2fb6:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    2fba:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2fbc:	ea 8f       	std	Y+26, r30	; 0x1a
    2fbe:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    2fc2:	8e 17       	cp	r24, r30
    2fc4:	10 f4       	brcc	.+4      	; 0x2fca <xTaskPriorityInherit+0x90>
    2fc6:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    2fca:	8b e0       	ldi	r24, 0x0B	; 11
    2fcc:	8e 9f       	mul	r24, r30
    2fce:	f0 01       	movw	r30, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	ea 53       	subi	r30, 0x3A	; 58
    2fd4:	fd 4e       	sbci	r31, 0xED	; 237
    2fd6:	01 80       	ldd	r0, Z+1	; 0x01
    2fd8:	f2 81       	ldd	r31, Z+2	; 0x02
    2fda:	e0 2d       	mov	r30, r0
    2fdc:	ff 83       	std	Y+7, r31	; 0x07
    2fde:	ee 83       	std	Y+6, r30	; 0x06
    2fe0:	26 81       	ldd	r18, Z+6	; 0x06
    2fe2:	37 81       	ldd	r19, Z+7	; 0x07
    2fe4:	39 87       	std	Y+9, r19	; 0x09
    2fe6:	28 87       	std	Y+8, r18	; 0x08
    2fe8:	a6 81       	ldd	r26, Z+6	; 0x06
    2fea:	b7 81       	ldd	r27, Z+7	; 0x07
    2fec:	15 96       	adiw	r26, 0x05	; 5
    2fee:	1c 93       	st	X, r17
    2ff0:	0e 93       	st	-X, r16
    2ff2:	14 97       	sbiw	r26, 0x04	; 4
    2ff4:	17 83       	std	Z+7, r17	; 0x07
    2ff6:	06 83       	std	Z+6, r16	; 0x06
    2ff8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ffa:	8e 9f       	mul	r24, r30
    2ffc:	f0 01       	movw	r30, r0
    2ffe:	11 24       	eor	r1, r1
    3000:	ea 53       	subi	r30, 0x3A	; 58
    3002:	fd 4e       	sbci	r31, 0xED	; 237
    3004:	fd 87       	std	Y+13, r31	; 0x0d
    3006:	ec 87       	std	Y+12, r30	; 0x0c
    3008:	80 81       	ld	r24, Z
    300a:	8f 5f       	subi	r24, 0xFF	; 255
    300c:	80 83       	st	Z, r24
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	16 c0       	rjmp	.+44     	; 0x303e <xTaskPriorityInherit+0x104>
    3012:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    3016:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    301a:	5a 96       	adiw	r26, 0x1a	; 26
    301c:	8c 91       	ld	r24, X
    301e:	82 8f       	std	Z+26, r24	; 0x1a
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	0d c0       	rjmp	.+26     	; 0x303e <xTaskPriorityInherit+0x104>
    3024:	95 a5       	ldd	r25, Z+45	; 0x2d
    3026:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    302a:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    302e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3030:	98 17       	cp	r25, r24
    3032:	20 f0       	brcs	.+8      	; 0x303c <xTaskPriorityInherit+0x102>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	03 c0       	rjmp	.+6      	; 0x303e <xTaskPriorityInherit+0x104>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	01 c0       	rjmp	.+2      	; 0x303e <xTaskPriorityInherit+0x104>
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	08 95       	ret

00003048 <xTaskPriorityDisinherit>:
    3048:	0f 93       	push	r16
    304a:	1f 93       	push	r17
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	fc 01       	movw	r30, r24
    3052:	89 2b       	or	r24, r25
    3054:	09 f4       	brne	.+2      	; 0x3058 <xTaskPriorityDisinherit+0x10>
    3056:	49 c0       	rjmp	.+146    	; 0x30ea <xTaskPriorityDisinherit+0xa2>
    3058:	86 a5       	ldd	r24, Z+46	; 0x2e
    305a:	81 50       	subi	r24, 0x01	; 1
    305c:	86 a7       	std	Z+46, r24	; 0x2e
    305e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3060:	95 a5       	ldd	r25, Z+45	; 0x2d
    3062:	29 17       	cp	r18, r25
    3064:	09 f4       	brne	.+2      	; 0x3068 <xTaskPriorityDisinherit+0x20>
    3066:	43 c0       	rjmp	.+134    	; 0x30ee <xTaskPriorityDisinherit+0xa6>
    3068:	81 11       	cpse	r24, r1
    306a:	43 c0       	rjmp	.+134    	; 0x30f2 <xTaskPriorityDisinherit+0xaa>
    306c:	ef 01       	movw	r28, r30
    306e:	8f 01       	movw	r16, r30
    3070:	0e 5f       	subi	r16, 0xFE	; 254
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	c8 01       	movw	r24, r16
    3076:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
    307a:	ed a5       	ldd	r30, Y+45	; 0x2d
    307c:	ea 8f       	std	Y+26, r30	; 0x1a
    307e:	8a e0       	ldi	r24, 0x0A	; 10
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e0       	ldi	r26, 0x00	; 0
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	8e 1b       	sub	r24, r30
    3088:	91 09       	sbc	r25, r1
    308a:	a1 09       	sbc	r26, r1
    308c:	b1 09       	sbc	r27, r1
    308e:	8e 87       	std	Y+14, r24	; 0x0e
    3090:	9f 87       	std	Y+15, r25	; 0x0f
    3092:	a8 8b       	std	Y+16, r26	; 0x10
    3094:	b9 8b       	std	Y+17, r27	; 0x11
    3096:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    309a:	8e 17       	cp	r24, r30
    309c:	10 f4       	brcc	.+4      	; 0x30a2 <xTaskPriorityDisinherit+0x5a>
    309e:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    30a2:	8b e0       	ldi	r24, 0x0B	; 11
    30a4:	8e 9f       	mul	r24, r30
    30a6:	f0 01       	movw	r30, r0
    30a8:	11 24       	eor	r1, r1
    30aa:	ea 53       	subi	r30, 0x3A	; 58
    30ac:	fd 4e       	sbci	r31, 0xED	; 237
    30ae:	01 80       	ldd	r0, Z+1	; 0x01
    30b0:	f2 81       	ldd	r31, Z+2	; 0x02
    30b2:	e0 2d       	mov	r30, r0
    30b4:	ff 83       	std	Y+7, r31	; 0x07
    30b6:	ee 83       	std	Y+6, r30	; 0x06
    30b8:	26 81       	ldd	r18, Z+6	; 0x06
    30ba:	37 81       	ldd	r19, Z+7	; 0x07
    30bc:	39 87       	std	Y+9, r19	; 0x09
    30be:	28 87       	std	Y+8, r18	; 0x08
    30c0:	a6 81       	ldd	r26, Z+6	; 0x06
    30c2:	b7 81       	ldd	r27, Z+7	; 0x07
    30c4:	15 96       	adiw	r26, 0x05	; 5
    30c6:	1c 93       	st	X, r17
    30c8:	0e 93       	st	-X, r16
    30ca:	14 97       	sbiw	r26, 0x04	; 4
    30cc:	17 83       	std	Z+7, r17	; 0x07
    30ce:	06 83       	std	Z+6, r16	; 0x06
    30d0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    30d2:	8e 9f       	mul	r24, r30
    30d4:	f0 01       	movw	r30, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	ea 53       	subi	r30, 0x3A	; 58
    30da:	fd 4e       	sbci	r31, 0xED	; 237
    30dc:	fd 87       	std	Y+13, r31	; 0x0d
    30de:	ec 87       	std	Y+12, r30	; 0x0c
    30e0:	80 81       	ld	r24, Z
    30e2:	8f 5f       	subi	r24, 0xFF	; 255
    30e4:	80 83       	st	Z, r24
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	05 c0       	rjmp	.+10     	; 0x30f4 <xTaskPriorityDisinherit+0xac>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	03 c0       	rjmp	.+6      	; 0x30f4 <xTaskPriorityDisinherit+0xac>
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	01 c0       	rjmp	.+2      	; 0x30f4 <xTaskPriorityDisinherit+0xac>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	08 95       	ret

000030fe <vTaskPriorityDisinheritAfterTimeout>:
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	fc 01       	movw	r30, r24
    3108:	89 2b       	or	r24, r25
    310a:	09 f4       	brne	.+2      	; 0x310e <vTaskPriorityDisinheritAfterTimeout+0x10>
    310c:	5a c0       	rjmp	.+180    	; 0x31c2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    310e:	85 a5       	ldd	r24, Z+45	; 0x2d
    3110:	86 17       	cp	r24, r22
    3112:	08 f4       	brcc	.+2      	; 0x3116 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3114:	86 2f       	mov	r24, r22
    3116:	92 8d       	ldd	r25, Z+26	; 0x1a
    3118:	89 17       	cp	r24, r25
    311a:	09 f4       	brne	.+2      	; 0x311e <vTaskPriorityDisinheritAfterTimeout+0x20>
    311c:	52 c0       	rjmp	.+164    	; 0x31c2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    311e:	26 a5       	ldd	r18, Z+46	; 0x2e
    3120:	21 30       	cpi	r18, 0x01	; 1
    3122:	09 f0       	breq	.+2      	; 0x3126 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3124:	4e c0       	rjmp	.+156    	; 0x31c2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3126:	82 8f       	std	Z+26, r24	; 0x1a
    3128:	46 85       	ldd	r20, Z+14	; 0x0e
    312a:	57 85       	ldd	r21, Z+15	; 0x0f
    312c:	60 89       	ldd	r22, Z+16	; 0x10
    312e:	71 89       	ldd	r23, Z+17	; 0x11
    3130:	77 23       	and	r23, r23
    3132:	64 f0       	brlt	.+24     	; 0x314c <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3134:	4a e0       	ldi	r20, 0x0A	; 10
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	48 1b       	sub	r20, r24
    313e:	51 09       	sbc	r21, r1
    3140:	61 09       	sbc	r22, r1
    3142:	71 09       	sbc	r23, r1
    3144:	46 87       	std	Z+14, r20	; 0x0e
    3146:	57 87       	std	Z+15, r21	; 0x0f
    3148:	60 8b       	std	Z+16, r22	; 0x10
    314a:	71 8b       	std	Z+17, r23	; 0x11
    314c:	24 85       	ldd	r18, Z+12	; 0x0c
    314e:	35 85       	ldd	r19, Z+13	; 0x0d
    3150:	4b e0       	ldi	r20, 0x0B	; 11
    3152:	94 9f       	mul	r25, r20
    3154:	c0 01       	movw	r24, r0
    3156:	11 24       	eor	r1, r1
    3158:	8a 53       	subi	r24, 0x3A	; 58
    315a:	9d 4e       	sbci	r25, 0xED	; 237
    315c:	28 17       	cp	r18, r24
    315e:	39 07       	cpc	r19, r25
    3160:	81 f5       	brne	.+96     	; 0x31c2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3162:	ef 01       	movw	r28, r30
    3164:	8f 01       	movw	r16, r30
    3166:	0e 5f       	subi	r16, 0xFE	; 254
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	c8 01       	movw	r24, r16
    316c:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
    3170:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3172:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    3176:	8e 17       	cp	r24, r30
    3178:	10 f4       	brcc	.+4      	; 0x317e <vTaskPriorityDisinheritAfterTimeout+0x80>
    317a:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    317e:	8b e0       	ldi	r24, 0x0B	; 11
    3180:	8e 9f       	mul	r24, r30
    3182:	f0 01       	movw	r30, r0
    3184:	11 24       	eor	r1, r1
    3186:	ea 53       	subi	r30, 0x3A	; 58
    3188:	fd 4e       	sbci	r31, 0xED	; 237
    318a:	01 80       	ldd	r0, Z+1	; 0x01
    318c:	f2 81       	ldd	r31, Z+2	; 0x02
    318e:	e0 2d       	mov	r30, r0
    3190:	ff 83       	std	Y+7, r31	; 0x07
    3192:	ee 83       	std	Y+6, r30	; 0x06
    3194:	26 81       	ldd	r18, Z+6	; 0x06
    3196:	37 81       	ldd	r19, Z+7	; 0x07
    3198:	39 87       	std	Y+9, r19	; 0x09
    319a:	28 87       	std	Y+8, r18	; 0x08
    319c:	a6 81       	ldd	r26, Z+6	; 0x06
    319e:	b7 81       	ldd	r27, Z+7	; 0x07
    31a0:	15 96       	adiw	r26, 0x05	; 5
    31a2:	1c 93       	st	X, r17
    31a4:	0e 93       	st	-X, r16
    31a6:	14 97       	sbiw	r26, 0x04	; 4
    31a8:	17 83       	std	Z+7, r17	; 0x07
    31aa:	06 83       	std	Z+6, r16	; 0x06
    31ac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31ae:	8e 9f       	mul	r24, r30
    31b0:	f0 01       	movw	r30, r0
    31b2:	11 24       	eor	r1, r1
    31b4:	ea 53       	subi	r30, 0x3A	; 58
    31b6:	fd 4e       	sbci	r31, 0xED	; 237
    31b8:	fd 87       	std	Y+13, r31	; 0x0d
    31ba:	ec 87       	std	Y+12, r30	; 0x0c
    31bc:	80 81       	ld	r24, Z
    31be:	8f 5f       	subi	r24, 0xFF	; 255
    31c0:	80 83       	st	Z, r24
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	08 95       	ret

000031cc <uxTaskResetEventItemValue>:
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    31d8:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    31dc:	66 85       	ldd	r22, Z+14	; 0x0e
    31de:	77 85       	ldd	r23, Z+15	; 0x0f
    31e0:	80 89       	ldd	r24, Z+16	; 0x10
    31e2:	91 89       	ldd	r25, Z+17	; 0x11
    31e4:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    31e8:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    31ec:	a0 91 34 13 	lds	r26, 0x1334	; 0x801334 <pxCurrentTCB>
    31f0:	b0 91 35 13 	lds	r27, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    31f4:	5a 96       	adiw	r26, 0x1a	; 26
    31f6:	2c 91       	ld	r18, X
    31f8:	0f 2e       	mov	r0, r31
    31fa:	fa e0       	ldi	r31, 0x0A	; 10
    31fc:	cf 2e       	mov	r12, r31
    31fe:	d1 2c       	mov	r13, r1
    3200:	e1 2c       	mov	r14, r1
    3202:	f1 2c       	mov	r15, r1
    3204:	f0 2d       	mov	r31, r0
    3206:	c2 1a       	sub	r12, r18
    3208:	d1 08       	sbc	r13, r1
    320a:	e1 08       	sbc	r14, r1
    320c:	f1 08       	sbc	r15, r1
    320e:	c6 86       	std	Z+14, r12	; 0x0e
    3210:	d7 86       	std	Z+15, r13	; 0x0f
    3212:	e0 8a       	std	Z+16, r14	; 0x10
    3214:	f1 8a       	std	Z+17, r15	; 0x11
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	df 90       	pop	r13
    321c:	cf 90       	pop	r12
    321e:	08 95       	ret

00003220 <pvTaskIncrementMutexHeldCount>:
    3220:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    3224:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3228:	89 2b       	or	r24, r25
    322a:	39 f0       	breq	.+14     	; 0x323a <pvTaskIncrementMutexHeldCount+0x1a>
    322c:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    3230:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3234:	86 a5       	ldd	r24, Z+46	; 0x2e
    3236:	8f 5f       	subi	r24, 0xFF	; 255
    3238:	86 a7       	std	Z+46, r24	; 0x2e
    323a:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    323e:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3242:	08 95       	ret

00003244 <xTaskGenericNotifyWait>:
    3244:	4f 92       	push	r4
    3246:	5f 92       	push	r5
    3248:	6f 92       	push	r6
    324a:	7f 92       	push	r7
    324c:	af 92       	push	r10
    324e:	bf 92       	push	r11
    3250:	cf 92       	push	r12
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	28 01       	movw	r4, r16
    3262:	39 01       	movw	r6, r18
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	0f 92       	push	r0
    326a:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    326e:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3272:	c8 2f       	mov	r28, r24
    3274:	d0 e0       	ldi	r29, 0x00	; 0
    3276:	ec 0f       	add	r30, r28
    3278:	fd 1f       	adc	r31, r29
    327a:	83 a9       	ldd	r24, Z+51	; 0x33
    327c:	82 30       	cpi	r24, 0x02	; 2
    327e:	79 f1       	breq	.+94     	; 0x32de <xTaskGenericNotifyWait+0x9a>
    3280:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    3284:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3288:	ce 01       	movw	r24, r28
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	e8 0f       	add	r30, r24
    3294:	f9 1f       	adc	r31, r25
    3296:	87 a5       	ldd	r24, Z+47	; 0x2f
    3298:	90 a9       	ldd	r25, Z+48	; 0x30
    329a:	a1 a9       	ldd	r26, Z+49	; 0x31
    329c:	b2 a9       	ldd	r27, Z+50	; 0x32
    329e:	40 95       	com	r20
    32a0:	50 95       	com	r21
    32a2:	60 95       	com	r22
    32a4:	70 95       	com	r23
    32a6:	48 23       	and	r20, r24
    32a8:	59 23       	and	r21, r25
    32aa:	6a 23       	and	r22, r26
    32ac:	7b 23       	and	r23, r27
    32ae:	47 a7       	std	Z+47, r20	; 0x2f
    32b0:	50 ab       	std	Z+48, r21	; 0x30
    32b2:	61 ab       	std	Z+49, r22	; 0x31
    32b4:	72 ab       	std	Z+50, r23	; 0x32
    32b6:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    32ba:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    32be:	ec 0f       	add	r30, r28
    32c0:	fd 1f       	adc	r31, r29
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	83 ab       	std	Z+51, r24	; 0x33
    32c6:	a1 14       	cp	r10, r1
    32c8:	b1 04       	cpc	r11, r1
    32ca:	c1 04       	cpc	r12, r1
    32cc:	d1 04       	cpc	r13, r1
    32ce:	39 f0       	breq	.+14     	; 0x32de <xTaskGenericNotifyWait+0x9a>
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	c6 01       	movw	r24, r12
    32d4:	b5 01       	movw	r22, r10
    32d6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <prvAddCurrentTaskToDelayedList>
    32da:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	0f 92       	push	r0
    32e8:	e1 14       	cp	r14, r1
    32ea:	f1 04       	cpc	r15, r1
    32ec:	a1 f0       	breq	.+40     	; 0x3316 <xTaskGenericNotifyWait+0xd2>
    32ee:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    32f2:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    32f6:	ce 01       	movw	r24, r28
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	e8 0f       	add	r30, r24
    3302:	f9 1f       	adc	r31, r25
    3304:	87 a5       	ldd	r24, Z+47	; 0x2f
    3306:	90 a9       	ldd	r25, Z+48	; 0x30
    3308:	a1 a9       	ldd	r26, Z+49	; 0x31
    330a:	b2 a9       	ldd	r27, Z+50	; 0x32
    330c:	f7 01       	movw	r30, r14
    330e:	80 83       	st	Z, r24
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	a2 83       	std	Z+2, r26	; 0x02
    3314:	b3 83       	std	Z+3, r27	; 0x03
    3316:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    331a:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    331e:	ec 0f       	add	r30, r28
    3320:	fd 1f       	adc	r31, r29
    3322:	83 a9       	ldd	r24, Z+51	; 0x33
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	e9 f4       	brne	.+58     	; 0x3362 <xTaskGenericNotifyWait+0x11e>
    3328:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    332c:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3330:	ce 01       	movw	r24, r28
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	e8 0f       	add	r30, r24
    333c:	f9 1f       	adc	r31, r25
    333e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3340:	90 a9       	ldd	r25, Z+48	; 0x30
    3342:	a1 a9       	ldd	r26, Z+49	; 0x31
    3344:	b2 a9       	ldd	r27, Z+50	; 0x32
    3346:	40 94       	com	r4
    3348:	50 94       	com	r5
    334a:	60 94       	com	r6
    334c:	70 94       	com	r7
    334e:	48 22       	and	r4, r24
    3350:	59 22       	and	r5, r25
    3352:	6a 22       	and	r6, r26
    3354:	7b 22       	and	r7, r27
    3356:	47 a6       	std	Z+47, r4	; 0x2f
    3358:	50 aa       	std	Z+48, r5	; 0x30
    335a:	61 aa       	std	Z+49, r6	; 0x31
    335c:	72 aa       	std	Z+50, r7	; 0x32
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <xTaskGenericNotifyWait+0x120>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <pxCurrentTCB>
    3368:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    336c:	c2 0f       	add	r28, r18
    336e:	d3 1f       	adc	r29, r19
    3370:	1b aa       	std	Y+51, r1	; 0x33
    3372:	0f 90       	pop	r0
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	bf 90       	pop	r11
    3388:	af 90       	pop	r10
    338a:	7f 90       	pop	r7
    338c:	6f 90       	pop	r6
    338e:	5f 90       	pop	r5
    3390:	4f 90       	pop	r4
    3392:	08 95       	ret

00003394 <xTaskGenericNotify>:
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	dc 01       	movw	r26, r24
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	0f 92       	push	r0
    33ae:	e1 14       	cp	r14, r1
    33b0:	f1 04       	cpc	r15, r1
    33b2:	89 f0       	breq	.+34     	; 0x33d6 <xTaskGenericNotify+0x42>
    33b4:	e6 2f       	mov	r30, r22
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	ee 0f       	add	r30, r30
    33be:	ff 1f       	adc	r31, r31
    33c0:	e8 0f       	add	r30, r24
    33c2:	f9 1f       	adc	r31, r25
    33c4:	87 a4       	ldd	r8, Z+47	; 0x2f
    33c6:	90 a8       	ldd	r9, Z+48	; 0x30
    33c8:	a1 a8       	ldd	r10, Z+49	; 0x31
    33ca:	b2 a8       	ldd	r11, Z+50	; 0x32
    33cc:	f7 01       	movw	r30, r14
    33ce:	80 82       	st	Z, r8
    33d0:	91 82       	std	Z+1, r9	; 0x01
    33d2:	a2 82       	std	Z+2, r10	; 0x02
    33d4:	b3 82       	std	Z+3, r11	; 0x03
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	fd 01       	movw	r30, r26
    33da:	e6 0f       	add	r30, r22
    33dc:	f7 1f       	adc	r31, r23
    33de:	83 a9       	ldd	r24, Z+51	; 0x33
    33e0:	92 e0       	ldi	r25, 0x02	; 2
    33e2:	93 ab       	std	Z+51, r25	; 0x33
    33e4:	02 30       	cpi	r16, 0x02	; 2
    33e6:	01 f1       	breq	.+64     	; 0x3428 <xTaskGenericNotify+0x94>
    33e8:	18 f4       	brcc	.+6      	; 0x33f0 <xTaskGenericNotify+0x5c>
    33ea:	01 30       	cpi	r16, 0x01	; 1
    33ec:	31 f0       	breq	.+12     	; 0x33fa <xTaskGenericNotify+0x66>
    33ee:	4d c0       	rjmp	.+154    	; 0x348a <xTaskGenericNotify+0xf6>
    33f0:	03 30       	cpi	r16, 0x03	; 3
    33f2:	79 f1       	breq	.+94     	; 0x3452 <xTaskGenericNotify+0xbe>
    33f4:	04 30       	cpi	r16, 0x04	; 4
    33f6:	d1 f1       	breq	.+116    	; 0x346c <xTaskGenericNotify+0xd8>
    33f8:	48 c0       	rjmp	.+144    	; 0x348a <xTaskGenericNotify+0xf6>
    33fa:	66 0f       	add	r22, r22
    33fc:	77 1f       	adc	r23, r23
    33fe:	66 0f       	add	r22, r22
    3400:	77 1f       	adc	r23, r23
    3402:	fd 01       	movw	r30, r26
    3404:	e6 0f       	add	r30, r22
    3406:	f7 1f       	adc	r31, r23
    3408:	87 a4       	ldd	r8, Z+47	; 0x2f
    340a:	90 a8       	ldd	r9, Z+48	; 0x30
    340c:	a1 a8       	ldd	r10, Z+49	; 0x31
    340e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3410:	ba 01       	movw	r22, r20
    3412:	a9 01       	movw	r20, r18
    3414:	48 29       	or	r20, r8
    3416:	59 29       	or	r21, r9
    3418:	6a 29       	or	r22, r10
    341a:	7b 29       	or	r23, r11
    341c:	47 a7       	std	Z+47, r20	; 0x2f
    341e:	50 ab       	std	Z+48, r21	; 0x30
    3420:	61 ab       	std	Z+49, r22	; 0x31
    3422:	72 ab       	std	Z+50, r23	; 0x32
    3424:	01 e0       	ldi	r16, 0x01	; 1
    3426:	34 c0       	rjmp	.+104    	; 0x3490 <xTaskGenericNotify+0xfc>
    3428:	66 0f       	add	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	66 0f       	add	r22, r22
    342e:	77 1f       	adc	r23, r23
    3430:	fd 01       	movw	r30, r26
    3432:	e6 0f       	add	r30, r22
    3434:	f7 1f       	adc	r31, r23
    3436:	47 a5       	ldd	r20, Z+47	; 0x2f
    3438:	50 a9       	ldd	r21, Z+48	; 0x30
    343a:	61 a9       	ldd	r22, Z+49	; 0x31
    343c:	72 a9       	ldd	r23, Z+50	; 0x32
    343e:	4f 5f       	subi	r20, 0xFF	; 255
    3440:	5f 4f       	sbci	r21, 0xFF	; 255
    3442:	6f 4f       	sbci	r22, 0xFF	; 255
    3444:	7f 4f       	sbci	r23, 0xFF	; 255
    3446:	47 a7       	std	Z+47, r20	; 0x2f
    3448:	50 ab       	std	Z+48, r21	; 0x30
    344a:	61 ab       	std	Z+49, r22	; 0x31
    344c:	72 ab       	std	Z+50, r23	; 0x32
    344e:	01 e0       	ldi	r16, 0x01	; 1
    3450:	1f c0       	rjmp	.+62     	; 0x3490 <xTaskGenericNotify+0xfc>
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	66 0f       	add	r22, r22
    3458:	77 1f       	adc	r23, r23
    345a:	fd 01       	movw	r30, r26
    345c:	e6 0f       	add	r30, r22
    345e:	f7 1f       	adc	r31, r23
    3460:	27 a7       	std	Z+47, r18	; 0x2f
    3462:	30 ab       	std	Z+48, r19	; 0x30
    3464:	41 ab       	std	Z+49, r20	; 0x31
    3466:	52 ab       	std	Z+50, r21	; 0x32
    3468:	01 e0       	ldi	r16, 0x01	; 1
    346a:	12 c0       	rjmp	.+36     	; 0x3490 <xTaskGenericNotify+0xfc>
    346c:	82 30       	cpi	r24, 0x02	; 2
    346e:	79 f0       	breq	.+30     	; 0x348e <xTaskGenericNotify+0xfa>
    3470:	66 0f       	add	r22, r22
    3472:	77 1f       	adc	r23, r23
    3474:	66 0f       	add	r22, r22
    3476:	77 1f       	adc	r23, r23
    3478:	fd 01       	movw	r30, r26
    347a:	e6 0f       	add	r30, r22
    347c:	f7 1f       	adc	r31, r23
    347e:	27 a7       	std	Z+47, r18	; 0x2f
    3480:	30 ab       	std	Z+48, r19	; 0x30
    3482:	41 ab       	std	Z+49, r20	; 0x31
    3484:	52 ab       	std	Z+50, r21	; 0x32
    3486:	01 e0       	ldi	r16, 0x01	; 1
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <xTaskGenericNotify+0xfc>
    348a:	01 e0       	ldi	r16, 0x01	; 1
    348c:	01 c0       	rjmp	.+2      	; 0x3490 <xTaskGenericNotify+0xfc>
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	81 30       	cpi	r24, 0x01	; 1
    3492:	09 f0       	breq	.+2      	; 0x3496 <xTaskGenericNotify+0x102>
    3494:	69 c0       	rjmp	.+210    	; 0x3568 <xTaskGenericNotify+0x1d4>
    3496:	1c 96       	adiw	r26, 0x0c	; 12
    3498:	ed 91       	ld	r30, X+
    349a:	fc 91       	ld	r31, X
    349c:	1d 97       	sbiw	r26, 0x0d	; 13
    349e:	16 96       	adiw	r26, 0x06	; 6
    34a0:	cd 91       	ld	r28, X+
    34a2:	dc 91       	ld	r29, X
    34a4:	17 97       	sbiw	r26, 0x07	; 7
    34a6:	18 96       	adiw	r26, 0x08	; 8
    34a8:	8d 91       	ld	r24, X+
    34aa:	9c 91       	ld	r25, X
    34ac:	19 97       	sbiw	r26, 0x09	; 9
    34ae:	9f 83       	std	Y+7, r25	; 0x07
    34b0:	8e 83       	std	Y+6, r24	; 0x06
    34b2:	18 96       	adiw	r26, 0x08	; 8
    34b4:	cd 91       	ld	r28, X+
    34b6:	dc 91       	ld	r29, X
    34b8:	19 97       	sbiw	r26, 0x09	; 9
    34ba:	16 96       	adiw	r26, 0x06	; 6
    34bc:	8d 91       	ld	r24, X+
    34be:	9c 91       	ld	r25, X
    34c0:	17 97       	sbiw	r26, 0x07	; 7
    34c2:	9d 83       	std	Y+5, r25	; 0x05
    34c4:	8c 83       	std	Y+4, r24	; 0x04
    34c6:	81 81       	ldd	r24, Z+1	; 0x01
    34c8:	92 81       	ldd	r25, Z+2	; 0x02
    34ca:	9d 01       	movw	r18, r26
    34cc:	2e 5f       	subi	r18, 0xFE	; 254
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	82 17       	cp	r24, r18
    34d2:	93 07       	cpc	r25, r19
    34d4:	31 f4       	brne	.+12     	; 0x34e2 <xTaskGenericNotify+0x14e>
    34d6:	18 96       	adiw	r26, 0x08	; 8
    34d8:	8d 91       	ld	r24, X+
    34da:	9c 91       	ld	r25, X
    34dc:	19 97       	sbiw	r26, 0x09	; 9
    34de:	92 83       	std	Z+2, r25	; 0x02
    34e0:	81 83       	std	Z+1, r24	; 0x01
    34e2:	1d 96       	adiw	r26, 0x0d	; 13
    34e4:	1c 92       	st	X, r1
    34e6:	1e 92       	st	-X, r1
    34e8:	1c 97       	sbiw	r26, 0x0c	; 12
    34ea:	80 81       	ld	r24, Z
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	80 83       	st	Z, r24
    34f0:	5a 96       	adiw	r26, 0x1a	; 26
    34f2:	ec 91       	ld	r30, X
    34f4:	5a 97       	sbiw	r26, 0x1a	; 26
    34f6:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxTopReadyPriority>
    34fa:	8e 17       	cp	r24, r30
    34fc:	10 f4       	brcc	.+4      	; 0x3502 <xTaskGenericNotify+0x16e>
    34fe:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    3502:	8b e0       	ldi	r24, 0x0B	; 11
    3504:	8e 9f       	mul	r24, r30
    3506:	f0 01       	movw	r30, r0
    3508:	11 24       	eor	r1, r1
    350a:	ea 53       	subi	r30, 0x3A	; 58
    350c:	fd 4e       	sbci	r31, 0xED	; 237
    350e:	01 80       	ldd	r0, Z+1	; 0x01
    3510:	f2 81       	ldd	r31, Z+2	; 0x02
    3512:	e0 2d       	mov	r30, r0
    3514:	17 96       	adiw	r26, 0x07	; 7
    3516:	fc 93       	st	X, r31
    3518:	ee 93       	st	-X, r30
    351a:	16 97       	sbiw	r26, 0x06	; 6
    351c:	46 81       	ldd	r20, Z+6	; 0x06
    351e:	57 81       	ldd	r21, Z+7	; 0x07
    3520:	19 96       	adiw	r26, 0x09	; 9
    3522:	5c 93       	st	X, r21
    3524:	4e 93       	st	-X, r20
    3526:	18 97       	sbiw	r26, 0x08	; 8
    3528:	c6 81       	ldd	r28, Z+6	; 0x06
    352a:	d7 81       	ldd	r29, Z+7	; 0x07
    352c:	3d 83       	std	Y+5, r19	; 0x05
    352e:	2c 83       	std	Y+4, r18	; 0x04
    3530:	37 83       	std	Z+7, r19	; 0x07
    3532:	26 83       	std	Z+6, r18	; 0x06
    3534:	5a 96       	adiw	r26, 0x1a	; 26
    3536:	ec 91       	ld	r30, X
    3538:	5a 97       	sbiw	r26, 0x1a	; 26
    353a:	8e 9f       	mul	r24, r30
    353c:	f0 01       	movw	r30, r0
    353e:	11 24       	eor	r1, r1
    3540:	ea 53       	subi	r30, 0x3A	; 58
    3542:	fd 4e       	sbci	r31, 0xED	; 237
    3544:	1d 96       	adiw	r26, 0x0d	; 13
    3546:	fc 93       	st	X, r31
    3548:	ee 93       	st	-X, r30
    354a:	1c 97       	sbiw	r26, 0x0c	; 12
    354c:	80 81       	ld	r24, Z
    354e:	8f 5f       	subi	r24, 0xFF	; 255
    3550:	80 83       	st	Z, r24
    3552:	5a 96       	adiw	r26, 0x1a	; 26
    3554:	9c 91       	ld	r25, X
    3556:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    355a:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    355e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3560:	89 17       	cp	r24, r25
    3562:	10 f4       	brcc	.+4      	; 0x3568 <xTaskGenericNotify+0x1d4>
    3564:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    3568:	0f 90       	pop	r0
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	80 2f       	mov	r24, r16
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	0f 91       	pop	r16
    3574:	ff 90       	pop	r15
    3576:	ef 90       	pop	r14
    3578:	bf 90       	pop	r11
    357a:	af 90       	pop	r10
    357c:	9f 90       	pop	r9
    357e:	8f 90       	pop	r8
    3580:	08 95       	ret

00003582 <xTaskGenericNotifyFromISR>:
    3582:	8f 92       	push	r8
    3584:	9f 92       	push	r9
    3586:	af 92       	push	r10
    3588:	bf 92       	push	r11
    358a:	cf 92       	push	r12
    358c:	df 92       	push	r13
    358e:	ef 92       	push	r14
    3590:	ff 92       	push	r15
    3592:	0f 93       	push	r16
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	dc 01       	movw	r26, r24
    359a:	e1 14       	cp	r14, r1
    359c:	f1 04       	cpc	r15, r1
    359e:	89 f0       	breq	.+34     	; 0x35c2 <xTaskGenericNotifyFromISR+0x40>
    35a0:	e6 2f       	mov	r30, r22
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	e8 0f       	add	r30, r24
    35ae:	f9 1f       	adc	r31, r25
    35b0:	87 a4       	ldd	r8, Z+47	; 0x2f
    35b2:	90 a8       	ldd	r9, Z+48	; 0x30
    35b4:	a1 a8       	ldd	r10, Z+49	; 0x31
    35b6:	b2 a8       	ldd	r11, Z+50	; 0x32
    35b8:	f7 01       	movw	r30, r14
    35ba:	80 82       	st	Z, r8
    35bc:	91 82       	std	Z+1, r9	; 0x01
    35be:	a2 82       	std	Z+2, r10	; 0x02
    35c0:	b3 82       	std	Z+3, r11	; 0x03
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	fd 01       	movw	r30, r26
    35c6:	e6 0f       	add	r30, r22
    35c8:	f7 1f       	adc	r31, r23
    35ca:	93 a9       	ldd	r25, Z+51	; 0x33
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	83 ab       	std	Z+51, r24	; 0x33
    35d0:	02 30       	cpi	r16, 0x02	; 2
    35d2:	01 f1       	breq	.+64     	; 0x3614 <xTaskGenericNotifyFromISR+0x92>
    35d4:	18 f4       	brcc	.+6      	; 0x35dc <xTaskGenericNotifyFromISR+0x5a>
    35d6:	01 30       	cpi	r16, 0x01	; 1
    35d8:	31 f0       	breq	.+12     	; 0x35e6 <xTaskGenericNotifyFromISR+0x64>
    35da:	4d c0       	rjmp	.+154    	; 0x3676 <xTaskGenericNotifyFromISR+0xf4>
    35dc:	03 30       	cpi	r16, 0x03	; 3
    35de:	79 f1       	breq	.+94     	; 0x363e <xTaskGenericNotifyFromISR+0xbc>
    35e0:	04 30       	cpi	r16, 0x04	; 4
    35e2:	d1 f1       	breq	.+116    	; 0x3658 <xTaskGenericNotifyFromISR+0xd6>
    35e4:	48 c0       	rjmp	.+144    	; 0x3676 <xTaskGenericNotifyFromISR+0xf4>
    35e6:	66 0f       	add	r22, r22
    35e8:	77 1f       	adc	r23, r23
    35ea:	66 0f       	add	r22, r22
    35ec:	77 1f       	adc	r23, r23
    35ee:	fd 01       	movw	r30, r26
    35f0:	e6 0f       	add	r30, r22
    35f2:	f7 1f       	adc	r31, r23
    35f4:	87 a4       	ldd	r8, Z+47	; 0x2f
    35f6:	90 a8       	ldd	r9, Z+48	; 0x30
    35f8:	a1 a8       	ldd	r10, Z+49	; 0x31
    35fa:	b2 a8       	ldd	r11, Z+50	; 0x32
    35fc:	ba 01       	movw	r22, r20
    35fe:	a9 01       	movw	r20, r18
    3600:	48 29       	or	r20, r8
    3602:	59 29       	or	r21, r9
    3604:	6a 29       	or	r22, r10
    3606:	7b 29       	or	r23, r11
    3608:	47 a7       	std	Z+47, r20	; 0x2f
    360a:	50 ab       	std	Z+48, r21	; 0x30
    360c:	61 ab       	std	Z+49, r22	; 0x31
    360e:	72 ab       	std	Z+50, r23	; 0x32
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	34 c0       	rjmp	.+104    	; 0x367c <xTaskGenericNotifyFromISR+0xfa>
    3614:	66 0f       	add	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	fd 01       	movw	r30, r26
    361e:	e6 0f       	add	r30, r22
    3620:	f7 1f       	adc	r31, r23
    3622:	47 a5       	ldd	r20, Z+47	; 0x2f
    3624:	50 a9       	ldd	r21, Z+48	; 0x30
    3626:	61 a9       	ldd	r22, Z+49	; 0x31
    3628:	72 a9       	ldd	r23, Z+50	; 0x32
    362a:	4f 5f       	subi	r20, 0xFF	; 255
    362c:	5f 4f       	sbci	r21, 0xFF	; 255
    362e:	6f 4f       	sbci	r22, 0xFF	; 255
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	47 a7       	std	Z+47, r20	; 0x2f
    3634:	50 ab       	std	Z+48, r21	; 0x30
    3636:	61 ab       	std	Z+49, r22	; 0x31
    3638:	72 ab       	std	Z+50, r23	; 0x32
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	1f c0       	rjmp	.+62     	; 0x367c <xTaskGenericNotifyFromISR+0xfa>
    363e:	66 0f       	add	r22, r22
    3640:	77 1f       	adc	r23, r23
    3642:	66 0f       	add	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	fd 01       	movw	r30, r26
    3648:	e6 0f       	add	r30, r22
    364a:	f7 1f       	adc	r31, r23
    364c:	27 a7       	std	Z+47, r18	; 0x2f
    364e:	30 ab       	std	Z+48, r19	; 0x30
    3650:	41 ab       	std	Z+49, r20	; 0x31
    3652:	52 ab       	std	Z+50, r21	; 0x32
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	12 c0       	rjmp	.+36     	; 0x367c <xTaskGenericNotifyFromISR+0xfa>
    3658:	92 30       	cpi	r25, 0x02	; 2
    365a:	79 f0       	breq	.+30     	; 0x367a <xTaskGenericNotifyFromISR+0xf8>
    365c:	66 0f       	add	r22, r22
    365e:	77 1f       	adc	r23, r23
    3660:	66 0f       	add	r22, r22
    3662:	77 1f       	adc	r23, r23
    3664:	fd 01       	movw	r30, r26
    3666:	e6 0f       	add	r30, r22
    3668:	f7 1f       	adc	r31, r23
    366a:	27 a7       	std	Z+47, r18	; 0x2f
    366c:	30 ab       	std	Z+48, r19	; 0x30
    366e:	41 ab       	std	Z+49, r20	; 0x31
    3670:	52 ab       	std	Z+50, r21	; 0x32
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	03 c0       	rjmp	.+6      	; 0x367c <xTaskGenericNotifyFromISR+0xfa>
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	01 c0       	rjmp	.+2      	; 0x367c <xTaskGenericNotifyFromISR+0xfa>
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	91 30       	cpi	r25, 0x01	; 1
    367e:	09 f0       	breq	.+2      	; 0x3682 <xTaskGenericNotifyFromISR+0x100>
    3680:	96 c0       	rjmp	.+300    	; 0x37ae <xTaskGenericNotifyFromISR+0x22c>
    3682:	90 91 75 12 	lds	r25, 0x1275	; 0x801275 <uxSchedulerSuspended>
    3686:	91 11       	cpse	r25, r1
    3688:	5f c0       	rjmp	.+190    	; 0x3748 <xTaskGenericNotifyFromISR+0x1c6>
    368a:	1c 96       	adiw	r26, 0x0c	; 12
    368c:	ed 91       	ld	r30, X+
    368e:	fc 91       	ld	r31, X
    3690:	1d 97       	sbiw	r26, 0x0d	; 13
    3692:	16 96       	adiw	r26, 0x06	; 6
    3694:	cd 91       	ld	r28, X+
    3696:	dc 91       	ld	r29, X
    3698:	17 97       	sbiw	r26, 0x07	; 7
    369a:	18 96       	adiw	r26, 0x08	; 8
    369c:	2d 91       	ld	r18, X+
    369e:	3c 91       	ld	r19, X
    36a0:	19 97       	sbiw	r26, 0x09	; 9
    36a2:	3f 83       	std	Y+7, r19	; 0x07
    36a4:	2e 83       	std	Y+6, r18	; 0x06
    36a6:	18 96       	adiw	r26, 0x08	; 8
    36a8:	cd 91       	ld	r28, X+
    36aa:	dc 91       	ld	r29, X
    36ac:	19 97       	sbiw	r26, 0x09	; 9
    36ae:	16 96       	adiw	r26, 0x06	; 6
    36b0:	2d 91       	ld	r18, X+
    36b2:	3c 91       	ld	r19, X
    36b4:	17 97       	sbiw	r26, 0x07	; 7
    36b6:	3d 83       	std	Y+5, r19	; 0x05
    36b8:	2c 83       	std	Y+4, r18	; 0x04
    36ba:	41 81       	ldd	r20, Z+1	; 0x01
    36bc:	52 81       	ldd	r21, Z+2	; 0x02
    36be:	9d 01       	movw	r18, r26
    36c0:	2e 5f       	subi	r18, 0xFE	; 254
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	42 17       	cp	r20, r18
    36c6:	53 07       	cpc	r21, r19
    36c8:	31 f4       	brne	.+12     	; 0x36d6 <xTaskGenericNotifyFromISR+0x154>
    36ca:	18 96       	adiw	r26, 0x08	; 8
    36cc:	4d 91       	ld	r20, X+
    36ce:	5c 91       	ld	r21, X
    36d0:	19 97       	sbiw	r26, 0x09	; 9
    36d2:	52 83       	std	Z+2, r21	; 0x02
    36d4:	41 83       	std	Z+1, r20	; 0x01
    36d6:	1d 96       	adiw	r26, 0x0d	; 13
    36d8:	1c 92       	st	X, r1
    36da:	1e 92       	st	-X, r1
    36dc:	1c 97       	sbiw	r26, 0x0c	; 12
    36de:	90 81       	ld	r25, Z
    36e0:	91 50       	subi	r25, 0x01	; 1
    36e2:	90 83       	st	Z, r25
    36e4:	5a 96       	adiw	r26, 0x1a	; 26
    36e6:	ec 91       	ld	r30, X
    36e8:	5a 97       	sbiw	r26, 0x1a	; 26
    36ea:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <uxTopReadyPriority>
    36ee:	9e 17       	cp	r25, r30
    36f0:	10 f4       	brcc	.+4      	; 0x36f6 <xTaskGenericNotifyFromISR+0x174>
    36f2:	e0 93 84 12 	sts	0x1284, r30	; 0x801284 <uxTopReadyPriority>
    36f6:	9b e0       	ldi	r25, 0x0B	; 11
    36f8:	9e 9f       	mul	r25, r30
    36fa:	f0 01       	movw	r30, r0
    36fc:	11 24       	eor	r1, r1
    36fe:	ea 53       	subi	r30, 0x3A	; 58
    3700:	fd 4e       	sbci	r31, 0xED	; 237
    3702:	01 80       	ldd	r0, Z+1	; 0x01
    3704:	f2 81       	ldd	r31, Z+2	; 0x02
    3706:	e0 2d       	mov	r30, r0
    3708:	17 96       	adiw	r26, 0x07	; 7
    370a:	fc 93       	st	X, r31
    370c:	ee 93       	st	-X, r30
    370e:	16 97       	sbiw	r26, 0x06	; 6
    3710:	46 81       	ldd	r20, Z+6	; 0x06
    3712:	57 81       	ldd	r21, Z+7	; 0x07
    3714:	19 96       	adiw	r26, 0x09	; 9
    3716:	5c 93       	st	X, r21
    3718:	4e 93       	st	-X, r20
    371a:	18 97       	sbiw	r26, 0x08	; 8
    371c:	c6 81       	ldd	r28, Z+6	; 0x06
    371e:	d7 81       	ldd	r29, Z+7	; 0x07
    3720:	3d 83       	std	Y+5, r19	; 0x05
    3722:	2c 83       	std	Y+4, r18	; 0x04
    3724:	37 83       	std	Z+7, r19	; 0x07
    3726:	26 83       	std	Z+6, r18	; 0x06
    3728:	5a 96       	adiw	r26, 0x1a	; 26
    372a:	ec 91       	ld	r30, X
    372c:	5a 97       	sbiw	r26, 0x1a	; 26
    372e:	9e 9f       	mul	r25, r30
    3730:	f0 01       	movw	r30, r0
    3732:	11 24       	eor	r1, r1
    3734:	ea 53       	subi	r30, 0x3A	; 58
    3736:	fd 4e       	sbci	r31, 0xED	; 237
    3738:	1d 96       	adiw	r26, 0x0d	; 13
    373a:	fc 93       	st	X, r31
    373c:	ee 93       	st	-X, r30
    373e:	1c 97       	sbiw	r26, 0x0c	; 12
    3740:	90 81       	ld	r25, Z
    3742:	9f 5f       	subi	r25, 0xFF	; 255
    3744:	90 83       	st	Z, r25
    3746:	21 c0       	rjmp	.+66     	; 0x378a <xTaskGenericNotifyFromISR+0x208>
    3748:	61 ea       	ldi	r22, 0xA1	; 161
    374a:	72 e1       	ldi	r23, 0x12	; 18
    374c:	fb 01       	movw	r30, r22
    374e:	c1 81       	ldd	r28, Z+1	; 0x01
    3750:	d2 81       	ldd	r29, Z+2	; 0x02
    3752:	53 96       	adiw	r26, 0x13	; 19
    3754:	dc 93       	st	X, r29
    3756:	ce 93       	st	-X, r28
    3758:	52 97       	sbiw	r26, 0x12	; 18
    375a:	2e 81       	ldd	r18, Y+6	; 0x06
    375c:	3f 81       	ldd	r19, Y+7	; 0x07
    375e:	55 96       	adiw	r26, 0x15	; 21
    3760:	3c 93       	st	X, r19
    3762:	2e 93       	st	-X, r18
    3764:	54 97       	sbiw	r26, 0x14	; 20
    3766:	4e 81       	ldd	r20, Y+6	; 0x06
    3768:	5f 81       	ldd	r21, Y+7	; 0x07
    376a:	9d 01       	movw	r18, r26
    376c:	22 5f       	subi	r18, 0xF2	; 242
    376e:	3f 4f       	sbci	r19, 0xFF	; 255
    3770:	fa 01       	movw	r30, r20
    3772:	35 83       	std	Z+5, r19	; 0x05
    3774:	24 83       	std	Z+4, r18	; 0x04
    3776:	3f 83       	std	Y+7, r19	; 0x07
    3778:	2e 83       	std	Y+6, r18	; 0x06
    377a:	59 96       	adiw	r26, 0x19	; 25
    377c:	7c 93       	st	X, r23
    377e:	6e 93       	st	-X, r22
    3780:	58 97       	sbiw	r26, 0x18	; 24
    3782:	fb 01       	movw	r30, r22
    3784:	90 81       	ld	r25, Z
    3786:	9f 5f       	subi	r25, 0xFF	; 255
    3788:	90 83       	st	Z, r25
    378a:	5a 96       	adiw	r26, 0x1a	; 26
    378c:	2c 91       	ld	r18, X
    378e:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <pxCurrentTCB>
    3792:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <pxCurrentTCB+0x1>
    3796:	92 8d       	ldd	r25, Z+26	; 0x1a
    3798:	92 17       	cp	r25, r18
    379a:	48 f4       	brcc	.+18     	; 0x37ae <xTaskGenericNotifyFromISR+0x22c>
    379c:	c1 14       	cp	r12, r1
    379e:	d1 04       	cpc	r13, r1
    37a0:	19 f0       	breq	.+6      	; 0x37a8 <xTaskGenericNotifyFromISR+0x226>
    37a2:	91 e0       	ldi	r25, 0x01	; 1
    37a4:	f6 01       	movw	r30, r12
    37a6:	90 83       	st	Z, r25
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	90 93 7e 12 	sts	0x127E, r25	; 0x80127e <xYieldPending>
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	9f 90       	pop	r9
    37c2:	8f 90       	pop	r8
    37c4:	08 95       	ret

000037c6 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    37c6:	00 97       	sbiw	r24, 0x00	; 0
    37c8:	21 f4       	brne	.+8      	; 0x37d2 <xTaskGenericNotifyStateClear+0xc>
    37ca:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <pxCurrentTCB>
    37ce:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	fc 01       	movw	r30, r24
    37dc:	e6 0f       	add	r30, r22
    37de:	f7 1f       	adc	r31, r23
    37e0:	23 a9       	ldd	r18, Z+51	; 0x33
    37e2:	22 30       	cpi	r18, 0x02	; 2
    37e4:	31 f4       	brne	.+12     	; 0x37f2 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    37e6:	fc 01       	movw	r30, r24
    37e8:	e6 0f       	add	r30, r22
    37ea:	f7 1f       	adc	r31, r23
    37ec:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	01 c0       	rjmp	.+2      	; 0x37f4 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    37f2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    37f4:	0f 90       	pop	r0
    37f6:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    37f8:	08 95       	ret

000037fa <prvGetNextExpireTime>:
    37fa:	dc 01       	movw	r26, r24
    37fc:	e0 91 40 13 	lds	r30, 0x1340	; 0x801340 <pxCurrentTimerList>
    3800:	f0 91 41 13 	lds	r31, 0x1341	; 0x801341 <pxCurrentTimerList+0x1>
    3804:	80 81       	ld	r24, Z
    3806:	91 e0       	ldi	r25, 0x01	; 1
    3808:	81 11       	cpse	r24, r1
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	9c 93       	st	X, r25
    380e:	91 11       	cpse	r25, r1
    3810:	08 c0       	rjmp	.+16     	; 0x3822 <prvGetNextExpireTime+0x28>
    3812:	07 80       	ldd	r0, Z+7	; 0x07
    3814:	f0 85       	ldd	r31, Z+8	; 0x08
    3816:	e0 2d       	mov	r30, r0
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	08 95       	ret
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	cb 01       	movw	r24, r22
    3828:	08 95       	ret

0000382a <prvInsertTimerInActiveList>:
    382a:	cf 92       	push	r12
    382c:	df 92       	push	r13
    382e:	ef 92       	push	r14
    3830:	ff 92       	push	r15
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	fc 01       	movw	r30, r24
    3838:	42 83       	std	Z+2, r20	; 0x02
    383a:	53 83       	std	Z+3, r21	; 0x03
    383c:	64 83       	std	Z+4, r22	; 0x04
    383e:	75 83       	std	Z+5, r23	; 0x05
    3840:	93 87       	std	Z+11, r25	; 0x0b
    3842:	82 87       	std	Z+10, r24	; 0x0a
    3844:	04 17       	cp	r16, r20
    3846:	15 07       	cpc	r17, r21
    3848:	26 07       	cpc	r18, r22
    384a:	37 07       	cpc	r19, r23
    384c:	c0 f0       	brcs	.+48     	; 0x387e <prvInsertTimerInActiveList+0x54>
    384e:	0c 19       	sub	r16, r12
    3850:	1d 09       	sbc	r17, r13
    3852:	2e 09       	sbc	r18, r14
    3854:	3f 09       	sbc	r19, r15
    3856:	86 85       	ldd	r24, Z+14	; 0x0e
    3858:	97 85       	ldd	r25, Z+15	; 0x0f
    385a:	a0 89       	ldd	r26, Z+16	; 0x10
    385c:	b1 89       	ldd	r27, Z+17	; 0x11
    385e:	08 17       	cp	r16, r24
    3860:	19 07       	cpc	r17, r25
    3862:	2a 07       	cpc	r18, r26
    3864:	3b 07       	cpc	r19, r27
    3866:	00 f5       	brcc	.+64     	; 0x38a8 <prvInsertTimerInActiveList+0x7e>
    3868:	bf 01       	movw	r22, r30
    386a:	6e 5f       	subi	r22, 0xFE	; 254
    386c:	7f 4f       	sbci	r23, 0xFF	; 255
    386e:	80 91 3e 13 	lds	r24, 0x133E	; 0x80133e <pxOverflowTimerList>
    3872:	90 91 3f 13 	lds	r25, 0x133F	; 0x80133f <pxOverflowTimerList+0x1>
    3876:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	18 c0       	rjmp	.+48     	; 0x38ae <prvInsertTimerInActiveList+0x84>
    387e:	0c 15       	cp	r16, r12
    3880:	1d 05       	cpc	r17, r13
    3882:	2e 05       	cpc	r18, r14
    3884:	3f 05       	cpc	r19, r15
    3886:	28 f4       	brcc	.+10     	; 0x3892 <prvInsertTimerInActiveList+0x68>
    3888:	4c 15       	cp	r20, r12
    388a:	5d 05       	cpc	r21, r13
    388c:	6e 05       	cpc	r22, r14
    388e:	7f 05       	cpc	r23, r15
    3890:	68 f4       	brcc	.+26     	; 0x38ac <prvInsertTimerInActiveList+0x82>
    3892:	bf 01       	movw	r22, r30
    3894:	6e 5f       	subi	r22, 0xFE	; 254
    3896:	7f 4f       	sbci	r23, 0xFF	; 255
    3898:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <pxCurrentTimerList>
    389c:	90 91 41 13 	lds	r25, 0x1341	; 0x801341 <pxCurrentTimerList+0x1>
    38a0:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <prvInsertTimerInActiveList+0x84>
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	01 c0       	rjmp	.+2      	; 0x38ae <prvInsertTimerInActiveList+0x84>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	df 90       	pop	r13
    38b8:	cf 90       	pop	r12
    38ba:	08 95       	ret

000038bc <prvCheckForValidListAndQueue>:
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	0f 92       	push	r0
    38c2:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    38c6:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    38ca:	89 2b       	or	r24, r25
    38cc:	e9 f4       	brne	.+58     	; 0x3908 <prvCheckForValidListAndQueue+0x4c>
    38ce:	8d e4       	ldi	r24, 0x4D	; 77
    38d0:	93 e1       	ldi	r25, 0x13	; 19
    38d2:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    38d6:	82 e4       	ldi	r24, 0x42	; 66
    38d8:	93 e1       	ldi	r25, 0x13	; 19
    38da:	0e 94 12 07 	call	0xe24	; 0xe24 <vListInitialise>
    38de:	8d e4       	ldi	r24, 0x4D	; 77
    38e0:	93 e1       	ldi	r25, 0x13	; 19
    38e2:	90 93 41 13 	sts	0x1341, r25	; 0x801341 <pxCurrentTimerList+0x1>
    38e6:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <pxCurrentTimerList>
    38ea:	82 e4       	ldi	r24, 0x42	; 66
    38ec:	93 e1       	ldi	r25, 0x13	; 19
    38ee:	90 93 3f 13 	sts	0x133F, r25	; 0x80133f <pxOverflowTimerList+0x1>
    38f2:	80 93 3e 13 	sts	0x133E, r24	; 0x80133e <pxOverflowTimerList>
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	67 e0       	ldi	r22, 0x07	; 7
    38fa:	8a e0       	ldi	r24, 0x0A	; 10
    38fc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xQueueGenericCreate>
    3900:	90 93 3d 13 	sts	0x133D, r25	; 0x80133d <xTimerQueue+0x1>
    3904:	80 93 3c 13 	sts	0x133C, r24	; 0x80133c <xTimerQueue>
    3908:	0f 90       	pop	r0
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	08 95       	ret

0000390e <xTimerCreateTimerTask>:
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	0f 93       	push	r16
    3914:	d3 df       	rcall	.-90     	; 0x38bc <prvCheckForValidListAndQueue>
    3916:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    391a:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    391e:	89 2b       	or	r24, r25
    3920:	91 f0       	breq	.+36     	; 0x3946 <xTimerCreateTimerTask+0x38>
    3922:	0f 2e       	mov	r0, r31
    3924:	fa e3       	ldi	r31, 0x3A	; 58
    3926:	ef 2e       	mov	r14, r31
    3928:	f3 e1       	ldi	r31, 0x13	; 19
    392a:	ff 2e       	mov	r15, r31
    392c:	f0 2d       	mov	r31, r0
    392e:	03 e0       	ldi	r16, 0x03	; 3
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 ec       	ldi	r20, 0xC0	; 192
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	6f e2       	ldi	r22, 0x2F	; 47
    393a:	73 e0       	ldi	r23, 0x03	; 3
    393c:	88 e5       	ldi	r24, 0x58	; 88
    393e:	91 e0       	ldi	r25, 0x01	; 1
    3940:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <xTimerCreateTimerTask+0x3a>
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	0f 91       	pop	r16
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	08 95       	ret

00003950 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3950:	8f 92       	push	r8
    3952:	9f 92       	push	r9
    3954:	af 92       	push	r10
    3956:	bf 92       	push	r11
    3958:	cf 92       	push	r12
    395a:	df 92       	push	r13
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	27 97       	sbiw	r28, 0x07	; 7
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3978:	e0 91 3c 13 	lds	r30, 0x133C	; 0x80133c <xTimerQueue>
    397c:	f0 91 3d 13 	lds	r31, 0x133D	; 0x80133d <xTimerQueue+0x1>
    3980:	30 97       	sbiw	r30, 0x00	; 0
    3982:	81 f1       	breq	.+96     	; 0x39e4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3984:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3986:	2a 83       	std	Y+2, r18	; 0x02
    3988:	3b 83       	std	Y+3, r19	; 0x03
    398a:	4c 83       	std	Y+4, r20	; 0x04
    398c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    398e:	9f 83       	std	Y+7, r25	; 0x07
    3990:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3992:	66 30       	cpi	r22, 0x06	; 6
    3994:	f4 f4       	brge	.+60     	; 0x39d2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3996:	c3 da       	rcall	.-2682   	; 0x2f1e <xTaskGetSchedulerState>
    3998:	82 30       	cpi	r24, 0x02	; 2
    399a:	69 f4       	brne	.+26     	; 0x39b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    399c:	00 e0       	ldi	r16, 0x00	; 0
    399e:	a7 01       	movw	r20, r14
    39a0:	96 01       	movw	r18, r12
    39a2:	be 01       	movw	r22, r28
    39a4:	6f 5f       	subi	r22, 0xFF	; 255
    39a6:	7f 4f       	sbci	r23, 0xFF	; 255
    39a8:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    39ac:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    39b0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xQueueGenericSend>
    39b4:	18 c0       	rjmp	.+48     	; 0x39e6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39b6:	00 e0       	ldi	r16, 0x00	; 0
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	a9 01       	movw	r20, r18
    39be:	be 01       	movw	r22, r28
    39c0:	6f 5f       	subi	r22, 0xFF	; 255
    39c2:	7f 4f       	sbci	r23, 0xFF	; 255
    39c4:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    39c8:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    39cc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xQueueGenericSend>
    39d0:	0a c0       	rjmp	.+20     	; 0x39e6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	a8 01       	movw	r20, r16
    39d6:	be 01       	movw	r22, r28
    39d8:	6f 5f       	subi	r22, 0xFF	; 255
    39da:	7f 4f       	sbci	r23, 0xFF	; 255
    39dc:	cf 01       	movw	r24, r30
    39de:	0e 94 a8 0a 	call	0x1550	; 0x1550 <xQueueGenericSendFromISR>
    39e2:	01 c0       	rjmp	.+2      	; 0x39e6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    39e4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    39e6:	27 96       	adiw	r28, 0x07	; 7
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	f8 94       	cli
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	1f 91       	pop	r17
    39f8:	0f 91       	pop	r16
    39fa:	ff 90       	pop	r15
    39fc:	ef 90       	pop	r14
    39fe:	df 90       	pop	r13
    3a00:	cf 90       	pop	r12
    3a02:	bf 90       	pop	r11
    3a04:	af 90       	pop	r10
    3a06:	9f 90       	pop	r9
    3a08:	8f 90       	pop	r8
    3a0a:	08 95       	ret

00003a0c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3a0c:	8f 92       	push	r8
    3a0e:	9f 92       	push	r9
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	cf 92       	push	r12
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a24:	3b c0       	rjmp	.+118    	; 0x3a9c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a26:	07 80       	ldd	r0, Z+7	; 0x07
    3a28:	f0 85       	ldd	r31, Z+8	; 0x08
    3a2a:	e0 2d       	mov	r30, r0
    3a2c:	80 80       	ld	r8, Z
    3a2e:	91 80       	ldd	r9, Z+1	; 0x01
    3a30:	a2 80       	ldd	r10, Z+2	; 0x02
    3a32:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a34:	c0 85       	ldd	r28, Z+8	; 0x08
    3a36:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a38:	8e 01       	movw	r16, r28
    3a3a:	0e 5f       	subi	r16, 0xFE	; 254
    3a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3e:	c8 01       	movw	r24, r16
    3a40:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a44:	ec 89       	ldd	r30, Y+20	; 0x14
    3a46:	fd 89       	ldd	r31, Y+21	; 0x15
    3a48:	ce 01       	movw	r24, r28
    3a4a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a4c:	8e 89       	ldd	r24, Y+22	; 0x16
    3a4e:	82 ff       	sbrs	r24, 2
    3a50:	25 c0       	rjmp	.+74     	; 0x3a9c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a52:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a54:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a56:	a8 89       	ldd	r26, Y+16	; 0x10
    3a58:	b9 89       	ldd	r27, Y+17	; 0x11
    3a5a:	88 0d       	add	r24, r8
    3a5c:	99 1d       	adc	r25, r9
    3a5e:	aa 1d       	adc	r26, r10
    3a60:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3a62:	88 16       	cp	r8, r24
    3a64:	99 06       	cpc	r9, r25
    3a66:	aa 06       	cpc	r10, r26
    3a68:	bb 06       	cpc	r11, r27
    3a6a:	70 f4       	brcc	.+28     	; 0x3a88 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a6c:	8a 83       	std	Y+2, r24	; 0x02
    3a6e:	9b 83       	std	Y+3, r25	; 0x03
    3a70:	ac 83       	std	Y+4, r26	; 0x04
    3a72:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a74:	db 87       	std	Y+11, r29	; 0x0b
    3a76:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3a78:	b8 01       	movw	r22, r16
    3a7a:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <pxCurrentTimerList>
    3a7e:	90 91 41 13 	lds	r25, 0x1341	; 0x801341 <pxCurrentTimerList+0x1>
    3a82:	0e 94 27 07 	call	0xe4e	; 0xe4e <vListInsert>
    3a86:	0a c0       	rjmp	.+20     	; 0x3a9c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a88:	c1 2c       	mov	r12, r1
    3a8a:	d1 2c       	mov	r13, r1
    3a8c:	76 01       	movw	r14, r12
    3a8e:	00 e0       	ldi	r16, 0x00	; 0
    3a90:	10 e0       	ldi	r17, 0x00	; 0
    3a92:	a5 01       	movw	r20, r10
    3a94:	94 01       	movw	r18, r8
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	ce 01       	movw	r24, r28
    3a9a:	5a df       	rcall	.-332    	; 0x3950 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a9c:	e0 91 40 13 	lds	r30, 0x1340	; 0x801340 <pxCurrentTimerList>
    3aa0:	f0 91 41 13 	lds	r31, 0x1341	; 0x801341 <pxCurrentTimerList+0x1>
    3aa4:	80 81       	ld	r24, Z
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	be cf       	rjmp	.-132    	; 0x3a26 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3aaa:	80 91 3e 13 	lds	r24, 0x133E	; 0x80133e <pxOverflowTimerList>
    3aae:	90 91 3f 13 	lds	r25, 0x133F	; 0x80133f <pxOverflowTimerList+0x1>
    3ab2:	90 93 41 13 	sts	0x1341, r25	; 0x801341 <pxCurrentTimerList+0x1>
    3ab6:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3aba:	f0 93 3f 13 	sts	0x133F, r31	; 0x80133f <pxOverflowTimerList+0x1>
    3abe:	e0 93 3e 13 	sts	0x133E, r30	; 0x80133e <pxOverflowTimerList>
    }
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	df 90       	pop	r13
    3ad0:	cf 90       	pop	r12
    3ad2:	bf 90       	pop	r11
    3ad4:	af 90       	pop	r10
    3ad6:	9f 90       	pop	r9
    3ad8:	8f 90       	pop	r8
    3ada:	08 95       	ret

00003adc <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3aea:	0e 94 12 12 	call	0x2424	; 0x2424 <xTaskGetTickCount>
    3aee:	6b 01       	movw	r12, r22
    3af0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3af2:	80 91 36 13 	lds	r24, 0x1336	; 0x801336 <xLastTime.2436>
    3af6:	90 91 37 13 	lds	r25, 0x1337	; 0x801337 <xLastTime.2436+0x1>
    3afa:	a0 91 38 13 	lds	r26, 0x1338	; 0x801338 <xLastTime.2436+0x2>
    3afe:	b0 91 39 13 	lds	r27, 0x1339	; 0x801339 <xLastTime.2436+0x3>
    3b02:	c8 16       	cp	r12, r24
    3b04:	d9 06       	cpc	r13, r25
    3b06:	ea 06       	cpc	r14, r26
    3b08:	fb 06       	cpc	r15, r27
    3b0a:	20 f4       	brcc	.+8      	; 0x3b14 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3b0c:	7f df       	rcall	.-258    	; 0x3a0c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	88 83       	st	Y, r24
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3b14:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3b16:	c0 92 36 13 	sts	0x1336, r12	; 0x801336 <xLastTime.2436>
    3b1a:	d0 92 37 13 	sts	0x1337, r13	; 0x801337 <xLastTime.2436+0x1>
    3b1e:	e0 92 38 13 	sts	0x1338, r14	; 0x801338 <xLastTime.2436+0x2>
    3b22:	f0 92 39 13 	sts	0x1339, r15	; 0x801339 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3b26:	c7 01       	movw	r24, r14
    3b28:	b6 01       	movw	r22, r12
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	ff 90       	pop	r15
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	08 95       	ret

00003b38 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3b38:	4f 92       	push	r4
    3b3a:	5f 92       	push	r5
    3b3c:	6f 92       	push	r6
    3b3e:	7f 92       	push	r7
    3b40:	8f 92       	push	r8
    3b42:	9f 92       	push	r9
    3b44:	af 92       	push	r10
    3b46:	bf 92       	push	r11
    3b48:	cf 92       	push	r12
    3b4a:	df 92       	push	r13
    3b4c:	ef 92       	push	r14
    3b4e:	ff 92       	push	r15
    3b50:	0f 93       	push	r16
    3b52:	1f 93       	push	r17
    3b54:	cf 93       	push	r28
    3b56:	df 93       	push	r29
    3b58:	4b 01       	movw	r8, r22
    3b5a:	5c 01       	movw	r10, r24
    3b5c:	29 01       	movw	r4, r18
    3b5e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b60:	e0 91 40 13 	lds	r30, 0x1340	; 0x801340 <pxCurrentTimerList>
    3b64:	f0 91 41 13 	lds	r31, 0x1341	; 0x801341 <pxCurrentTimerList+0x1>
    3b68:	07 80       	ldd	r0, Z+7	; 0x07
    3b6a:	f0 85       	ldd	r31, Z+8	; 0x08
    3b6c:	e0 2d       	mov	r30, r0
    3b6e:	c0 85       	ldd	r28, Z+8	; 0x08
    3b70:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b72:	ce 01       	movw	r24, r28
    3b74:	02 96       	adiw	r24, 0x02	; 2
    3b76:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b7a:	8e 89       	ldd	r24, Y+22	; 0x16
    3b7c:	82 ff       	sbrs	r24, 2
    3b7e:	1b c0       	rjmp	.+54     	; 0x3bb6 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3b80:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b82:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b84:	68 89       	ldd	r22, Y+16	; 0x10
    3b86:	79 89       	ldd	r23, Y+17	; 0x11
    3b88:	48 0d       	add	r20, r8
    3b8a:	59 1d       	adc	r21, r9
    3b8c:	6a 1d       	adc	r22, r10
    3b8e:	7b 1d       	adc	r23, r11
    3b90:	75 01       	movw	r14, r10
    3b92:	64 01       	movw	r12, r8
    3b94:	93 01       	movw	r18, r6
    3b96:	82 01       	movw	r16, r4
    3b98:	ce 01       	movw	r24, r28
    3b9a:	47 de       	rcall	.-882    	; 0x382a <prvInsertTimerInActiveList>
    3b9c:	88 23       	and	r24, r24
    3b9e:	69 f0       	breq	.+26     	; 0x3bba <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3ba0:	c1 2c       	mov	r12, r1
    3ba2:	d1 2c       	mov	r13, r1
    3ba4:	76 01       	movw	r14, r12
    3ba6:	00 e0       	ldi	r16, 0x00	; 0
    3ba8:	10 e0       	ldi	r17, 0x00	; 0
    3baa:	a5 01       	movw	r20, r10
    3bac:	94 01       	movw	r18, r8
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	ce de       	rcall	.-612    	; 0x3950 <xTimerGenericCommand>
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bb6:	8e 7f       	andi	r24, 0xFE	; 254
    3bb8:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bba:	ec 89       	ldd	r30, Y+20	; 0x14
    3bbc:	fd 89       	ldd	r31, Y+21	; 0x15
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	19 95       	eicall
    }
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	df 90       	pop	r13
    3bd0:	cf 90       	pop	r12
    3bd2:	bf 90       	pop	r11
    3bd4:	af 90       	pop	r10
    3bd6:	9f 90       	pop	r9
    3bd8:	8f 90       	pop	r8
    3bda:	7f 90       	pop	r7
    3bdc:	6f 90       	pop	r6
    3bde:	5f 90       	pop	r5
    3be0:	4f 90       	pop	r4
    3be2:	08 95       	ret

00003be4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3be4:	8f 92       	push	r8
    3be6:	9f 92       	push	r9
    3be8:	af 92       	push	r10
    3bea:	bf 92       	push	r11
    3bec:	cf 92       	push	r12
    3bee:	df 92       	push	r13
    3bf0:	ef 92       	push	r14
    3bf2:	ff 92       	push	r15
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	1f 92       	push	r1
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	6b 01       	movw	r12, r22
    3c02:	7c 01       	movw	r14, r24
    3c04:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3c06:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	66 df       	rcall	.-308    	; 0x3adc <prvSampleTimeNow>
    3c10:	4b 01       	movw	r8, r22
    3c12:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	81 11       	cpse	r24, r1
    3c18:	2d c0       	rjmp	.+90     	; 0x3c74 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c1a:	11 11       	cpse	r17, r1
    3c1c:	0d c0       	rjmp	.+26     	; 0x3c38 <prvProcessTimerOrBlockTask+0x54>
    3c1e:	8c 14       	cp	r8, r12
    3c20:	9d 04       	cpc	r9, r13
    3c22:	ae 04       	cpc	r10, r14
    3c24:	bf 04       	cpc	r11, r15
    3c26:	40 f0       	brcs	.+16     	; 0x3c38 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3c28:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c2c:	a5 01       	movw	r20, r10
    3c2e:	94 01       	movw	r18, r8
    3c30:	c7 01       	movw	r24, r14
    3c32:	b6 01       	movw	r22, r12
    3c34:	81 df       	rcall	.-254    	; 0x3b38 <prvProcessExpiredTimer>
    3c36:	20 c0       	rjmp	.+64     	; 0x3c78 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3c38:	11 23       	and	r17, r17
    3c3a:	41 f0       	breq	.+16     	; 0x3c4c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c3c:	e0 91 3e 13 	lds	r30, 0x133E	; 0x80133e <pxOverflowTimerList>
    3c40:	f0 91 3f 13 	lds	r31, 0x133F	; 0x80133f <pxOverflowTimerList+0x1>
    3c44:	80 81       	ld	r24, Z
    3c46:	11 e0       	ldi	r17, 0x01	; 1
    3c48:	81 11       	cpse	r24, r1
    3c4a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3c4c:	b7 01       	movw	r22, r14
    3c4e:	a6 01       	movw	r20, r12
    3c50:	48 19       	sub	r20, r8
    3c52:	59 09       	sbc	r21, r9
    3c54:	6a 09       	sbc	r22, r10
    3c56:	7b 09       	sbc	r23, r11
    3c58:	21 2f       	mov	r18, r17
    3c5a:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    3c5e:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    3c62:	0e 94 23 0c 	call	0x1846	; 0x1846 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3c66:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
    3c6a:	81 11       	cpse	r24, r1
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3c6e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3c74:	0e 94 4c 13 	call	0x2698	; 0x2698 <xTaskResumeAll>
            }
        }
    }
    3c78:	0f 90       	pop	r0
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	ff 90       	pop	r15
    3c82:	ef 90       	pop	r14
    3c84:	df 90       	pop	r13
    3c86:	cf 90       	pop	r12
    3c88:	bf 90       	pop	r11
    3c8a:	af 90       	pop	r10
    3c8c:	9f 90       	pop	r9
    3c8e:	8f 90       	pop	r8
    3c90:	08 95       	ret

00003c92 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3c92:	af 92       	push	r10
    3c94:	bf 92       	push	r11
    3c96:	cf 92       	push	r12
    3c98:	df 92       	push	r13
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	28 97       	sbiw	r28, 0x08	; 8
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	de bf       	out	0x3e, r29	; 62
    3cb2:	0f be       	out	0x3f, r0	; 63
    3cb4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3cb6:	82 c0       	rjmp	.+260    	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	88 23       	and	r24, r24
    3cbc:	0c f4       	brge	.+2      	; 0x3cc0 <prvProcessReceivedCommands+0x2e>
    3cbe:	7e c0       	rjmp	.+252    	; 0x3dbc <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3cc0:	ae 80       	ldd	r10, Y+6	; 0x06
    3cc2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3cc4:	d5 01       	movw	r26, r10
    3cc6:	1c 96       	adiw	r26, 0x0c	; 12
    3cc8:	8d 91       	ld	r24, X+
    3cca:	9c 91       	ld	r25, X
    3ccc:	1d 97       	sbiw	r26, 0x0d	; 13
    3cce:	89 2b       	or	r24, r25
    3cd0:	21 f0       	breq	.+8      	; 0x3cda <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3cd2:	c5 01       	movw	r24, r10
    3cd4:	02 96       	adiw	r24, 0x02	; 2
    3cd6:	0e 94 64 07 	call	0xec8	; 0xec8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3cda:	ce 01       	movw	r24, r28
    3cdc:	08 96       	adiw	r24, 0x08	; 8
    3cde:	fe de       	rcall	.-516    	; 0x3adc <prvSampleTimeNow>
    3ce0:	8b 01       	movw	r16, r22
    3ce2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce6:	0e 2e       	mov	r0, r30
    3ce8:	00 0c       	add	r0, r0
    3cea:	ff 0b       	sbc	r31, r31
    3cec:	ea 30       	cpi	r30, 0x0A	; 10
    3cee:	f1 05       	cpc	r31, r1
    3cf0:	08 f0       	brcs	.+2      	; 0x3cf4 <prvProcessReceivedCommands+0x62>
    3cf2:	64 c0       	rjmp	.+200    	; 0x3dbc <prvProcessReceivedCommands+0x12a>
    3cf4:	88 27       	eor	r24, r24
    3cf6:	ee 58       	subi	r30, 0x8E	; 142
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    3cfc:	0c 94 d5 2f 	jmp	0x5faa	; 0x5faa <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3d00:	f5 01       	movw	r30, r10
    3d02:	86 89       	ldd	r24, Z+22	; 0x16
    3d04:	81 60       	ori	r24, 0x01	; 1
    3d06:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3d08:	ca 80       	ldd	r12, Y+2	; 0x02
    3d0a:	db 80       	ldd	r13, Y+3	; 0x03
    3d0c:	ec 80       	ldd	r14, Y+4	; 0x04
    3d0e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d10:	46 85       	ldd	r20, Z+14	; 0x0e
    3d12:	57 85       	ldd	r21, Z+15	; 0x0f
    3d14:	60 89       	ldd	r22, Z+16	; 0x10
    3d16:	71 89       	ldd	r23, Z+17	; 0x11
    3d18:	4c 0d       	add	r20, r12
    3d1a:	5d 1d       	adc	r21, r13
    3d1c:	6e 1d       	adc	r22, r14
    3d1e:	7f 1d       	adc	r23, r15
    3d20:	c5 01       	movw	r24, r10
    3d22:	83 dd       	rcall	.-1274   	; 0x382a <prvInsertTimerInActiveList>
    3d24:	88 23       	and	r24, r24
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <prvProcessReceivedCommands+0x98>
    3d28:	49 c0       	rjmp	.+146    	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3d2a:	d5 01       	movw	r26, r10
    3d2c:	54 96       	adiw	r26, 0x14	; 20
    3d2e:	ed 91       	ld	r30, X+
    3d30:	fc 91       	ld	r31, X
    3d32:	55 97       	sbiw	r26, 0x15	; 21
    3d34:	c5 01       	movw	r24, r10
    3d36:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3d38:	f5 01       	movw	r30, r10
    3d3a:	86 89       	ldd	r24, Z+22	; 0x16
    3d3c:	82 ff       	sbrs	r24, 2
    3d3e:	3e c0       	rjmp	.+124    	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3d40:	4a 81       	ldd	r20, Y+2	; 0x02
    3d42:	5b 81       	ldd	r21, Y+3	; 0x03
    3d44:	6c 81       	ldd	r22, Y+4	; 0x04
    3d46:	7d 81       	ldd	r23, Y+5	; 0x05
    3d48:	86 85       	ldd	r24, Z+14	; 0x0e
    3d4a:	97 85       	ldd	r25, Z+15	; 0x0f
    3d4c:	a0 89       	ldd	r26, Z+16	; 0x10
    3d4e:	b1 89       	ldd	r27, Z+17	; 0x11
    3d50:	9a 01       	movw	r18, r20
    3d52:	ab 01       	movw	r20, r22
    3d54:	28 0f       	add	r18, r24
    3d56:	39 1f       	adc	r19, r25
    3d58:	4a 1f       	adc	r20, r26
    3d5a:	5b 1f       	adc	r21, r27
    3d5c:	c1 2c       	mov	r12, r1
    3d5e:	d1 2c       	mov	r13, r1
    3d60:	76 01       	movw	r14, r12
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	c5 01       	movw	r24, r10
    3d6a:	f2 dd       	rcall	.-1052   	; 0x3950 <xTimerGenericCommand>
    3d6c:	27 c0       	rjmp	.+78     	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3d6e:	d5 01       	movw	r26, r10
    3d70:	56 96       	adiw	r26, 0x16	; 22
    3d72:	8c 91       	ld	r24, X
    3d74:	56 97       	sbiw	r26, 0x16	; 22
    3d76:	8e 7f       	andi	r24, 0xFE	; 254
    3d78:	56 96       	adiw	r26, 0x16	; 22
    3d7a:	8c 93       	st	X, r24
                        break;
    3d7c:	1f c0       	rjmp	.+62     	; 0x3dbc <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3d7e:	f5 01       	movw	r30, r10
    3d80:	86 89       	ldd	r24, Z+22	; 0x16
    3d82:	81 60       	ori	r24, 0x01	; 1
    3d84:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3d86:	4a 81       	ldd	r20, Y+2	; 0x02
    3d88:	5b 81       	ldd	r21, Y+3	; 0x03
    3d8a:	6c 81       	ldd	r22, Y+4	; 0x04
    3d8c:	7d 81       	ldd	r23, Y+5	; 0x05
    3d8e:	46 87       	std	Z+14, r20	; 0x0e
    3d90:	57 87       	std	Z+15, r21	; 0x0f
    3d92:	60 8b       	std	Z+16, r22	; 0x10
    3d94:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3d96:	40 0f       	add	r20, r16
    3d98:	51 1f       	adc	r21, r17
    3d9a:	62 1f       	adc	r22, r18
    3d9c:	73 1f       	adc	r23, r19
    3d9e:	68 01       	movw	r12, r16
    3da0:	79 01       	movw	r14, r18
    3da2:	c5 01       	movw	r24, r10
    3da4:	42 dd       	rcall	.-1404   	; 0x382a <prvInsertTimerInActiveList>
                        break;
    3da6:	0a c0       	rjmp	.+20     	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3da8:	f5 01       	movw	r30, r10
    3daa:	86 89       	ldd	r24, Z+22	; 0x16
    3dac:	81 fd       	sbrc	r24, 1
    3dae:	04 c0       	rjmp	.+8      	; 0x3db8 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3db0:	c5 01       	movw	r24, r10
    3db2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <vPortFree>
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3db8:	8e 7f       	andi	r24, 0xFE	; 254
    3dba:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	a9 01       	movw	r20, r18
    3dc2:	be 01       	movw	r22, r28
    3dc4:	6f 5f       	subi	r22, 0xFF	; 255
    3dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc8:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <xTimerQueue>
    3dcc:	90 91 3d 13 	lds	r25, 0x133D	; 0x80133d <xTimerQueue+0x1>
    3dd0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <xQueueReceive>
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	70 cf       	rjmp	.-288    	; 0x3cb8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3dd8:	28 96       	adiw	r28, 0x08	; 8
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	df 90       	pop	r13
    3df2:	cf 90       	pop	r12
    3df4:	bf 90       	pop	r11
    3df6:	af 90       	pop	r10
    3df8:	08 95       	ret

00003dfa <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3dfa:	08 95       	ret

00003dfc <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3dfc:	84 b1       	in	r24, 0x04	; 4
    3dfe:	80 68       	ori	r24, 0x80	; 128
    3e00:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3e02:	85 b1       	in	r24, 0x05	; 5
    3e04:	80 68       	ori	r24, 0x80	; 128
    3e06:	85 b9       	out	0x05, r24	; 5
    3e08:	08 95       	ret

00003e0a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3e0a:	83 b1       	in	r24, 0x03	; 3
    3e0c:	80 68       	ori	r24, 0x80	; 128
    3e0e:	83 b9       	out	0x03, r24	; 3
    3e10:	08 95       	ret

00003e12 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3e12:	f4 df       	rcall	.-24     	; 0x3dfc <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e14:	2f ef       	ldi	r18, 0xFF	; 255
    3e16:	80 e7       	ldi	r24, 0x70	; 112
    3e18:	92 e0       	ldi	r25, 0x02	; 2
    3e1a:	21 50       	subi	r18, 0x01	; 1
    3e1c:	80 40       	sbci	r24, 0x00	; 0
    3e1e:	90 40       	sbci	r25, 0x00	; 0
    3e20:	e1 f7       	brne	.-8      	; 0x3e1a <vApplicationMallocFailedHook+0x8>
    3e22:	00 c0       	rjmp	.+0      	; 0x3e24 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3e24:	00 00       	nop
    3e26:	f1 df       	rcall	.-30     	; 0x3e0a <prvBlinkMainLed>
    3e28:	f5 cf       	rjmp	.-22     	; 0x3e14 <vApplicationMallocFailedHook+0x2>

00003e2a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3e2a:	e8 df       	rcall	.-48     	; 0x3dfc <prvSetMainLedOn>
    3e2c:	2f ef       	ldi	r18, 0xFF	; 255
    3e2e:	87 ea       	ldi	r24, 0xA7	; 167
    3e30:	91 e6       	ldi	r25, 0x61	; 97
    3e32:	21 50       	subi	r18, 0x01	; 1
    3e34:	80 40       	sbci	r24, 0x00	; 0
    3e36:	90 40       	sbci	r25, 0x00	; 0
    3e38:	e1 f7       	brne	.-8      	; 0x3e32 <vApplicationStackOverflowHook+0x8>
    3e3a:	00 c0       	rjmp	.+0      	; 0x3e3c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3e3c:	00 00       	nop
    3e3e:	e5 df       	rcall	.-54     	; 0x3e0a <prvBlinkMainLed>
    3e40:	f5 cf       	rjmp	.-22     	; 0x3e2c <vApplicationStackOverflowHook+0x2>

00003e42 <set_temperature_percent>:
static uint16_t humidityPercent = 0;
static uint16_t CO2_PPM = 0;
static uint8_t status = 0;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3e42:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <temperaturePercent+0x1>
    3e46:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <temperaturePercent>
    3e4a:	08 95       	ret

00003e4c <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3e4c:	90 93 5c 13 	sts	0x135C, r25	; 0x80135c <humidityPercent+0x1>
    3e50:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <humidityPercent>
    3e54:	08 95       	ret

00003e56 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3e56:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <CO2_PPM+0x1>
    3e5a:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <CO2_PPM>
    3e5e:	08 95       	ret

00003e60 <set_status>:
}

void set_status(uint8_t stat){
	status = stat;
    3e60:	80 93 58 13 	sts	0x1358, r24	; 0x801358 <status>
    3e64:	08 95       	ret

00003e66 <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3e66:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3e68:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3e6a:	87 e0       	ldi	r24, 0x07	; 7
    3e6c:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3e6e:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <temperaturePercent>
    3e72:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <temperaturePercent+0x1>
    3e76:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3e78:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3e7a:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <humidityPercent>
    3e7e:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <humidityPercent+0x1>
    3e82:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3e84:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3e86:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <CO2_PPM>
    3e8a:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <CO2_PPM+0x1>
    3e8e:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3e90:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3e92:	80 91 58 13 	lds	r24, 0x1358	; 0x801358 <status>
    3e96:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3e98:	cf 01       	movw	r24, r30
    3e9a:	08 95       	ret

00003e9c <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3e9c:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <lastCO2ppm+0x1>
    3ea0:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <lastCO2ppm>
    3ea4:	08 95       	ret

00003ea6 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3ea6:	83 e0       	ldi	r24, 0x03	; 3
    3ea8:	59 d3       	rcall	.+1714   	; 0x455c <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3eaa:	8e e4       	ldi	r24, 0x4E	; 78
    3eac:	9f e1       	ldi	r25, 0x1F	; 31
    3eae:	7b c3       	rjmp	.+1782   	; 0x45a6 <mh_z19_injectCallBack>
    3eb0:	08 95       	ret

00003eb2 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3eb2:	7e d3       	rcall	.+1788   	; 0x45b0 <mh_z19_takeMeassuring>
    3eb4:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <rc>
	if (rc != MHZ19_OK)
    3eb8:	88 23       	and	r24, r24
    3eba:	41 f0       	breq	.+16     	; 0x3ecc <CO2_measure+0x1a>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3ebc:	87 e3       	ldi	r24, 0x37	; 55
    3ebe:	93 e0       	ldi	r25, 0x03	; 3
    3ec0:	9f 93       	push	r25
    3ec2:	8f 93       	push	r24
    3ec4:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3ecc:	8f e5       	ldi	r24, 0x5F	; 95
    3ece:	93 e1       	ldi	r25, 0x13	; 19
    3ed0:	9e d3       	rcall	.+1852   	; 0x460e <mh_z19_getCo2Ppm>
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <lastCO2ppm+0x1>
    3ed8:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <lastCO2ppm>
    3edc:	08 95       	ret

00003ede <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3ede:	cc 24       	eor	r12, r12
    3ee0:	ca 94       	dec	r12
    3ee2:	dc 2c       	mov	r13, r12
    3ee4:	76 01       	movw	r14, r12
    3ee6:	01 e0       	ldi	r16, 0x01	; 1
    3ee8:	21 e0       	ldi	r18, 0x01	; 1
    3eea:	41 e0       	ldi	r20, 0x01	; 1
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <measureEventGroup>
    3ef6:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <measureEventGroup+0x1>
    3efa:	0e 94 8b 04 	call	0x916	; 0x916 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3efe:	60 ff       	sbrs	r22, 0
    3f00:	ee cf       	rjmp	.-36     	; 0x3ede <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3f02:	d7 df       	rcall	.-82     	; 0x3eb2 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3f04:	42 e0       	ldi	r20, 0x02	; 2
    3f06:	50 e0       	ldi	r21, 0x00	; 0
    3f08:	60 e0       	ldi	r22, 0x00	; 0
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <dataReadyEventGroup>
    3f10:	90 91 f2 13 	lds	r25, 0x13F2	; 0x8013f2 <dataReadyEventGroup+0x1>
    3f14:	0e 94 2b 05 	call	0xa56	; 0xa56 <xEventGroupSetBits>
    3f18:	e2 cf       	rjmp	.-60     	; 0x3ede <MeasureCo2Task>

00003f1a <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3f1a:	80 91 5f 13 	lds	r24, 0x135F	; 0x80135f <lastCO2ppm>
    3f1e:	90 91 60 13 	lds	r25, 0x1360	; 0x801360 <lastCO2ppm+0x1>
    3f22:	08 95       	ret

00003f24 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	0f 93       	push	r16
    3f2a:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3f2c:	bc df       	rcall	.-136    	; 0x3ea6 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3f2e:	e1 2c       	mov	r14, r1
    3f30:	f1 2c       	mov	r15, r1
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 ec       	ldi	r20, 0xC0	; 192
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	67 e6       	ldi	r22, 0x67	; 103
    3f3c:	73 e0       	ldi	r23, 0x03	; 3
    3f3e:	8f e6       	ldi	r24, 0x6F	; 111
    3f40:	9f e1       	ldi	r25, 0x1F	; 31
    3f42:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	ef 90       	pop	r14
    3f4c:	08 95       	ret

00003f4e <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3f4e:	8f d1       	rcall	.+798    	; 0x426e <hih8120_initialise>
    3f50:	88 23       	and	r24, r24
    3f52:	41 f0       	breq	.+16     	; 0x3f64 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    3f54:	89 e7       	ldi	r24, 0x79	; 121
    3f56:	93 e0       	ldi	r25, 0x03	; 3
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	08 95       	ret

00003f66 <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    3f66:	ef 92       	push	r14
    3f68:	ff 92       	push	r15
    3f6a:	0f 93       	push	r16
    3f6c:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3f6e:	ef df       	rcall	.-34     	; 0x3f4e <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3f70:	e1 2c       	mov	r14, r1
    3f72:	f1 2c       	mov	r15, r1
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 ec       	ldi	r20, 0xC0	; 192
    3f7a:	50 e0       	ldi	r21, 0x00	; 0
    3f7c:	60 eb       	ldi	r22, 0xB0	; 176
    3f7e:	73 e0       	ldi	r23, 0x03	; 3
    3f80:	88 ef       	ldi	r24, 0xF8	; 248
    3f82:	9f e1       	ldi	r25, 0x1F	; 31
    3f84:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	08 95       	ret

00003f90 <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK";
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    3f90:	8c eb       	ldi	r24, 0xBC	; 188
    3f92:	93 e0       	ldi	r25, 0x03	; 3
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	8d ec       	ldi	r24, 0xCD	; 205
    3f9a:	93 e0       	ldi	r25, 0x03	; 3
    3f9c:	9f 93       	push	r25
    3f9e:	8f 93       	push	r24
    3fa0:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
}
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
    3fac:	08 95       	ret

00003fae <measure_Temp_Hum>:
	
}

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3fae:	76 d1       	rcall	.+748    	; 0x429c <hih8120_wakeup>
    3fb0:	88 23       	and	r24, r24
    3fb2:	21 f0       	breq	.+8      	; 0x3fbc <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    3fb4:	8e ed       	ldi	r24, 0xDE	; 222
    3fb6:	93 e0       	ldi	r25, 0x03	; 3
    3fb8:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    3fbc:	63 e0       	ldi	r22, 0x03	; 3
    3fbe:	70 e0       	ldi	r23, 0x00	; 0
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskDelay>
	
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
	if (measure_rc != HIH8120_OK)
    3fc8:	7d d1       	rcall	.+762    	; 0x42c4 <hih8120_measure>
	{
		tempHumSensor_printReturnCode(measure_rc);
    3fca:	81 11       	cpse	r24, r1
    3fcc:	e1 df       	rcall	.-62     	; 0x3f90 <tempHumSensor_printReturnCode>
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    3fce:	63 e0       	ldi	r22, 0x03	; 3
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskDelay>
	
	humidity = hih8120_getHumidityPercent_x10();
    3fda:	99 d1       	rcall	.+818    	; 0x430e <hih8120_getHumidityPercent_x10>
    3fdc:	90 93 64 13 	sts	0x1364, r25	; 0x801364 <humidity+0x1>
    3fe0:	80 93 63 13 	sts	0x1363, r24	; 0x801363 <humidity>
	temperature = hih8120_getTemperature_x10();	
    3fe4:	ba d1       	rcall	.+884    	; 0x435a <hih8120_getTemperature_x10>
    3fe6:	90 93 62 13 	sts	0x1362, r25	; 0x801362 <temperature+0x1>
    3fea:	80 93 61 13 	sts	0x1361, r24	; 0x801361 <temperature>
    3fee:	08 95       	ret

00003ff0 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3ff0:	cc 24       	eor	r12, r12
    3ff2:	ca 94       	dec	r12
    3ff4:	dc 2c       	mov	r13, r12
    3ff6:	76 01       	movw	r14, r12
    3ff8:	01 e0       	ldi	r16, 0x01	; 1
    3ffa:	21 e0       	ldi	r18, 0x01	; 1
    3ffc:	44 e0       	ldi	r20, 0x04	; 4
    3ffe:	50 e0       	ldi	r21, 0x00	; 0
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <measureEventGroup>
    4008:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <measureEventGroup+0x1>
    400c:	0e 94 8b 04 	call	0x916	; 0x916 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    4010:	62 ff       	sbrs	r22, 2
    4012:	ee cf       	rjmp	.-36     	; 0x3ff0 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    4014:	cc df       	rcall	.-104    	; 0x3fae <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    4016:	48 e0       	ldi	r20, 0x08	; 8
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <dataReadyEventGroup>
    4022:	90 91 f2 13 	lds	r25, 0x13F2	; 0x8013f2 <dataReadyEventGroup+0x1>
    4026:	0e 94 2b 05 	call	0xa56	; 0xa56 <xEventGroupSetBits>
    402a:	e2 cf       	rjmp	.-60     	; 0x3ff0 <Temp_Hum_Main_Task>

0000402c <TempHumSensor_getTemp>:
	printf("RETURNCODE: %s \n", returnCodeString);
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    402c:	80 91 61 13 	lds	r24, 0x1361	; 0x801361 <temperature>
    4030:	90 91 62 13 	lds	r25, 0x1362	; 0x801362 <temperature+0x1>
    4034:	08 95       	ret

00004036 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    4036:	80 91 63 13 	lds	r24, 0x1363	; 0x801363 <humidity>
    403a:	90 91 64 13 	lds	r25, 0x1364	; 0x801364 <humidity+0x1>
    403e:	08 95       	ret

00004040 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    4040:	0e 94 78 04 	call	0x8f0	; 0x8f0 <xEventGroupCreate>
    4044:	90 93 f2 13 	sts	0x13F2, r25	; 0x8013f2 <dataReadyEventGroup+0x1>
    4048:	80 93 f1 13 	sts	0x13F1, r24	; 0x8013f1 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    404c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <xEventGroupCreate>
    4050:	90 93 f4 13 	sts	0x13F4, r25	; 0x8013f4 <measureEventGroup+0x1>
    4054:	80 93 f3 13 	sts	0x13F3, r24	; 0x8013f3 <measureEventGroup>
    4058:	08 95       	ret

0000405a <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	8c e2       	ldi	r24, 0x2C	; 44
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <xStreamBufferGenericCreate>
    4068:	90 93 f6 13 	sts	0x13F6, r25	; 0x8013f6 <uplinkMessageBufferHandle+0x1>
    406c:	80 93 f5 13 	sts	0x13F5, r24	; 0x8013f5 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    4070:	89 2b       	or	r24, r25
    4072:	21 f4       	brne	.+8      	; 0x407c <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	94 e0       	ldi	r25, 0x04	; 4
    4078:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    407c:	41 e0       	ldi	r20, 0x01	; 1
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	8c e2       	ldi	r24, 0x2C	; 44
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <xStreamBufferGenericCreate>
    408a:	90 93 f8 13 	sts	0x13F8, r25	; 0x8013f8 <downlinkMessageBufferHandle+0x1>
    408e:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    4092:	89 2b       	or	r24, r25
    4094:	21 f4       	brne	.+8      	; 0x409e <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    4096:	89 e2       	ldi	r24, 0x29	; 41
    4098:	94 e0       	ldi	r25, 0x04	; 4
    409a:	0c 94 73 32 	jmp	0x64e6	; 0x64e6 <puts>
    409e:	08 95       	ret

000040a0 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    40a0:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xQueueCreateMutex>
    40a8:	90 93 f0 13 	sts	0x13F0, r25	; 0x8013f0 <configSemaphore+0x1>
    40ac:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <configSemaphore>
	 if(configSemaphore != NULL){
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	49 f0       	breq	.+18     	; 0x40c6 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    40b4:	00 e0       	ldi	r16, 0x00	; 0
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	a9 01       	movw	r20, r18
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xQueueGenericSend>
    40c4:	08 c0       	rjmp	.+16     	; 0x40d6 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    40c6:	83 e5       	ldi	r24, 0x53	; 83
    40c8:	94 e0       	ldi	r25, 0x04	; 4
    40ca:	9f 93       	push	r25
    40cc:	8f 93       	push	r24
    40ce:	0e 94 5f 32 	call	0x64be	; 0x64be <printf>
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
	 }
 }
    40d6:	0f 91       	pop	r16
    40d8:	08 95       	ret

000040da <initialise_rc_servo>:
 */ 

#include "ServoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    40da:	c2 c2       	rjmp	.+1412   	; 0x4660 <rc_servo_initialise>
    40dc:	08 95       	ret

000040de <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    40de:	a8 c2       	rjmp	.+1360   	; 0x4630 <rc_servo_setPosition>
    40e0:	08 95       	ret

000040e2 <lora_uplink_handler_task>:
		}
	}
}

void lora_uplink_handler_task( void *pvParameters )
{
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
    40ea:	a2 97       	sbiw	r28, 0x22	; 34
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	c8 d1       	rcall	.+912    	; 0x448a <lora_driver_resetRn2483>
	vTaskDelay(2);
    40fa:	62 e0       	ldi	r22, 0x02	; 2
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskDelay>
	lora_driver_resetRn2483(0);
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	c0 d1       	rcall	.+896    	; 0x448a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    410a:	66 e9       	ldi	r22, 0x96	; 150
    410c:	70 e0       	ldi	r23, 0x00	; 0
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4116:	72 d1       	rcall	.+740    	; 0x43fc <lora_driver_flushBuffers>
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    4118:	0f ef       	ldi	r16, 0xFF	; 255
    411a:	1f ef       	ldi	r17, 0xFF	; 255
    411c:	98 01       	movw	r18, r16
    411e:	46 e1       	ldi	r20, 0x16	; 22
    4120:	50 e0       	ldi	r21, 0x00	; 0
    4122:	65 e6       	ldi	r22, 0x65	; 101
    4124:	73 e1       	ldi	r23, 0x13	; 19
    4126:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <uplinkMessageBufferHandle>
    412a:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <uplinkMessageBufferHandle+0x1>
    412e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <xStreamBufferReceive>
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4132:	88 23       	and	r24, r24
// 			printf("Temperature sent: %d\n", tem);
// 			printf("Humidity sent: %d\n", hum);
// 			printf("CO2 sent: %d\n", co2);
// 			printf("Status sent: %d\n", status);
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    4134:	89 f3       	breq	.-30     	; 0x4118 <lora_uplink_handler_task+0x36>
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	c0 d7       	rcall	.+3968   	; 0x50ba <status_leds_shortPuls>
			
			// TEMPORARY SETUP 	
			//----------------------------------------
			//00FA 0096 0320 00C8 07D0 01F4
			uint8_t fakePayloadBytes[] = {0x00, 0xFA, 0x00, 0x96, 0x03, 0x20, 0x00, 0xC8, 0x07, 0xD0, 0x01,0xF4};
    413a:	8c e0       	ldi	r24, 0x0C	; 12
    413c:	e2 e2       	ldi	r30, 0x22	; 34
    413e:	f2 e0       	ldi	r31, 0x02	; 2
    4140:	de 01       	movw	r26, r28
    4142:	57 96       	adiw	r26, 0x17	; 23
    4144:	01 90       	ld	r0, Z+
    4146:	0d 92       	st	X+, r0
    4148:	8a 95       	dec	r24
    414a:	e1 f7       	brne	.-8      	; 0x4144 <lora_uplink_handler_task+0x62>
			lora_driver_payload_t fakePayload;
			fakePayload.portNo = 2;
    414c:	82 e0       	ldi	r24, 0x02	; 2
    414e:	89 83       	std	Y+1, r24	; 0x01
			fakePayload.len = sizeof(fakePayloadBytes);
    4150:	8c e0       	ldi	r24, 0x0C	; 12
    4152:	8a 83       	std	Y+2, r24	; 0x02
			for(uint8_t i = 0; i < sizeof(fakePayloadBytes); i++){
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	11 c0       	rjmp	.+34     	; 0x417a <lora_uplink_handler_task+0x98>
				fakePayload.bytes[i] = fakePayloadBytes[i];
    4158:	82 2f       	mov	r24, r18
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	e7 e1       	ldi	r30, 0x17	; 23
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	ec 0f       	add	r30, r28
    4162:	fd 1f       	adc	r31, r29
    4164:	e8 0f       	add	r30, r24
    4166:	f9 1f       	adc	r31, r25
    4168:	30 81       	ld	r19, Z
    416a:	e3 e0       	ldi	r30, 0x03	; 3
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	ec 0f       	add	r30, r28
    4170:	fd 1f       	adc	r31, r29
    4172:	e8 0f       	add	r30, r24
    4174:	f9 1f       	adc	r31, r25
    4176:	30 83       	st	Z, r19
			//00FA 0096 0320 00C8 07D0 01F4
			uint8_t fakePayloadBytes[] = {0x00, 0xFA, 0x00, 0x96, 0x03, 0x20, 0x00, 0xC8, 0x07, 0xD0, 0x01,0xF4};
			lora_driver_payload_t fakePayload;
			fakePayload.portNo = 2;
			fakePayload.len = sizeof(fakePayloadBytes);
			for(uint8_t i = 0; i < sizeof(fakePayloadBytes); i++){
    4178:	2f 5f       	subi	r18, 0xFF	; 255
    417a:	2c 30       	cpi	r18, 0x0C	; 12
    417c:	68 f3       	brcs	.-38     	; 0x4158 <lora_uplink_handler_task+0x76>
				fakePayload.bytes[i] = fakePayloadBytes[i];
			}
			
			xMessageBufferSend(downlinkMessageBufferHandle,
    417e:	0f ef       	ldi	r16, 0xFF	; 255
    4180:	1f ef       	ldi	r17, 0xFF	; 255
    4182:	98 01       	movw	r18, r16
    4184:	46 e1       	ldi	r20, 0x16	; 22
    4186:	50 e0       	ldi	r21, 0x00	; 0
    4188:	be 01       	movw	r22, r28
    418a:	6f 5f       	subi	r22, 0xFF	; 255
    418c:	7f 4f       	sbci	r23, 0xFF	; 255
    418e:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <downlinkMessageBufferHandle>
    4192:	90 91 f8 13 	lds	r25, 0x13F8	; 0x8013f8 <downlinkMessageBufferHandle+0x1>
    4196:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferSend>
    419a:	be cf       	rjmp	.-132    	; 0x4118 <lora_uplink_handler_task+0x36>

0000419c <create_lora_uplink_handler_task>:

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    419c:	ef 92       	push	r14
    419e:	ff 92       	push	r15
    41a0:	0f 93       	push	r16
	xTaskCreate(
    41a2:	e1 2c       	mov	r14, r1
    41a4:	f1 2c       	mov	r15, r1
    41a6:	08 2f       	mov	r16, r24
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	48 e8       	ldi	r20, 0x88	; 136
    41ae:	51 e0       	ldi	r21, 0x01	; 1
    41b0:	65 e7       	ldi	r22, 0x75	; 117
    41b2:	74 e0       	ldi	r23, 0x04	; 4
    41b4:	81 e7       	ldi	r24, 0x71	; 113
    41b6:	90 e2       	ldi	r25, 0x20	; 32
    41b8:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    41bc:	0f 91       	pop	r16
    41be:	ff 90       	pop	r15
    41c0:	ef 90       	pop	r14
    41c2:	08 95       	ret

000041c4 <create_all_tasks>:
#include "DownlinkHandler.h"
#include "ServoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    41c4:	84 e0       	ldi	r24, 0x04	; 4
    41c6:	ea df       	rcall	.-44     	; 0x419c <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    41c8:	84 e0       	ldi	r24, 0x04	; 4
    41ca:	0e 94 1f 03 	call	0x63e	; 0x63e <create_lora_downlink_handler_task>
	create_main_application_task(3);
    41ce:	83 e0       	ldi	r24, 0x03	; 3
    41d0:	0e 94 05 02 	call	0x40a	; 0x40a <create_main_application_task>
	create_CO2_sensor_task(1);
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	a6 de       	rcall	.-692    	; 0x3f24 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	c5 de       	rcall	.-630    	; 0x3f66 <create_TempHum_sensor_task>
    41dc:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    41de:	0c 94 33 03 	jmp	0x666	; 0x666 <create_fan_controller_task>
    41e2:	08 95       	ret

000041e4 <initializeSystem>:
    41e4:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    41e6:	14 d6       	rcall	.+3112   	; 0x4e10 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    41e8:	85 e0       	ldi	r24, 0x05	; 5

	initialize_event_groups();
    41ea:	19 d7       	rcall	.+3634   	; 0x501e <status_leds_initialise>
	initialize_message_buffers();
    41ec:	29 df       	rcall	.-430    	; 0x4040 <initialize_event_groups>
    41ee:	35 df       	rcall	.-406    	; 0x405a <initialize_message_buffers>
	initialize_semaphore();
    41f0:	57 df       	rcall	.-338    	; 0x40a0 <initialize_semaphore>
    41f2:	73 df       	rcall	.-282    	; 0x40da <initialise_rc_servo>
	initialise_rc_servo();
    41f4:	60 91 f7 13 	lds	r22, 0x13F7	; 0x8013f7 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    41f8:	70 91 f8 13 	lds	r23, 0x13F8	; 0x8013f8 <downlinkMessageBufferHandle+0x1>
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	05 d1       	rcall	.+522    	; 0x440a <lora_driver_initialise>
    4200:	e1 cf       	rjmp	.-62     	; 0x41c4 <create_all_tasks>
	create_all_tasks();
    4202:	08 95       	ret

00004204 <main>:
    4204:	ef df       	rcall	.-34     	; 0x41e4 <initializeSystem>
    4206:	82 e8       	ldi	r24, 0x82	; 130

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    4208:	94 e0       	ldi	r25, 0x04	; 4
    420a:	0e 94 73 32 	call	0x64e6	; 0x64e6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    420e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskStartScheduler>
    4212:	ff cf       	rjmp	.-2      	; 0x4212 <main+0xe>

00004214 <_hihTwiCallback>:
    4214:	65 30       	cpi	r22, 0x05	; 5
    4216:	f1 f4       	brne	.+60     	; 0x4254 <_hihTwiCallback+0x40>
    4218:	fa 01       	movw	r30, r20
    421a:	80 81       	ld	r24, Z
    421c:	8f 73       	andi	r24, 0x3F	; 63
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	98 2f       	mov	r25, r24
    4222:	88 27       	eor	r24, r24
    4224:	21 81       	ldd	r18, Z+1	; 0x01
    4226:	82 2b       	or	r24, r18
    4228:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    422c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4230:	82 81       	ldd	r24, Z+2	; 0x02
    4232:	f0 e4       	ldi	r31, 0x40	; 64
    4234:	8f 9f       	mul	r24, r31
    4236:	c0 01       	movw	r24, r0
    4238:	11 24       	eor	r1, r1
    423a:	fa 01       	movw	r30, r20
    423c:	23 81       	ldd	r18, Z+3	; 0x03
    423e:	26 95       	lsr	r18
    4240:	26 95       	lsr	r18
    4242:	82 2b       	or	r24, r18
    4244:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4248:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	80 93 7b 13 	sts	0x137B, r24	; 0x80137b <_measuringIsReady>
    4252:	08 95       	ret
    4254:	64 30       	cpi	r22, 0x04	; 4
    4256:	51 f0       	breq	.+20     	; 0x426c <_hihTwiCallback+0x58>
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e4       	ldi	r25, 0x40	; 64
    425c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4260:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4264:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4268:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    426c:	08 95       	ret

0000426e <hih8120_initialise>:
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	0a e0       	ldi	r16, 0x0A	; 10
    4274:	11 e2       	ldi	r17, 0x21	; 33
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	34 e2       	ldi	r19, 0x24	; 36
    427a:	44 ef       	ldi	r20, 0xF4	; 244
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	87 e2       	ldi	r24, 0x27	; 39
    4282:	3d d7       	rcall	.+3706   	; 0x50fe <twiCreate>
    4284:	90 93 7d 13 	sts	0x137D, r25	; 0x80137d <_hih8120Handler+0x1>
    4288:	80 93 7c 13 	sts	0x137C, r24	; 0x80137c <_hih8120Handler>
    428c:	21 e0       	ldi	r18, 0x01	; 1
    428e:	89 2b       	or	r24, r25
    4290:	09 f0       	breq	.+2      	; 0x4294 <hih8120_initialise+0x26>
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	82 2f       	mov	r24, r18
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <hih8120_wakeup>:
    429c:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_hih8120Handler>
    42a0:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_hih8120Handler+0x1>
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	51 f0       	breq	.+20     	; 0x42bc <hih8120_wakeup+0x20>
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	78 d7       	rcall	.+3824   	; 0x51a0 <twiTransmit>
    42b0:	84 30       	cpi	r24, 0x04	; 4
    42b2:	31 f4       	brne	.+12     	; 0x42c0 <hih8120_wakeup+0x24>
    42b4:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <_measuringIsReady>
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	08 95       	ret
    42bc:	82 e0       	ldi	r24, 0x02	; 2
    42be:	08 95       	ret
    42c0:	83 e0       	ldi	r24, 0x03	; 3
    42c2:	08 95       	ret

000042c4 <hih8120_measure>:
    42c4:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_hih8120Handler>
    42c8:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_hih8120Handler+0x1>
    42cc:	00 97       	sbiw	r24, 0x00	; 0
    42ce:	31 f0       	breq	.+12     	; 0x42dc <hih8120_measure+0x18>
    42d0:	64 e0       	ldi	r22, 0x04	; 4
    42d2:	b2 d7       	rcall	.+3940   	; 0x5238 <twiReceive>
    42d4:	85 30       	cpi	r24, 0x05	; 5
    42d6:	21 f0       	breq	.+8      	; 0x42e0 <hih8120_measure+0x1c>
    42d8:	83 e0       	ldi	r24, 0x03	; 3
    42da:	08 95       	ret
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	08 95       	ret
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	08 95       	ret

000042e4 <hih8120_getHumidity>:
    42e4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    42e8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__floatunsisf>
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	48 ec       	ldi	r20, 0xC8	; 200
    42fa:	52 e4       	ldi	r21, 0x42	; 66
    42fc:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__mulsf3>
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	38 ef       	ldi	r19, 0xF8	; 248
    4304:	4f e7       	ldi	r20, 0x7F	; 127
    4306:	56 e4       	ldi	r21, 0x46	; 70
    4308:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__divsf3>
    430c:	08 95       	ret

0000430e <hih8120_getHumidityPercent_x10>:
    430e:	ea df       	rcall	.-44     	; 0x42e4 <hih8120_getHumidity>
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	40 e2       	ldi	r20, 0x20	; 32
    4316:	51 e4       	ldi	r21, 0x41	; 65
    4318:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__mulsf3>
    431c:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__fixunssfsi>
    4320:	cb 01       	movw	r24, r22
    4322:	08 95       	ret

00004324 <hih8120_getTemperature>:
    4324:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4328:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__floatunsisf>
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	45 e2       	ldi	r20, 0x25	; 37
    433a:	53 e4       	ldi	r21, 0x43	; 67
    433c:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__mulsf3>
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	38 ef       	ldi	r19, 0xF8	; 248
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	56 e4       	ldi	r21, 0x46	; 70
    4348:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__divsf3>
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e2       	ldi	r20, 0x20	; 32
    4352:	52 e4       	ldi	r21, 0x42	; 66
    4354:	0c 94 b1 2d 	jmp	0x5b62	; 0x5b62 <__subsf3>
    4358:	08 95       	ret

0000435a <hih8120_getTemperature_x10>:
    435a:	e4 df       	rcall	.-56     	; 0x4324 <hih8120_getTemperature>
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e2       	ldi	r20, 0x20	; 32
    4362:	51 e4       	ldi	r21, 0x41	; 65
    4364:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__mulsf3>
    4368:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <__fixsfsi>
    436c:	cb 01       	movw	r24, r22
    436e:	08 95       	ret

00004370 <_serialCallBack>:
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	1f 92       	push	r1
    437a:	1f 92       	push	r1
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	8c 01       	movw	r16, r24
    4382:	19 82       	std	Y+1, r1	; 0x01
    4384:	2d c0       	rjmp	.+90     	; 0x43e0 <_serialCallBack+0x70>
    4386:	e0 91 7e 13 	lds	r30, 0x137E	; 0x80137e <rec_buf_inp.2878>
    438a:	ec 32       	cpi	r30, 0x2C	; 44
    438c:	50 f4       	brcc	.+20     	; 0x43a2 <_serialCallBack+0x32>
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	8e 0f       	add	r24, r30
    4392:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <rec_buf_inp.2878>
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	eb 57       	subi	r30, 0x7B	; 123
    439a:	fc 4e       	sbci	r31, 0xEC	; 236
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	80 83       	st	Z, r24
    43a0:	02 c0       	rjmp	.+4      	; 0x43a6 <_serialCallBack+0x36>
    43a2:	10 92 7e 13 	sts	0x137E, r1	; 0x80137e <rec_buf_inp.2878>
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	8a 30       	cpi	r24, 0x0A	; 10
    43aa:	d1 f4       	brne	.+52     	; 0x43e0 <_serialCallBack+0x70>
    43ac:	40 91 7e 13 	lds	r20, 0x137E	; 0x80137e <rec_buf_inp.2878>
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	fa 01       	movw	r30, r20
    43b4:	ed 57       	subi	r30, 0x7D	; 125
    43b6:	fc 4e       	sbci	r31, 0xEC	; 236
    43b8:	10 82       	st	Z, r1
    43ba:	41 50       	subi	r20, 0x01	; 1
    43bc:	51 09       	sbc	r21, r1
    43be:	9e 01       	movw	r18, r28
    43c0:	2f 5f       	subi	r18, 0xFF	; 255
    43c2:	3f 4f       	sbci	r19, 0xFF	; 255
    43c4:	65 e8       	ldi	r22, 0x85	; 133
    43c6:	73 e1       	ldi	r23, 0x13	; 19
    43c8:	80 91 81 13 	lds	r24, 0x1381	; 0x801381 <_serialReplyBufferHandle>
    43cc:	90 91 82 13 	lds	r25, 0x1382	; 0x801382 <_serialReplyBufferHandle+0x1>
    43d0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <xStreamBufferSendFromISR>
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	81 11       	cpse	r24, r1
    43d8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vPortYield>
    43dc:	10 92 7e 13 	sts	0x137E, r1	; 0x80137e <rec_buf_inp.2878>
    43e0:	be 01       	movw	r22, r28
    43e2:	6e 5f       	subi	r22, 0xFE	; 254
    43e4:	7f 4f       	sbci	r23, 0xFF	; 255
    43e6:	c8 01       	movw	r24, r16
    43e8:	7d d2       	rcall	.+1274   	; 0x48e4 <serial_getByte>
    43ea:	88 23       	and	r24, r24
    43ec:	61 f2       	breq	.-104    	; 0x4386 <_serialCallBack+0x16>
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	1f 91       	pop	r17
    43f8:	0f 91       	pop	r16
    43fa:	08 95       	ret

000043fc <lora_driver_flushBuffers>:
    43fc:	80 91 81 13 	lds	r24, 0x1381	; 0x801381 <_serialReplyBufferHandle>
    4400:	90 91 82 13 	lds	r25, 0x1382	; 0x801382 <_serialReplyBufferHandle+0x1>
    4404:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <xStreamBufferReset>
    4408:	08 95       	ret

0000440a <lora_driver_initialise>:
    440a:	8f 92       	push	r8
    440c:	9f 92       	push	r9
    440e:	af 92       	push	r10
    4410:	cf 92       	push	r12
    4412:	ef 92       	push	r14
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	c8 2f       	mov	r28, r24
    441c:	8b 01       	movw	r16, r22
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	88 ec       	ldi	r24, 0xC8	; 200
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <xStreamBufferGenericCreate>
    442c:	90 93 82 13 	sts	0x1382, r25	; 0x801382 <_serialReplyBufferHandle+0x1>
    4430:	80 93 81 13 	sts	0x1381, r24	; 0x801381 <_serialReplyBufferHandle>
    4434:	10 93 80 13 	sts	0x1380, r17	; 0x801380 <_downlinkMessageBuffer+0x1>
    4438:	00 93 7f 13 	sts	0x137F, r16	; 0x80137f <_downlinkMessageBuffer>
    443c:	0f 2e       	mov	r0, r31
    443e:	f8 eb       	ldi	r31, 0xB8	; 184
    4440:	8f 2e       	mov	r8, r31
    4442:	f1 e2       	ldi	r31, 0x21	; 33
    4444:	9f 2e       	mov	r9, r31
    4446:	f0 2d       	mov	r31, r0
    4448:	68 94       	set
    444a:	aa 24       	eor	r10, r10
    444c:	a6 f8       	bld	r10, 6
    444e:	68 94       	set
    4450:	cc 24       	eor	r12, r12
    4452:	c6 f8       	bld	r12, 6
    4454:	e1 2c       	mov	r14, r1
    4456:	00 e0       	ldi	r16, 0x00	; 0
    4458:	23 e0       	ldi	r18, 0x03	; 3
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	51 ee       	ldi	r21, 0xE1	; 225
    445e:	60 e0       	ldi	r22, 0x00	; 0
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	8c 2f       	mov	r24, r28
    4464:	19 d1       	rcall	.+562    	; 0x4698 <serial_create>
    4466:	90 93 84 13 	sts	0x1384, r25	; 0x801384 <_rn2483_serial+0x1>
    446a:	80 93 83 13 	sts	0x1383, r24	; 0x801383 <_rn2483_serial>
    446e:	e7 e0       	ldi	r30, 0x07	; 7
    4470:	f1 e0       	ldi	r31, 0x01	; 1
    4472:	80 81       	ld	r24, Z
    4474:	80 61       	ori	r24, 0x10	; 16
    4476:	80 83       	st	Z, r24
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	ef 90       	pop	r14
    4480:	cf 90       	pop	r12
    4482:	af 90       	pop	r10
    4484:	9f 90       	pop	r9
    4486:	8f 90       	pop	r8
    4488:	08 95       	ret

0000448a <lora_driver_resetRn2483>:
    448a:	88 23       	and	r24, r24
    448c:	31 f0       	breq	.+12     	; 0x449a <lora_driver_resetRn2483+0x10>
    448e:	e8 e0       	ldi	r30, 0x08	; 8
    4490:	f1 e0       	ldi	r31, 0x01	; 1
    4492:	80 81       	ld	r24, Z
    4494:	8f 7e       	andi	r24, 0xEF	; 239
    4496:	80 83       	st	Z, r24
    4498:	08 95       	ret
    449a:	e8 e0       	ldi	r30, 0x08	; 8
    449c:	f1 e0       	ldi	r31, 0x01	; 1
    449e:	80 81       	ld	r24, Z
    44a0:	80 61       	ori	r24, 0x10	; 16
    44a2:	80 83       	st	Z, r24
    44a4:	08 95       	ret

000044a6 <_serialCallBack>:
    44a6:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <crc_sum.1945>
    44aa:	86 0f       	add	r24, r22
    44ac:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <crc_sum.1945>
    44b0:	90 91 b8 13 	lds	r25, 0x13B8	; 0x8013b8 <_mh_state>
    44b4:	91 30       	cpi	r25, 0x01	; 1
    44b6:	79 f0       	breq	.+30     	; 0x44d6 <_serialCallBack+0x30>
    44b8:	28 f0       	brcs	.+10     	; 0x44c4 <_serialCallBack+0x1e>
    44ba:	92 30       	cpi	r25, 0x02	; 2
    44bc:	a9 f0       	breq	.+42     	; 0x44e8 <_serialCallBack+0x42>
    44be:	93 30       	cpi	r25, 0x03	; 3
    44c0:	19 f1       	breq	.+70     	; 0x4508 <_serialCallBack+0x62>
    44c2:	08 95       	ret
    44c4:	6f 3f       	cpi	r22, 0xFF	; 255
    44c6:	09 f0       	breq	.+2      	; 0x44ca <_serialCallBack+0x24>
    44c8:	48 c0       	rjmp	.+144    	; 0x455a <_serialCallBack+0xb4>
    44ca:	10 92 b5 13 	sts	0x13B5, r1	; 0x8013b5 <crc_sum.1945>
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	80 93 b8 13 	sts	0x13B8, r24	; 0x8013b8 <_mh_state>
    44d4:	08 95       	ret
    44d6:	66 38       	cpi	r22, 0x86	; 134
    44d8:	09 f0       	breq	.+2      	; 0x44dc <_serialCallBack+0x36>
    44da:	3f c0       	rjmp	.+126    	; 0x455a <_serialCallBack+0xb4>
    44dc:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <inDex.1943>
    44e0:	82 e0       	ldi	r24, 0x02	; 2
    44e2:	80 93 b8 13 	sts	0x13B8, r24	; 0x8013b8 <_mh_state>
    44e6:	08 95       	ret
    44e8:	e0 91 b4 13 	lds	r30, 0x13B4	; 0x8013b4 <inDex.1943>
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	8e 0f       	add	r24, r30
    44f0:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <inDex.1943>
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	ee 54       	subi	r30, 0x4E	; 78
    44f8:	fc 4e       	sbci	r31, 0xEC	; 236
    44fa:	60 83       	st	Z, r22
    44fc:	82 30       	cpi	r24, 0x02	; 2
    44fe:	69 f5       	brne	.+90     	; 0x455a <_serialCallBack+0xb4>
    4500:	83 e0       	ldi	r24, 0x03	; 3
    4502:	80 93 b8 13 	sts	0x13B8, r24	; 0x8013b8 <_mh_state>
    4506:	08 95       	ret
    4508:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <inDex.1943>
    450c:	21 e0       	ldi	r18, 0x01	; 1
    450e:	29 0f       	add	r18, r25
    4510:	20 93 b4 13 	sts	0x13B4, r18	; 0x8013b4 <inDex.1943>
    4514:	96 30       	cpi	r25, 0x06	; 6
    4516:	09 f5       	brne	.+66     	; 0x455a <_serialCallBack+0xb4>
    4518:	81 11       	cpse	r24, r1
    451a:	0e c0       	rjmp	.+28     	; 0x4538 <_serialCallBack+0x92>
    451c:	e2 eb       	ldi	r30, 0xB2	; 178
    451e:	f3 e1       	ldi	r31, 0x13	; 19
    4520:	80 81       	ld	r24, Z
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	98 2f       	mov	r25, r24
    4526:	88 27       	eor	r24, r24
    4528:	21 81       	ldd	r18, Z+1	; 0x01
    452a:	82 0f       	add	r24, r18
    452c:	91 1d       	adc	r25, r1
    452e:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <_ppm+0x1>
    4532:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <_ppm>
    4536:	04 c0       	rjmp	.+8      	; 0x4540 <_serialCallBack+0x9a>
    4538:	10 92 ba 13 	sts	0x13BA, r1	; 0x8013ba <_ppm+0x1>
    453c:	10 92 b9 13 	sts	0x13B9, r1	; 0x8013b9 <_ppm>
    4540:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <_mh_state>
    4544:	e0 91 b6 13 	lds	r30, 0x13B6	; 0x8013b6 <_appCallBack>
    4548:	f0 91 b7 13 	lds	r31, 0x13B7	; 0x8013b7 <_appCallBack+0x1>
    454c:	30 97       	sbiw	r30, 0x00	; 0
    454e:	29 f0       	breq	.+10     	; 0x455a <_serialCallBack+0xb4>
    4550:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <_ppm>
    4554:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <_ppm+0x1>
    4558:	19 95       	eicall
    455a:	08 95       	ret

0000455c <mh_z19_initialise>:
    455c:	8f 92       	push	r8
    455e:	9f 92       	push	r9
    4560:	af 92       	push	r10
    4562:	cf 92       	push	r12
    4564:	ef 92       	push	r14
    4566:	0f 93       	push	r16
    4568:	0f 2e       	mov	r0, r31
    456a:	f3 e5       	ldi	r31, 0x53	; 83
    456c:	8f 2e       	mov	r8, r31
    456e:	f2 e2       	ldi	r31, 0x22	; 34
    4570:	9f 2e       	mov	r9, r31
    4572:	f0 2d       	mov	r31, r0
    4574:	68 94       	set
    4576:	aa 24       	eor	r10, r10
    4578:	a4 f8       	bld	r10, 4
    457a:	68 94       	set
    457c:	cc 24       	eor	r12, r12
    457e:	c4 f8       	bld	r12, 4
    4580:	e1 2c       	mov	r14, r1
    4582:	00 e0       	ldi	r16, 0x00	; 0
    4584:	23 e0       	ldi	r18, 0x03	; 3
    4586:	40 e8       	ldi	r20, 0x80	; 128
    4588:	55 e2       	ldi	r21, 0x25	; 37
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	70 e0       	ldi	r23, 0x00	; 0
    458e:	84 d0       	rcall	.+264    	; 0x4698 <serial_create>
    4590:	90 93 bc 13 	sts	0x13BC, r25	; 0x8013bc <_serial+0x1>
    4594:	80 93 bb 13 	sts	0x13BB, r24	; 0x8013bb <_serial>
    4598:	0f 91       	pop	r16
    459a:	ef 90       	pop	r14
    459c:	cf 90       	pop	r12
    459e:	af 90       	pop	r10
    45a0:	9f 90       	pop	r9
    45a2:	8f 90       	pop	r8
    45a4:	08 95       	ret

000045a6 <mh_z19_injectCallBack>:
    45a6:	90 93 b7 13 	sts	0x13B7, r25	; 0x8013b7 <_appCallBack+0x1>
    45aa:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <_appCallBack>
    45ae:	08 95       	ret

000045b0 <mh_z19_takeMeassuring>:
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	29 97       	sbiw	r28, 0x09	; 9
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	89 e0       	ldi	r24, 0x09	; 9
    45c6:	ee e2       	ldi	r30, 0x2E	; 46
    45c8:	f2 e0       	ldi	r31, 0x02	; 2
    45ca:	9e 01       	movw	r18, r28
    45cc:	2f 5f       	subi	r18, 0xFF	; 255
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	d9 01       	movw	r26, r18
    45d2:	01 90       	ld	r0, Z+
    45d4:	0d 92       	st	X+, r0
    45d6:	8a 95       	dec	r24
    45d8:	e1 f7       	brne	.-8      	; 0x45d2 <mh_z19_takeMeassuring+0x22>
    45da:	10 92 ba 13 	sts	0x13BA, r1	; 0x8013ba <_ppm+0x1>
    45de:	10 92 b9 13 	sts	0x13B9, r1	; 0x8013b9 <_ppm>
    45e2:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <_serial>
    45e6:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <_serial+0x1>
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	31 f0       	breq	.+12     	; 0x45fa <mh_z19_takeMeassuring+0x4a>
    45ee:	42 2f       	mov	r20, r18
    45f0:	53 2f       	mov	r21, r19
    45f2:	69 e0       	ldi	r22, 0x09	; 9
    45f4:	22 d1       	rcall	.+580    	; 0x483a <serial_sendBytes>
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	01 c0       	rjmp	.+2      	; 0x45fc <mh_z19_takeMeassuring+0x4c>
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	29 96       	adiw	r28, 0x09	; 9
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	de bf       	out	0x3e, r29	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	df 91       	pop	r29
    460a:	cf 91       	pop	r28
    460c:	08 95       	ret

0000460e <mh_z19_getCo2Ppm>:
    460e:	20 91 b9 13 	lds	r18, 0x13B9	; 0x8013b9 <_ppm>
    4612:	30 91 ba 13 	lds	r19, 0x13BA	; 0x8013ba <_ppm+0x1>
    4616:	21 15       	cp	r18, r1
    4618:	31 05       	cpc	r19, r1
    461a:	29 f4       	brne	.+10     	; 0x4626 <mh_z19_getCo2Ppm+0x18>
    461c:	fc 01       	movw	r30, r24
    461e:	11 82       	std	Z+1, r1	; 0x01
    4620:	10 82       	st	Z, r1
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	08 95       	ret
    4626:	fc 01       	movw	r30, r24
    4628:	31 83       	std	Z+1, r19	; 0x01
    462a:	20 83       	st	Z, r18
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	08 95       	ret

00004630 <rc_servo_setPosition>:
    4630:	65 36       	cpi	r22, 0x65	; 101
    4632:	0c f0       	brlt	.+2      	; 0x4636 <rc_servo_setPosition+0x6>
    4634:	64 e6       	ldi	r22, 0x64	; 100
    4636:	6c 39       	cpi	r22, 0x9C	; 156
    4638:	0c f4       	brge	.+2      	; 0x463c <rc_servo_setPosition+0xc>
    463a:	6c e9       	ldi	r22, 0x9C	; 156
    463c:	96 ef       	ldi	r25, 0xF6	; 246
    463e:	69 02       	muls	r22, r25
    4640:	b0 01       	movw	r22, r0
    4642:	11 24       	eor	r1, r1
    4644:	68 54       	subi	r22, 0x48	; 72
    4646:	74 4f       	sbci	r23, 0xF4	; 244
    4648:	81 11       	cpse	r24, r1
    464a:	05 c0       	rjmp	.+10     	; 0x4656 <rc_servo_setPosition+0x26>
    464c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4650:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4654:	08 95       	ret
    4656:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    465a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    465e:	08 95       	ret

00004660 <rc_servo_initialise>:
    4660:	ea e0       	ldi	r30, 0x0A	; 10
    4662:	f1 e0       	ldi	r31, 0x01	; 1
    4664:	80 81       	ld	r24, Z
    4666:	88 61       	ori	r24, 0x18	; 24
    4668:	80 83       	st	Z, r24
    466a:	8f e3       	ldi	r24, 0x3F	; 63
    466c:	9c e9       	ldi	r25, 0x9C	; 156
    466e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4672:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4676:	60 e0       	ldi	r22, 0x00	; 0
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	da df       	rcall	.-76     	; 0x4630 <rc_servo_setPosition>
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	d7 df       	rcall	.-82     	; 0x4630 <rc_servo_setPosition>
    4682:	e0 e2       	ldi	r30, 0x20	; 32
    4684:	f1 e0       	ldi	r31, 0x01	; 1
    4686:	80 81       	ld	r24, Z
    4688:	82 6a       	ori	r24, 0xA2	; 162
    468a:	80 83       	st	Z, r24
    468c:	e1 e2       	ldi	r30, 0x21	; 33
    468e:	f1 e0       	ldi	r31, 0x01	; 1
    4690:	80 81       	ld	r24, Z
    4692:	8a 61       	ori	r24, 0x1A	; 26
    4694:	80 83       	st	Z, r24
    4696:	08 95       	ret

00004698 <serial_create>:
    4698:	2f 92       	push	r2
    469a:	3f 92       	push	r3
    469c:	4f 92       	push	r4
    469e:	5f 92       	push	r5
    46a0:	6f 92       	push	r6
    46a2:	7f 92       	push	r7
    46a4:	8f 92       	push	r8
    46a6:	9f 92       	push	r9
    46a8:	af 92       	push	r10
    46aa:	cf 92       	push	r12
    46ac:	ef 92       	push	r14
    46ae:	ff 92       	push	r15
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	cd b7       	in	r28, 0x3d	; 61
    46ba:	de b7       	in	r29, 0x3e	; 62
    46bc:	f8 2e       	mov	r15, r24
    46be:	2a 01       	movw	r4, r20
    46c0:	3b 01       	movw	r6, r22
    46c2:	88 e0       	ldi	r24, 0x08	; 8
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	0e 94 00 30 	call	0x6000	; 0x6000 <malloc>
    46ca:	8c 01       	movw	r16, r24
    46cc:	8f 2d       	mov	r24, r15
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	ee 0f       	add	r30, r30
    46d4:	ff 1f       	adc	r31, r31
    46d6:	e3 54       	subi	r30, 0x43	; 67
    46d8:	fc 4e       	sbci	r31, 0xEC	; 236
    46da:	11 83       	std	Z+1, r17	; 0x01
    46dc:	00 83       	st	Z, r16
    46de:	01 15       	cp	r16, r1
    46e0:	11 05       	cpc	r17, r1
    46e2:	09 f4       	brne	.+2      	; 0x46e6 <serial_create+0x4e>
    46e4:	6d c0       	rjmp	.+218    	; 0x47c0 <serial_create+0x128>
    46e6:	88 0f       	add	r24, r24
    46e8:	99 1f       	adc	r25, r25
    46ea:	fc 01       	movw	r30, r24
    46ec:	e5 5f       	subi	r30, 0xF5	; 245
    46ee:	fd 4f       	sbci	r31, 0xFD	; 253
    46f0:	80 81       	ld	r24, Z
    46f2:	91 81       	ldd	r25, Z+1	; 0x01
    46f4:	d8 01       	movw	r26, r16
    46f6:	8d 93       	st	X+, r24
    46f8:	9c 93       	st	X, r25
    46fa:	8c 2d       	mov	r24, r12
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	0e 94 00 30 	call	0x6000	; 0x6000 <malloc>
    470a:	1c 01       	movw	r2, r24
    470c:	86 e0       	ldi	r24, 0x06	; 6
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0e 94 00 30 	call	0x6000	; 0x6000 <malloc>
    4714:	7c 01       	movw	r14, r24
    4716:	4c 2d       	mov	r20, r12
    4718:	b1 01       	movw	r22, r2
    471a:	7e d6       	rcall	.+3324   	; 0x5418 <fifo_init>
    471c:	f8 01       	movw	r30, r16
    471e:	f5 82       	std	Z+5, r15	; 0x05
    4720:	e4 82       	std	Z+4, r14	; 0x04
    4722:	8a 2d       	mov	r24, r10
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	88 0f       	add	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	0e 94 00 30 	call	0x6000	; 0x6000 <malloc>
    4732:	1c 01       	movw	r2, r24
    4734:	86 e0       	ldi	r24, 0x06	; 6
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 00 30 	call	0x6000	; 0x6000 <malloc>
    473c:	7c 01       	movw	r14, r24
    473e:	4a 2d       	mov	r20, r10
    4740:	b1 01       	movw	r22, r2
    4742:	6a d6       	rcall	.+3284   	; 0x5418 <fifo_init>
    4744:	d8 01       	movw	r26, r16
    4746:	13 96       	adiw	r26, 0x03	; 3
    4748:	fc 92       	st	X, r15
    474a:	ee 92       	st	-X, r14
    474c:	12 97       	sbiw	r26, 0x02	; 2
    474e:	17 96       	adiw	r26, 0x07	; 7
    4750:	9c 92       	st	X, r9
    4752:	8e 92       	st	-X, r8
    4754:	16 97       	sbiw	r26, 0x06	; 6
    4756:	ff b6       	in	r15, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	ed 91       	ld	r30, X+
    475c:	fc 91       	ld	r31, X
    475e:	11 97       	sbiw	r26, 0x01	; 1
    4760:	36 97       	sbiw	r30, 0x06	; 6
    4762:	80 81       	ld	r24, Z
    4764:	82 60       	ori	r24, 0x02	; 2
    4766:	80 83       	st	Z, r24
    4768:	8d 90       	ld	r8, X+
    476a:	9c 90       	ld	r9, X
    476c:	c3 01       	movw	r24, r6
    476e:	b2 01       	movw	r22, r4
    4770:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__floatunsisf>
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	51 e4       	ldi	r21, 0x41	; 65
    477c:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__mulsf3>
    4780:	9b 01       	movw	r18, r22
    4782:	ac 01       	movw	r20, r24
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	74 e2       	ldi	r23, 0x24	; 36
    4788:	84 e7       	ldi	r24, 0x74	; 116
    478a:	9b e4       	ldi	r25, 0x4B	; 75
    478c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__divsf3>
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	40 e8       	ldi	r20, 0x80	; 128
    4796:	5f e3       	ldi	r21, 0x3F	; 63
    4798:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__subsf3>
    479c:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__fixunssfsi>
    47a0:	f4 01       	movw	r30, r8
    47a2:	32 97       	sbiw	r30, 0x02	; 2
    47a4:	60 83       	st	Z, r22
    47a6:	d8 01       	movw	r26, r16
    47a8:	ed 91       	ld	r30, X+
    47aa:	fc 91       	ld	r31, X
    47ac:	11 97       	sbiw	r26, 0x01	; 1
    47ae:	35 97       	sbiw	r30, 0x05	; 5
    47b0:	88 e9       	ldi	r24, 0x98	; 152
    47b2:	80 83       	st	Z, r24
    47b4:	ed 91       	ld	r30, X+
    47b6:	fc 91       	ld	r31, X
    47b8:	34 97       	sbiw	r30, 0x04	; 4
    47ba:	86 e0       	ldi	r24, 0x06	; 6
    47bc:	80 83       	st	Z, r24
    47be:	ff be       	out	0x3f, r15	; 63
    47c0:	c8 01       	movw	r24, r16
    47c2:	df 91       	pop	r29
    47c4:	cf 91       	pop	r28
    47c6:	1f 91       	pop	r17
    47c8:	0f 91       	pop	r16
    47ca:	ff 90       	pop	r15
    47cc:	ef 90       	pop	r14
    47ce:	cf 90       	pop	r12
    47d0:	af 90       	pop	r10
    47d2:	9f 90       	pop	r9
    47d4:	8f 90       	pop	r8
    47d6:	7f 90       	pop	r7
    47d8:	6f 90       	pop	r6
    47da:	5f 90       	pop	r5
    47dc:	4f 90       	pop	r4
    47de:	3f 90       	pop	r3
    47e0:	2f 90       	pop	r2
    47e2:	08 95       	ret

000047e4 <serial_sendByte>:
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	dc 01       	movw	r26, r24
    47ea:	89 2b       	or	r24, r25
    47ec:	01 f1       	breq	.+64     	; 0x482e <serial_sendByte+0x4a>
    47ee:	12 96       	adiw	r26, 0x02	; 2
    47f0:	ed 91       	ld	r30, X+
    47f2:	fc 91       	ld	r31, X
    47f4:	13 97       	sbiw	r26, 0x03	; 3
    47f6:	93 81       	ldd	r25, Z+3	; 0x03
    47f8:	82 81       	ldd	r24, Z+2	; 0x02
    47fa:	25 81       	ldd	r18, Z+5	; 0x05
    47fc:	98 1b       	sub	r25, r24
    47fe:	92 23       	and	r25, r18
    4800:	84 81       	ldd	r24, Z+4	; 0x04
    4802:	98 17       	cp	r25, r24
    4804:	b1 f0       	breq	.+44     	; 0x4832 <serial_sendByte+0x4e>
    4806:	83 81       	ldd	r24, Z+3	; 0x03
    4808:	26 95       	lsr	r18
    480a:	28 23       	and	r18, r24
    480c:	c0 81       	ld	r28, Z
    480e:	d1 81       	ldd	r29, Z+1	; 0x01
    4810:	c2 0f       	add	r28, r18
    4812:	d1 1d       	adc	r29, r1
    4814:	68 83       	st	Y, r22
    4816:	8f 5f       	subi	r24, 0xFF	; 255
    4818:	95 81       	ldd	r25, Z+5	; 0x05
    481a:	89 23       	and	r24, r25
    481c:	83 83       	std	Z+3, r24	; 0x03
    481e:	ed 91       	ld	r30, X+
    4820:	fc 91       	ld	r31, X
    4822:	35 97       	sbiw	r30, 0x05	; 5
    4824:	80 81       	ld	r24, Z
    4826:	80 62       	ori	r24, 0x20	; 32
    4828:	80 83       	st	Z, r24
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	03 c0       	rjmp	.+6      	; 0x4834 <serial_sendByte+0x50>
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	01 c0       	rjmp	.+2      	; 0x4834 <serial_sendByte+0x50>
    4832:	82 e0       	ldi	r24, 0x02	; 2
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	08 95       	ret

0000483a <serial_sendBytes>:
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	7c 01       	movw	r14, r24
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	09 f4       	brne	.+2      	; 0x484e <serial_sendBytes+0x14>
    484c:	41 c0       	rjmp	.+130    	; 0x48d0 <serial_sendBytes+0x96>
    484e:	dc 01       	movw	r26, r24
    4850:	12 96       	adiw	r26, 0x02	; 2
    4852:	ed 91       	ld	r30, X+
    4854:	fc 91       	ld	r31, X
    4856:	13 97       	sbiw	r26, 0x03	; 3
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	98 1b       	sub	r25, r24
    485e:	85 81       	ldd	r24, Z+5	; 0x05
    4860:	98 23       	and	r25, r24
    4862:	84 81       	ldd	r24, Z+4	; 0x04
    4864:	89 1b       	sub	r24, r25
    4866:	86 17       	cp	r24, r22
    4868:	a8 f1       	brcs	.+106    	; 0x48d4 <serial_sendBytes+0x9a>
    486a:	66 23       	and	r22, r22
    486c:	41 f1       	breq	.+80     	; 0x48be <serial_sendBytes+0x84>
    486e:	84 2f       	mov	r24, r20
    4870:	95 2f       	mov	r25, r21
    4872:	dc 01       	movw	r26, r24
    4874:	61 50       	subi	r22, 0x01	; 1
    4876:	46 2f       	mov	r20, r22
    4878:	50 e0       	ldi	r21, 0x00	; 0
    487a:	4f 5f       	subi	r20, 0xFF	; 255
    487c:	5f 4f       	sbci	r21, 0xFF	; 255
    487e:	48 0f       	add	r20, r24
    4880:	59 1f       	adc	r21, r25
    4882:	e7 01       	movw	r28, r14
    4884:	ea 81       	ldd	r30, Y+2	; 0x02
    4886:	fb 81       	ldd	r31, Y+3	; 0x03
    4888:	93 81       	ldd	r25, Z+3	; 0x03
    488a:	82 81       	ldd	r24, Z+2	; 0x02
    488c:	25 81       	ldd	r18, Z+5	; 0x05
    488e:	98 1b       	sub	r25, r24
    4890:	92 23       	and	r25, r18
    4892:	84 81       	ldd	r24, Z+4	; 0x04
    4894:	98 17       	cp	r25, r24
    4896:	79 f0       	breq	.+30     	; 0x48b6 <serial_sendBytes+0x7c>
    4898:	8c 91       	ld	r24, X
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	26 95       	lsr	r18
    489e:	29 23       	and	r18, r25
    48a0:	60 81       	ld	r22, Z
    48a2:	71 81       	ldd	r23, Z+1	; 0x01
    48a4:	8b 01       	movw	r16, r22
    48a6:	02 0f       	add	r16, r18
    48a8:	11 1d       	adc	r17, r1
    48aa:	e8 01       	movw	r28, r16
    48ac:	88 83       	st	Y, r24
    48ae:	9f 5f       	subi	r25, 0xFF	; 255
    48b0:	85 81       	ldd	r24, Z+5	; 0x05
    48b2:	98 23       	and	r25, r24
    48b4:	93 83       	std	Z+3, r25	; 0x03
    48b6:	11 96       	adiw	r26, 0x01	; 1
    48b8:	a4 17       	cp	r26, r20
    48ba:	b5 07       	cpc	r27, r21
    48bc:	11 f7       	brne	.-60     	; 0x4882 <serial_sendBytes+0x48>
    48be:	d7 01       	movw	r26, r14
    48c0:	ed 91       	ld	r30, X+
    48c2:	fc 91       	ld	r31, X
    48c4:	35 97       	sbiw	r30, 0x05	; 5
    48c6:	80 81       	ld	r24, Z
    48c8:	80 62       	ori	r24, 0x20	; 32
    48ca:	80 83       	st	Z, r24
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	03 c0       	rjmp	.+6      	; 0x48d6 <serial_sendBytes+0x9c>
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	01 c0       	rjmp	.+2      	; 0x48d6 <serial_sendBytes+0x9c>
    48d4:	82 e0       	ldi	r24, 0x02	; 2
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	08 95       	ret

000048e4 <serial_getByte>:
    48e4:	00 97       	sbiw	r24, 0x00	; 0
    48e6:	d1 f0       	breq	.+52     	; 0x491c <serial_getByte+0x38>
    48e8:	dc 01       	movw	r26, r24
    48ea:	14 96       	adiw	r26, 0x04	; 4
    48ec:	ed 91       	ld	r30, X+
    48ee:	fc 91       	ld	r31, X
    48f0:	15 97       	sbiw	r26, 0x05	; 5
    48f2:	93 81       	ldd	r25, Z+3	; 0x03
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	98 17       	cp	r25, r24
    48f8:	99 f0       	breq	.+38     	; 0x4920 <serial_getByte+0x3c>
    48fa:	92 81       	ldd	r25, Z+2	; 0x02
    48fc:	85 81       	ldd	r24, Z+5	; 0x05
    48fe:	86 95       	lsr	r24
    4900:	89 23       	and	r24, r25
    4902:	a0 81       	ld	r26, Z
    4904:	b1 81       	ldd	r27, Z+1	; 0x01
    4906:	a8 0f       	add	r26, r24
    4908:	b1 1d       	adc	r27, r1
    490a:	8c 91       	ld	r24, X
    490c:	db 01       	movw	r26, r22
    490e:	8c 93       	st	X, r24
    4910:	9f 5f       	subi	r25, 0xFF	; 255
    4912:	85 81       	ldd	r24, Z+5	; 0x05
    4914:	98 23       	and	r25, r24
    4916:	92 83       	std	Z+2, r25	; 0x02
    4918:	80 e0       	ldi	r24, 0x00	; 0
    491a:	08 95       	ret
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	08 95       	ret
    4920:	83 e0       	ldi	r24, 0x03	; 3
    4922:	08 95       	ret

00004924 <__vector_25>:
    4924:	1f 92       	push	r1
    4926:	0f 92       	push	r0
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	0f 92       	push	r0
    492c:	11 24       	eor	r1, r1
    492e:	0b b6       	in	r0, 0x3b	; 59
    4930:	0f 92       	push	r0
    4932:	2f 93       	push	r18
    4934:	3f 93       	push	r19
    4936:	4f 93       	push	r20
    4938:	5f 93       	push	r21
    493a:	6f 93       	push	r22
    493c:	7f 93       	push	r23
    493e:	8f 93       	push	r24
    4940:	9f 93       	push	r25
    4942:	af 93       	push	r26
    4944:	bf 93       	push	r27
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	ef 93       	push	r30
    494c:	ff 93       	push	r31
    494e:	a0 91 bd 13 	lds	r26, 0x13BD	; 0x8013bd <_ser_handle>
    4952:	b0 91 be 13 	lds	r27, 0x13BE	; 0x8013be <_ser_handle+0x1>
    4956:	10 97       	sbiw	r26, 0x00	; 0
    4958:	11 f1       	breq	.+68     	; 0x499e <__vector_25+0x7a>
    495a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    495e:	14 96       	adiw	r26, 0x04	; 4
    4960:	ed 91       	ld	r30, X+
    4962:	fc 91       	ld	r31, X
    4964:	15 97       	sbiw	r26, 0x05	; 5
    4966:	93 81       	ldd	r25, Z+3	; 0x03
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	25 81       	ldd	r18, Z+5	; 0x05
    496c:	98 1b       	sub	r25, r24
    496e:	92 23       	and	r25, r18
    4970:	84 81       	ldd	r24, Z+4	; 0x04
    4972:	98 17       	cp	r25, r24
    4974:	61 f0       	breq	.+24     	; 0x498e <__vector_25+0x6a>
    4976:	83 81       	ldd	r24, Z+3	; 0x03
    4978:	26 95       	lsr	r18
    497a:	28 23       	and	r18, r24
    497c:	c0 81       	ld	r28, Z
    497e:	d1 81       	ldd	r29, Z+1	; 0x01
    4980:	c2 0f       	add	r28, r18
    4982:	d1 1d       	adc	r29, r1
    4984:	68 83       	st	Y, r22
    4986:	8f 5f       	subi	r24, 0xFF	; 255
    4988:	95 81       	ldd	r25, Z+5	; 0x05
    498a:	89 23       	and	r24, r25
    498c:	83 83       	std	Z+3, r24	; 0x03
    498e:	16 96       	adiw	r26, 0x06	; 6
    4990:	ed 91       	ld	r30, X+
    4992:	fc 91       	ld	r31, X
    4994:	17 97       	sbiw	r26, 0x07	; 7
    4996:	30 97       	sbiw	r30, 0x00	; 0
    4998:	11 f0       	breq	.+4      	; 0x499e <__vector_25+0x7a>
    499a:	cd 01       	movw	r24, r26
    499c:	19 95       	eicall
    499e:	ff 91       	pop	r31
    49a0:	ef 91       	pop	r30
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	bf 91       	pop	r27
    49a8:	af 91       	pop	r26
    49aa:	9f 91       	pop	r25
    49ac:	8f 91       	pop	r24
    49ae:	7f 91       	pop	r23
    49b0:	6f 91       	pop	r22
    49b2:	5f 91       	pop	r21
    49b4:	4f 91       	pop	r20
    49b6:	3f 91       	pop	r19
    49b8:	2f 91       	pop	r18
    49ba:	0f 90       	pop	r0
    49bc:	0b be       	out	0x3b, r0	; 59
    49be:	0f 90       	pop	r0
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	0f 90       	pop	r0
    49c4:	1f 90       	pop	r1
    49c6:	18 95       	reti

000049c8 <__vector_26>:
    49c8:	1f 92       	push	r1
    49ca:	0f 92       	push	r0
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	0f 92       	push	r0
    49d0:	11 24       	eor	r1, r1
    49d2:	0b b6       	in	r0, 0x3b	; 59
    49d4:	0f 92       	push	r0
    49d6:	2f 93       	push	r18
    49d8:	8f 93       	push	r24
    49da:	9f 93       	push	r25
    49dc:	af 93       	push	r26
    49de:	bf 93       	push	r27
    49e0:	ef 93       	push	r30
    49e2:	ff 93       	push	r31
    49e4:	e0 91 bd 13 	lds	r30, 0x13BD	; 0x8013bd <_ser_handle>
    49e8:	f0 91 be 13 	lds	r31, 0x13BE	; 0x8013be <_ser_handle+0x1>
    49ec:	30 97       	sbiw	r30, 0x00	; 0
    49ee:	b9 f0       	breq	.+46     	; 0x4a1e <__vector_26+0x56>
    49f0:	02 80       	ldd	r0, Z+2	; 0x02
    49f2:	f3 81       	ldd	r31, Z+3	; 0x03
    49f4:	e0 2d       	mov	r30, r0
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	98 17       	cp	r25, r24
    49fc:	b1 f0       	breq	.+44     	; 0x4a2a <__vector_26+0x62>
    49fe:	92 81       	ldd	r25, Z+2	; 0x02
    4a00:	85 81       	ldd	r24, Z+5	; 0x05
    4a02:	28 2f       	mov	r18, r24
    4a04:	26 95       	lsr	r18
    4a06:	29 23       	and	r18, r25
    4a08:	a0 81       	ld	r26, Z
    4a0a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a0c:	a2 0f       	add	r26, r18
    4a0e:	b1 1d       	adc	r27, r1
    4a10:	2c 91       	ld	r18, X
    4a12:	9f 5f       	subi	r25, 0xFF	; 255
    4a14:	89 23       	and	r24, r25
    4a16:	82 83       	std	Z+2, r24	; 0x02
    4a18:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a1c:	0b c0       	rjmp	.+22     	; 0x4a34 <__vector_26+0x6c>
    4a1e:	e1 ec       	ldi	r30, 0xC1	; 193
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	80 81       	ld	r24, Z
    4a24:	8f 7d       	andi	r24, 0xDF	; 223
    4a26:	80 83       	st	Z, r24
    4a28:	05 c0       	rjmp	.+10     	; 0x4a34 <__vector_26+0x6c>
    4a2a:	e1 ec       	ldi	r30, 0xC1	; 193
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	80 81       	ld	r24, Z
    4a30:	8f 7d       	andi	r24, 0xDF	; 223
    4a32:	80 83       	st	Z, r24
    4a34:	ff 91       	pop	r31
    4a36:	ef 91       	pop	r30
    4a38:	bf 91       	pop	r27
    4a3a:	af 91       	pop	r26
    4a3c:	9f 91       	pop	r25
    4a3e:	8f 91       	pop	r24
    4a40:	2f 91       	pop	r18
    4a42:	0f 90       	pop	r0
    4a44:	0b be       	out	0x3b, r0	; 59
    4a46:	0f 90       	pop	r0
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	0f 90       	pop	r0
    4a4c:	1f 90       	pop	r1
    4a4e:	18 95       	reti

00004a50 <__vector_36>:
    4a50:	1f 92       	push	r1
    4a52:	0f 92       	push	r0
    4a54:	0f b6       	in	r0, 0x3f	; 63
    4a56:	0f 92       	push	r0
    4a58:	11 24       	eor	r1, r1
    4a5a:	0b b6       	in	r0, 0x3b	; 59
    4a5c:	0f 92       	push	r0
    4a5e:	2f 93       	push	r18
    4a60:	3f 93       	push	r19
    4a62:	4f 93       	push	r20
    4a64:	5f 93       	push	r21
    4a66:	6f 93       	push	r22
    4a68:	7f 93       	push	r23
    4a6a:	8f 93       	push	r24
    4a6c:	9f 93       	push	r25
    4a6e:	af 93       	push	r26
    4a70:	bf 93       	push	r27
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	ef 93       	push	r30
    4a78:	ff 93       	push	r31
    4a7a:	a0 91 bf 13 	lds	r26, 0x13BF	; 0x8013bf <_ser_handle+0x2>
    4a7e:	b0 91 c0 13 	lds	r27, 0x13C0	; 0x8013c0 <_ser_handle+0x3>
    4a82:	10 97       	sbiw	r26, 0x00	; 0
    4a84:	11 f1       	breq	.+68     	; 0x4aca <__vector_36+0x7a>
    4a86:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a8a:	14 96       	adiw	r26, 0x04	; 4
    4a8c:	ed 91       	ld	r30, X+
    4a8e:	fc 91       	ld	r31, X
    4a90:	15 97       	sbiw	r26, 0x05	; 5
    4a92:	93 81       	ldd	r25, Z+3	; 0x03
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	25 81       	ldd	r18, Z+5	; 0x05
    4a98:	98 1b       	sub	r25, r24
    4a9a:	92 23       	and	r25, r18
    4a9c:	84 81       	ldd	r24, Z+4	; 0x04
    4a9e:	98 17       	cp	r25, r24
    4aa0:	61 f0       	breq	.+24     	; 0x4aba <__vector_36+0x6a>
    4aa2:	83 81       	ldd	r24, Z+3	; 0x03
    4aa4:	26 95       	lsr	r18
    4aa6:	28 23       	and	r18, r24
    4aa8:	c0 81       	ld	r28, Z
    4aaa:	d1 81       	ldd	r29, Z+1	; 0x01
    4aac:	c2 0f       	add	r28, r18
    4aae:	d1 1d       	adc	r29, r1
    4ab0:	68 83       	st	Y, r22
    4ab2:	8f 5f       	subi	r24, 0xFF	; 255
    4ab4:	95 81       	ldd	r25, Z+5	; 0x05
    4ab6:	89 23       	and	r24, r25
    4ab8:	83 83       	std	Z+3, r24	; 0x03
    4aba:	16 96       	adiw	r26, 0x06	; 6
    4abc:	ed 91       	ld	r30, X+
    4abe:	fc 91       	ld	r31, X
    4ac0:	17 97       	sbiw	r26, 0x07	; 7
    4ac2:	30 97       	sbiw	r30, 0x00	; 0
    4ac4:	11 f0       	breq	.+4      	; 0x4aca <__vector_36+0x7a>
    4ac6:	cd 01       	movw	r24, r26
    4ac8:	19 95       	eicall
    4aca:	ff 91       	pop	r31
    4acc:	ef 91       	pop	r30
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	bf 91       	pop	r27
    4ad4:	af 91       	pop	r26
    4ad6:	9f 91       	pop	r25
    4ad8:	8f 91       	pop	r24
    4ada:	7f 91       	pop	r23
    4adc:	6f 91       	pop	r22
    4ade:	5f 91       	pop	r21
    4ae0:	4f 91       	pop	r20
    4ae2:	3f 91       	pop	r19
    4ae4:	2f 91       	pop	r18
    4ae6:	0f 90       	pop	r0
    4ae8:	0b be       	out	0x3b, r0	; 59
    4aea:	0f 90       	pop	r0
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	0f 90       	pop	r0
    4af0:	1f 90       	pop	r1
    4af2:	18 95       	reti

00004af4 <__vector_37>:
    4af4:	1f 92       	push	r1
    4af6:	0f 92       	push	r0
    4af8:	0f b6       	in	r0, 0x3f	; 63
    4afa:	0f 92       	push	r0
    4afc:	11 24       	eor	r1, r1
    4afe:	0b b6       	in	r0, 0x3b	; 59
    4b00:	0f 92       	push	r0
    4b02:	2f 93       	push	r18
    4b04:	8f 93       	push	r24
    4b06:	9f 93       	push	r25
    4b08:	af 93       	push	r26
    4b0a:	bf 93       	push	r27
    4b0c:	ef 93       	push	r30
    4b0e:	ff 93       	push	r31
    4b10:	e0 91 bf 13 	lds	r30, 0x13BF	; 0x8013bf <_ser_handle+0x2>
    4b14:	f0 91 c0 13 	lds	r31, 0x13C0	; 0x8013c0 <_ser_handle+0x3>
    4b18:	30 97       	sbiw	r30, 0x00	; 0
    4b1a:	b9 f0       	breq	.+46     	; 0x4b4a <__vector_37+0x56>
    4b1c:	02 80       	ldd	r0, Z+2	; 0x02
    4b1e:	f3 81       	ldd	r31, Z+3	; 0x03
    4b20:	e0 2d       	mov	r30, r0
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	82 81       	ldd	r24, Z+2	; 0x02
    4b26:	98 17       	cp	r25, r24
    4b28:	b1 f0       	breq	.+44     	; 0x4b56 <__vector_37+0x62>
    4b2a:	92 81       	ldd	r25, Z+2	; 0x02
    4b2c:	85 81       	ldd	r24, Z+5	; 0x05
    4b2e:	28 2f       	mov	r18, r24
    4b30:	26 95       	lsr	r18
    4b32:	29 23       	and	r18, r25
    4b34:	a0 81       	ld	r26, Z
    4b36:	b1 81       	ldd	r27, Z+1	; 0x01
    4b38:	a2 0f       	add	r26, r18
    4b3a:	b1 1d       	adc	r27, r1
    4b3c:	2c 91       	ld	r18, X
    4b3e:	9f 5f       	subi	r25, 0xFF	; 255
    4b40:	89 23       	and	r24, r25
    4b42:	82 83       	std	Z+2, r24	; 0x02
    4b44:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b48:	0b c0       	rjmp	.+22     	; 0x4b60 <__vector_37+0x6c>
    4b4a:	e9 ec       	ldi	r30, 0xC9	; 201
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	8f 7d       	andi	r24, 0xDF	; 223
    4b52:	80 83       	st	Z, r24
    4b54:	05 c0       	rjmp	.+10     	; 0x4b60 <__vector_37+0x6c>
    4b56:	e9 ec       	ldi	r30, 0xC9	; 201
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 7d       	andi	r24, 0xDF	; 223
    4b5e:	80 83       	st	Z, r24
    4b60:	ff 91       	pop	r31
    4b62:	ef 91       	pop	r30
    4b64:	bf 91       	pop	r27
    4b66:	af 91       	pop	r26
    4b68:	9f 91       	pop	r25
    4b6a:	8f 91       	pop	r24
    4b6c:	2f 91       	pop	r18
    4b6e:	0f 90       	pop	r0
    4b70:	0b be       	out	0x3b, r0	; 59
    4b72:	0f 90       	pop	r0
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	0f 90       	pop	r0
    4b78:	1f 90       	pop	r1
    4b7a:	18 95       	reti

00004b7c <__vector_51>:
    4b7c:	1f 92       	push	r1
    4b7e:	0f 92       	push	r0
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	0f 92       	push	r0
    4b84:	11 24       	eor	r1, r1
    4b86:	0b b6       	in	r0, 0x3b	; 59
    4b88:	0f 92       	push	r0
    4b8a:	2f 93       	push	r18
    4b8c:	3f 93       	push	r19
    4b8e:	4f 93       	push	r20
    4b90:	5f 93       	push	r21
    4b92:	6f 93       	push	r22
    4b94:	7f 93       	push	r23
    4b96:	8f 93       	push	r24
    4b98:	9f 93       	push	r25
    4b9a:	af 93       	push	r26
    4b9c:	bf 93       	push	r27
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	ef 93       	push	r30
    4ba4:	ff 93       	push	r31
    4ba6:	a0 91 c1 13 	lds	r26, 0x13C1	; 0x8013c1 <_ser_handle+0x4>
    4baa:	b0 91 c2 13 	lds	r27, 0x13C2	; 0x8013c2 <_ser_handle+0x5>
    4bae:	10 97       	sbiw	r26, 0x00	; 0
    4bb0:	11 f1       	breq	.+68     	; 0x4bf6 <__vector_51+0x7a>
    4bb2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4bb6:	14 96       	adiw	r26, 0x04	; 4
    4bb8:	ed 91       	ld	r30, X+
    4bba:	fc 91       	ld	r31, X
    4bbc:	15 97       	sbiw	r26, 0x05	; 5
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	82 81       	ldd	r24, Z+2	; 0x02
    4bc2:	25 81       	ldd	r18, Z+5	; 0x05
    4bc4:	98 1b       	sub	r25, r24
    4bc6:	92 23       	and	r25, r18
    4bc8:	84 81       	ldd	r24, Z+4	; 0x04
    4bca:	98 17       	cp	r25, r24
    4bcc:	61 f0       	breq	.+24     	; 0x4be6 <__vector_51+0x6a>
    4bce:	83 81       	ldd	r24, Z+3	; 0x03
    4bd0:	26 95       	lsr	r18
    4bd2:	28 23       	and	r18, r24
    4bd4:	c0 81       	ld	r28, Z
    4bd6:	d1 81       	ldd	r29, Z+1	; 0x01
    4bd8:	c2 0f       	add	r28, r18
    4bda:	d1 1d       	adc	r29, r1
    4bdc:	68 83       	st	Y, r22
    4bde:	8f 5f       	subi	r24, 0xFF	; 255
    4be0:	95 81       	ldd	r25, Z+5	; 0x05
    4be2:	89 23       	and	r24, r25
    4be4:	83 83       	std	Z+3, r24	; 0x03
    4be6:	16 96       	adiw	r26, 0x06	; 6
    4be8:	ed 91       	ld	r30, X+
    4bea:	fc 91       	ld	r31, X
    4bec:	17 97       	sbiw	r26, 0x07	; 7
    4bee:	30 97       	sbiw	r30, 0x00	; 0
    4bf0:	11 f0       	breq	.+4      	; 0x4bf6 <__vector_51+0x7a>
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	19 95       	eicall
    4bf6:	ff 91       	pop	r31
    4bf8:	ef 91       	pop	r30
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	bf 91       	pop	r27
    4c00:	af 91       	pop	r26
    4c02:	9f 91       	pop	r25
    4c04:	8f 91       	pop	r24
    4c06:	7f 91       	pop	r23
    4c08:	6f 91       	pop	r22
    4c0a:	5f 91       	pop	r21
    4c0c:	4f 91       	pop	r20
    4c0e:	3f 91       	pop	r19
    4c10:	2f 91       	pop	r18
    4c12:	0f 90       	pop	r0
    4c14:	0b be       	out	0x3b, r0	; 59
    4c16:	0f 90       	pop	r0
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	0f 90       	pop	r0
    4c1c:	1f 90       	pop	r1
    4c1e:	18 95       	reti

00004c20 <__vector_52>:
    4c20:	1f 92       	push	r1
    4c22:	0f 92       	push	r0
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	0f 92       	push	r0
    4c28:	11 24       	eor	r1, r1
    4c2a:	0b b6       	in	r0, 0x3b	; 59
    4c2c:	0f 92       	push	r0
    4c2e:	2f 93       	push	r18
    4c30:	8f 93       	push	r24
    4c32:	9f 93       	push	r25
    4c34:	af 93       	push	r26
    4c36:	bf 93       	push	r27
    4c38:	ef 93       	push	r30
    4c3a:	ff 93       	push	r31
    4c3c:	e0 91 c1 13 	lds	r30, 0x13C1	; 0x8013c1 <_ser_handle+0x4>
    4c40:	f0 91 c2 13 	lds	r31, 0x13C2	; 0x8013c2 <_ser_handle+0x5>
    4c44:	30 97       	sbiw	r30, 0x00	; 0
    4c46:	b9 f0       	breq	.+46     	; 0x4c76 <__vector_52+0x56>
    4c48:	02 80       	ldd	r0, Z+2	; 0x02
    4c4a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c4c:	e0 2d       	mov	r30, r0
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	82 81       	ldd	r24, Z+2	; 0x02
    4c52:	98 17       	cp	r25, r24
    4c54:	b1 f0       	breq	.+44     	; 0x4c82 <__vector_52+0x62>
    4c56:	92 81       	ldd	r25, Z+2	; 0x02
    4c58:	85 81       	ldd	r24, Z+5	; 0x05
    4c5a:	28 2f       	mov	r18, r24
    4c5c:	26 95       	lsr	r18
    4c5e:	29 23       	and	r18, r25
    4c60:	a0 81       	ld	r26, Z
    4c62:	b1 81       	ldd	r27, Z+1	; 0x01
    4c64:	a2 0f       	add	r26, r18
    4c66:	b1 1d       	adc	r27, r1
    4c68:	2c 91       	ld	r18, X
    4c6a:	9f 5f       	subi	r25, 0xFF	; 255
    4c6c:	89 23       	and	r24, r25
    4c6e:	82 83       	std	Z+2, r24	; 0x02
    4c70:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c74:	0b c0       	rjmp	.+22     	; 0x4c8c <__vector_52+0x6c>
    4c76:	e1 ed       	ldi	r30, 0xD1	; 209
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	80 81       	ld	r24, Z
    4c7c:	8f 7d       	andi	r24, 0xDF	; 223
    4c7e:	80 83       	st	Z, r24
    4c80:	05 c0       	rjmp	.+10     	; 0x4c8c <__vector_52+0x6c>
    4c82:	e1 ed       	ldi	r30, 0xD1	; 209
    4c84:	f0 e0       	ldi	r31, 0x00	; 0
    4c86:	80 81       	ld	r24, Z
    4c88:	8f 7d       	andi	r24, 0xDF	; 223
    4c8a:	80 83       	st	Z, r24
    4c8c:	ff 91       	pop	r31
    4c8e:	ef 91       	pop	r30
    4c90:	bf 91       	pop	r27
    4c92:	af 91       	pop	r26
    4c94:	9f 91       	pop	r25
    4c96:	8f 91       	pop	r24
    4c98:	2f 91       	pop	r18
    4c9a:	0f 90       	pop	r0
    4c9c:	0b be       	out	0x3b, r0	; 59
    4c9e:	0f 90       	pop	r0
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	0f 90       	pop	r0
    4ca4:	1f 90       	pop	r1
    4ca6:	18 95       	reti

00004ca8 <__vector_54>:
    4ca8:	1f 92       	push	r1
    4caa:	0f 92       	push	r0
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	0f 92       	push	r0
    4cb0:	11 24       	eor	r1, r1
    4cb2:	0b b6       	in	r0, 0x3b	; 59
    4cb4:	0f 92       	push	r0
    4cb6:	2f 93       	push	r18
    4cb8:	3f 93       	push	r19
    4cba:	4f 93       	push	r20
    4cbc:	5f 93       	push	r21
    4cbe:	6f 93       	push	r22
    4cc0:	7f 93       	push	r23
    4cc2:	8f 93       	push	r24
    4cc4:	9f 93       	push	r25
    4cc6:	af 93       	push	r26
    4cc8:	bf 93       	push	r27
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	ef 93       	push	r30
    4cd0:	ff 93       	push	r31
    4cd2:	a0 91 c3 13 	lds	r26, 0x13C3	; 0x8013c3 <_ser_handle+0x6>
    4cd6:	b0 91 c4 13 	lds	r27, 0x13C4	; 0x8013c4 <_ser_handle+0x7>
    4cda:	10 97       	sbiw	r26, 0x00	; 0
    4cdc:	11 f1       	breq	.+68     	; 0x4d22 <__vector_54+0x7a>
    4cde:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4ce2:	14 96       	adiw	r26, 0x04	; 4
    4ce4:	ed 91       	ld	r30, X+
    4ce6:	fc 91       	ld	r31, X
    4ce8:	15 97       	sbiw	r26, 0x05	; 5
    4cea:	93 81       	ldd	r25, Z+3	; 0x03
    4cec:	82 81       	ldd	r24, Z+2	; 0x02
    4cee:	25 81       	ldd	r18, Z+5	; 0x05
    4cf0:	98 1b       	sub	r25, r24
    4cf2:	92 23       	and	r25, r18
    4cf4:	84 81       	ldd	r24, Z+4	; 0x04
    4cf6:	98 17       	cp	r25, r24
    4cf8:	61 f0       	breq	.+24     	; 0x4d12 <__vector_54+0x6a>
    4cfa:	83 81       	ldd	r24, Z+3	; 0x03
    4cfc:	26 95       	lsr	r18
    4cfe:	28 23       	and	r18, r24
    4d00:	c0 81       	ld	r28, Z
    4d02:	d1 81       	ldd	r29, Z+1	; 0x01
    4d04:	c2 0f       	add	r28, r18
    4d06:	d1 1d       	adc	r29, r1
    4d08:	68 83       	st	Y, r22
    4d0a:	8f 5f       	subi	r24, 0xFF	; 255
    4d0c:	95 81       	ldd	r25, Z+5	; 0x05
    4d0e:	89 23       	and	r24, r25
    4d10:	83 83       	std	Z+3, r24	; 0x03
    4d12:	16 96       	adiw	r26, 0x06	; 6
    4d14:	ed 91       	ld	r30, X+
    4d16:	fc 91       	ld	r31, X
    4d18:	17 97       	sbiw	r26, 0x07	; 7
    4d1a:	30 97       	sbiw	r30, 0x00	; 0
    4d1c:	11 f0       	breq	.+4      	; 0x4d22 <__vector_54+0x7a>
    4d1e:	cd 01       	movw	r24, r26
    4d20:	19 95       	eicall
    4d22:	ff 91       	pop	r31
    4d24:	ef 91       	pop	r30
    4d26:	df 91       	pop	r29
    4d28:	cf 91       	pop	r28
    4d2a:	bf 91       	pop	r27
    4d2c:	af 91       	pop	r26
    4d2e:	9f 91       	pop	r25
    4d30:	8f 91       	pop	r24
    4d32:	7f 91       	pop	r23
    4d34:	6f 91       	pop	r22
    4d36:	5f 91       	pop	r21
    4d38:	4f 91       	pop	r20
    4d3a:	3f 91       	pop	r19
    4d3c:	2f 91       	pop	r18
    4d3e:	0f 90       	pop	r0
    4d40:	0b be       	out	0x3b, r0	; 59
    4d42:	0f 90       	pop	r0
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	0f 90       	pop	r0
    4d48:	1f 90       	pop	r1
    4d4a:	18 95       	reti

00004d4c <__vector_55>:
    4d4c:	1f 92       	push	r1
    4d4e:	0f 92       	push	r0
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	0f 92       	push	r0
    4d54:	11 24       	eor	r1, r1
    4d56:	0b b6       	in	r0, 0x3b	; 59
    4d58:	0f 92       	push	r0
    4d5a:	2f 93       	push	r18
    4d5c:	8f 93       	push	r24
    4d5e:	9f 93       	push	r25
    4d60:	af 93       	push	r26
    4d62:	bf 93       	push	r27
    4d64:	ef 93       	push	r30
    4d66:	ff 93       	push	r31
    4d68:	e0 91 c3 13 	lds	r30, 0x13C3	; 0x8013c3 <_ser_handle+0x6>
    4d6c:	f0 91 c4 13 	lds	r31, 0x13C4	; 0x8013c4 <_ser_handle+0x7>
    4d70:	30 97       	sbiw	r30, 0x00	; 0
    4d72:	b9 f0       	breq	.+46     	; 0x4da2 <__vector_55+0x56>
    4d74:	02 80       	ldd	r0, Z+2	; 0x02
    4d76:	f3 81       	ldd	r31, Z+3	; 0x03
    4d78:	e0 2d       	mov	r30, r0
    4d7a:	93 81       	ldd	r25, Z+3	; 0x03
    4d7c:	82 81       	ldd	r24, Z+2	; 0x02
    4d7e:	98 17       	cp	r25, r24
    4d80:	b1 f0       	breq	.+44     	; 0x4dae <__vector_55+0x62>
    4d82:	92 81       	ldd	r25, Z+2	; 0x02
    4d84:	85 81       	ldd	r24, Z+5	; 0x05
    4d86:	28 2f       	mov	r18, r24
    4d88:	26 95       	lsr	r18
    4d8a:	29 23       	and	r18, r25
    4d8c:	a0 81       	ld	r26, Z
    4d8e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d90:	a2 0f       	add	r26, r18
    4d92:	b1 1d       	adc	r27, r1
    4d94:	2c 91       	ld	r18, X
    4d96:	9f 5f       	subi	r25, 0xFF	; 255
    4d98:	89 23       	and	r24, r25
    4d9a:	82 83       	std	Z+2, r24	; 0x02
    4d9c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4da0:	0b c0       	rjmp	.+22     	; 0x4db8 <__vector_55+0x6c>
    4da2:	e1 e3       	ldi	r30, 0x31	; 49
    4da4:	f1 e0       	ldi	r31, 0x01	; 1
    4da6:	80 81       	ld	r24, Z
    4da8:	8f 7d       	andi	r24, 0xDF	; 223
    4daa:	80 83       	st	Z, r24
    4dac:	05 c0       	rjmp	.+10     	; 0x4db8 <__vector_55+0x6c>
    4dae:	e1 e3       	ldi	r30, 0x31	; 49
    4db0:	f1 e0       	ldi	r31, 0x01	; 1
    4db2:	80 81       	ld	r24, Z
    4db4:	8f 7d       	andi	r24, 0xDF	; 223
    4db6:	80 83       	st	Z, r24
    4db8:	ff 91       	pop	r31
    4dba:	ef 91       	pop	r30
    4dbc:	bf 91       	pop	r27
    4dbe:	af 91       	pop	r26
    4dc0:	9f 91       	pop	r25
    4dc2:	8f 91       	pop	r24
    4dc4:	2f 91       	pop	r18
    4dc6:	0f 90       	pop	r0
    4dc8:	0b be       	out	0x3b, r0	; 59
    4dca:	0f 90       	pop	r0
    4dcc:	0f be       	out	0x3f, r0	; 63
    4dce:	0f 90       	pop	r0
    4dd0:	1f 90       	pop	r1
    4dd2:	18 95       	reti

00004dd4 <usart_getchar>:
    4dd4:	cf 93       	push	r28
    4dd6:	df 93       	push	r29
    4dd8:	1f 92       	push	r1
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	be 01       	movw	r22, r28
    4de0:	6f 5f       	subi	r22, 0xFF	; 255
    4de2:	7f 4f       	sbci	r23, 0xFF	; 255
    4de4:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_com_serial_instance>
    4de8:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_com_serial_instance+0x1>
    4dec:	7b dd       	rcall	.-1290   	; 0x48e4 <serial_getByte>
    4dee:	81 11       	cpse	r24, r1
    4df0:	f6 cf       	rjmp	.-20     	; 0x4dde <usart_getchar+0xa>
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	0f 90       	pop	r0
    4df8:	df 91       	pop	r29
    4dfa:	cf 91       	pop	r28
    4dfc:	08 95       	ret

00004dfe <usart_putchar>:
    4dfe:	68 2f       	mov	r22, r24
    4e00:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_com_serial_instance>
    4e04:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_com_serial_instance+0x1>
    4e08:	ed dc       	rcall	.-1574   	; 0x47e4 <serial_sendByte>
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	08 95       	ret

00004e10 <stdio_initialise>:
    4e10:	8f 92       	push	r8
    4e12:	9f 92       	push	r9
    4e14:	af 92       	push	r10
    4e16:	cf 92       	push	r12
    4e18:	ef 92       	push	r14
    4e1a:	0f 93       	push	r16
    4e1c:	81 2c       	mov	r8, r1
    4e1e:	91 2c       	mov	r9, r1
    4e20:	68 94       	set
    4e22:	aa 24       	eor	r10, r10
    4e24:	a7 f8       	bld	r10, 7
    4e26:	68 94       	set
    4e28:	cc 24       	eor	r12, r12
    4e2a:	c7 f8       	bld	r12, 7
    4e2c:	e1 2c       	mov	r14, r1
    4e2e:	00 e0       	ldi	r16, 0x00	; 0
    4e30:	23 e0       	ldi	r18, 0x03	; 3
    4e32:	40 e0       	ldi	r20, 0x00	; 0
    4e34:	51 ee       	ldi	r21, 0xE1	; 225
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	2e dc       	rcall	.-1956   	; 0x4698 <serial_create>
    4e3c:	90 93 c6 13 	sts	0x13C6, r25	; 0x8013c6 <_com_serial_instance+0x1>
    4e40:	80 93 c5 13 	sts	0x13C5, r24	; 0x8013c5 <_com_serial_instance>
    4e44:	ed ef       	ldi	r30, 0xFD	; 253
    4e46:	f3 e1       	ldi	r31, 0x13	; 19
    4e48:	83 e1       	ldi	r24, 0x13	; 19
    4e4a:	92 e0       	ldi	r25, 0x02	; 2
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
    4e50:	93 83       	std	Z+3, r25	; 0x03
    4e52:	82 83       	std	Z+2, r24	; 0x02
    4e54:	0f 91       	pop	r16
    4e56:	ef 90       	pop	r14
    4e58:	cf 90       	pop	r12
    4e5a:	af 90       	pop	r10
    4e5c:	9f 90       	pop	r9
    4e5e:	8f 90       	pop	r8
    4e60:	08 95       	ret

00004e62 <_turn_off>:
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	fc 01       	movw	r30, r24
    4e66:	ee 0f       	add	r30, r30
    4e68:	ff 1f       	adc	r31, r31
    4e6a:	e8 0f       	add	r30, r24
    4e6c:	f9 1f       	adc	r31, r25
    4e6e:	ee 0f       	add	r30, r30
    4e70:	ff 1f       	adc	r31, r31
    4e72:	e9 53       	subi	r30, 0x39	; 57
    4e74:	fc 4e       	sbci	r31, 0xEC	; 236
    4e76:	23 81       	ldd	r18, Z+3	; 0x03
    4e78:	21 11       	cpse	r18, r1
    4e7a:	1f c0       	rjmp	.+62     	; 0x4eba <_turn_off+0x58>
    4e7c:	9c 01       	movw	r18, r24
    4e7e:	22 0f       	add	r18, r18
    4e80:	33 1f       	adc	r19, r19
    4e82:	f9 01       	movw	r30, r18
    4e84:	e8 0f       	add	r30, r24
    4e86:	f9 1f       	adc	r31, r25
    4e88:	ee 0f       	add	r30, r30
    4e8a:	ff 1f       	adc	r31, r31
    4e8c:	e9 53       	subi	r30, 0x39	; 57
    4e8e:	fc 4e       	sbci	r31, 0xEC	; 236
    4e90:	a0 81       	ld	r26, Z
    4e92:	b1 81       	ldd	r27, Z+1	; 0x01
    4e94:	4c 91       	ld	r20, X
    4e96:	f9 01       	movw	r30, r18
    4e98:	e8 0f       	add	r30, r24
    4e9a:	f9 1f       	adc	r31, r25
    4e9c:	ee 0f       	add	r30, r30
    4e9e:	ff 1f       	adc	r31, r31
    4ea0:	e9 53       	subi	r30, 0x39	; 57
    4ea2:	fc 4e       	sbci	r31, 0xEC	; 236
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	02 80       	ldd	r0, Z+2	; 0x02
    4eaa:	02 c0       	rjmp	.+4      	; 0x4eb0 <_turn_off+0x4e>
    4eac:	88 0f       	add	r24, r24
    4eae:	99 1f       	adc	r25, r25
    4eb0:	0a 94       	dec	r0
    4eb2:	e2 f7       	brpl	.-8      	; 0x4eac <_turn_off+0x4a>
    4eb4:	84 2b       	or	r24, r20
    4eb6:	8c 93       	st	X, r24
    4eb8:	08 95       	ret
    4eba:	fc 01       	movw	r30, r24
    4ebc:	ee 0f       	add	r30, r30
    4ebe:	ff 1f       	adc	r31, r31
    4ec0:	df 01       	movw	r26, r30
    4ec2:	a8 0f       	add	r26, r24
    4ec4:	b9 1f       	adc	r27, r25
    4ec6:	aa 0f       	add	r26, r26
    4ec8:	bb 1f       	adc	r27, r27
    4eca:	a9 53       	subi	r26, 0x39	; 57
    4ecc:	bc 4e       	sbci	r27, 0xEC	; 236
    4ece:	0d 90       	ld	r0, X+
    4ed0:	bc 91       	ld	r27, X
    4ed2:	a0 2d       	mov	r26, r0
    4ed4:	2c 91       	ld	r18, X
    4ed6:	e8 0f       	add	r30, r24
    4ed8:	f9 1f       	adc	r31, r25
    4eda:	ee 0f       	add	r30, r30
    4edc:	ff 1f       	adc	r31, r31
    4ede:	e9 53       	subi	r30, 0x39	; 57
    4ee0:	fc 4e       	sbci	r31, 0xEC	; 236
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	02 80       	ldd	r0, Z+2	; 0x02
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <_turn_off+0x8c>
    4eea:	88 0f       	add	r24, r24
    4eec:	99 1f       	adc	r25, r25
    4eee:	0a 94       	dec	r0
    4ef0:	e2 f7       	brpl	.-8      	; 0x4eea <_turn_off+0x88>
    4ef2:	80 95       	com	r24
    4ef4:	82 23       	and	r24, r18
    4ef6:	8c 93       	st	X, r24
    4ef8:	08 95       	ret

00004efa <_turn_on>:
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	fc 01       	movw	r30, r24
    4efe:	ee 0f       	add	r30, r30
    4f00:	ff 1f       	adc	r31, r31
    4f02:	e8 0f       	add	r30, r24
    4f04:	f9 1f       	adc	r31, r25
    4f06:	ee 0f       	add	r30, r30
    4f08:	ff 1f       	adc	r31, r31
    4f0a:	e9 53       	subi	r30, 0x39	; 57
    4f0c:	fc 4e       	sbci	r31, 0xEC	; 236
    4f0e:	23 81       	ldd	r18, Z+3	; 0x03
    4f10:	21 11       	cpse	r18, r1
    4f12:	20 c0       	rjmp	.+64     	; 0x4f54 <_turn_on+0x5a>
    4f14:	9c 01       	movw	r18, r24
    4f16:	22 0f       	add	r18, r18
    4f18:	33 1f       	adc	r19, r19
    4f1a:	f9 01       	movw	r30, r18
    4f1c:	e8 0f       	add	r30, r24
    4f1e:	f9 1f       	adc	r31, r25
    4f20:	ee 0f       	add	r30, r30
    4f22:	ff 1f       	adc	r31, r31
    4f24:	e9 53       	subi	r30, 0x39	; 57
    4f26:	fc 4e       	sbci	r31, 0xEC	; 236
    4f28:	a0 81       	ld	r26, Z
    4f2a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f2c:	4c 91       	ld	r20, X
    4f2e:	f9 01       	movw	r30, r18
    4f30:	e8 0f       	add	r30, r24
    4f32:	f9 1f       	adc	r31, r25
    4f34:	ee 0f       	add	r30, r30
    4f36:	ff 1f       	adc	r31, r31
    4f38:	e9 53       	subi	r30, 0x39	; 57
    4f3a:	fc 4e       	sbci	r31, 0xEC	; 236
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	02 80       	ldd	r0, Z+2	; 0x02
    4f42:	02 c0       	rjmp	.+4      	; 0x4f48 <_turn_on+0x4e>
    4f44:	88 0f       	add	r24, r24
    4f46:	99 1f       	adc	r25, r25
    4f48:	0a 94       	dec	r0
    4f4a:	e2 f7       	brpl	.-8      	; 0x4f44 <_turn_on+0x4a>
    4f4c:	80 95       	com	r24
    4f4e:	84 23       	and	r24, r20
    4f50:	8c 93       	st	X, r24
    4f52:	08 95       	ret
    4f54:	fc 01       	movw	r30, r24
    4f56:	ee 0f       	add	r30, r30
    4f58:	ff 1f       	adc	r31, r31
    4f5a:	df 01       	movw	r26, r30
    4f5c:	a8 0f       	add	r26, r24
    4f5e:	b9 1f       	adc	r27, r25
    4f60:	aa 0f       	add	r26, r26
    4f62:	bb 1f       	adc	r27, r27
    4f64:	a9 53       	subi	r26, 0x39	; 57
    4f66:	bc 4e       	sbci	r27, 0xEC	; 236
    4f68:	0d 90       	ld	r0, X+
    4f6a:	bc 91       	ld	r27, X
    4f6c:	a0 2d       	mov	r26, r0
    4f6e:	2c 91       	ld	r18, X
    4f70:	e8 0f       	add	r30, r24
    4f72:	f9 1f       	adc	r31, r25
    4f74:	ee 0f       	add	r30, r30
    4f76:	ff 1f       	adc	r31, r31
    4f78:	e9 53       	subi	r30, 0x39	; 57
    4f7a:	fc 4e       	sbci	r31, 0xEC	; 236
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	02 80       	ldd	r0, Z+2	; 0x02
    4f82:	02 c0       	rjmp	.+4      	; 0x4f88 <_turn_on+0x8e>
    4f84:	88 0f       	add	r24, r24
    4f86:	99 1f       	adc	r25, r25
    4f88:	0a 94       	dec	r0
    4f8a:	e2 f7       	brpl	.-8      	; 0x4f84 <_turn_on+0x8a>
    4f8c:	82 2b       	or	r24, r18
    4f8e:	8c 93       	st	X, r24
    4f90:	08 95       	ret

00004f92 <_hal_led_task>:
    4f92:	cc 24       	eor	r12, r12
    4f94:	c3 94       	inc	r12
    4f96:	d1 2c       	mov	r13, r1
    4f98:	68 94       	set
    4f9a:	bb 24       	eor	r11, r11
    4f9c:	b2 f8       	bld	r11, 2
    4f9e:	c7 ec       	ldi	r28, 0xC7	; 199
    4fa0:	d3 e1       	ldi	r29, 0x13	; 19
    4fa2:	10 e0       	ldi	r17, 0x00	; 0
    4fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fa6:	81 30       	cpi	r24, 0x01	; 1
    4fa8:	81 f0       	breq	.+32     	; 0x4fca <_hal_led_task+0x38>
    4faa:	18 f1       	brcs	.+70     	; 0x4ff2 <_hal_led_task+0x60>
    4fac:	82 30       	cpi	r24, 0x02	; 2
    4fae:	61 f5       	brne	.+88     	; 0x5008 <_hal_led_task+0x76>
    4fb0:	e8 81       	ld	r30, Y
    4fb2:	f9 81       	ldd	r31, Y+1	; 0x01
    4fb4:	20 81       	ld	r18, Z
    4fb6:	c6 01       	movw	r24, r12
    4fb8:	0a 80       	ldd	r0, Y+2	; 0x02
    4fba:	02 c0       	rjmp	.+4      	; 0x4fc0 <_hal_led_task+0x2e>
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	0a 94       	dec	r0
    4fc2:	e2 f7       	brpl	.-8      	; 0x4fbc <_hal_led_task+0x2a>
    4fc4:	82 27       	eor	r24, r18
    4fc6:	80 83       	st	Z, r24
    4fc8:	1f c0       	rjmp	.+62     	; 0x5008 <_hal_led_task+0x76>
    4fca:	8d 81       	ldd	r24, Y+5	; 0x05
    4fcc:	8f 5f       	subi	r24, 0xFF	; 255
    4fce:	86 30       	cpi	r24, 0x06	; 6
    4fd0:	10 f4       	brcc	.+4      	; 0x4fd6 <_hal_led_task+0x44>
    4fd2:	8d 83       	std	Y+5, r24	; 0x05
    4fd4:	19 c0       	rjmp	.+50     	; 0x5008 <_hal_led_task+0x76>
    4fd6:	1d 82       	std	Y+5, r1	; 0x05
    4fd8:	e8 81       	ld	r30, Y
    4fda:	f9 81       	ldd	r31, Y+1	; 0x01
    4fdc:	20 81       	ld	r18, Z
    4fde:	c6 01       	movw	r24, r12
    4fe0:	0a 80       	ldd	r0, Y+2	; 0x02
    4fe2:	02 c0       	rjmp	.+4      	; 0x4fe8 <_hal_led_task+0x56>
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	0a 94       	dec	r0
    4fea:	e2 f7       	brpl	.-8      	; 0x4fe4 <_hal_led_task+0x52>
    4fec:	82 27       	eor	r24, r18
    4fee:	80 83       	st	Z, r24
    4ff0:	0b c0       	rjmp	.+22     	; 0x5008 <_hal_led_task+0x76>
    4ff2:	0d 81       	ldd	r16, Y+5	; 0x05
    4ff4:	00 23       	and	r16, r16
    4ff6:	29 f0       	breq	.+10     	; 0x5002 <_hal_led_task+0x70>
    4ff8:	81 2f       	mov	r24, r17
    4ffa:	7f df       	rcall	.-258    	; 0x4efa <_turn_on>
    4ffc:	01 50       	subi	r16, 0x01	; 1
    4ffe:	0d 83       	std	Y+5, r16	; 0x05
    5000:	03 c0       	rjmp	.+6      	; 0x5008 <_hal_led_task+0x76>
    5002:	bc 82       	std	Y+4, r11	; 0x04
    5004:	81 2f       	mov	r24, r17
    5006:	2d df       	rcall	.-422    	; 0x4e62 <_turn_off>
    5008:	1f 5f       	subi	r17, 0xFF	; 255
    500a:	26 96       	adiw	r28, 0x06	; 6
    500c:	14 30       	cpi	r17, 0x04	; 4
    500e:	51 f6       	brne	.-108    	; 0x4fa4 <_hal_led_task+0x12>
    5010:	6c e0       	ldi	r22, 0x0C	; 12
    5012:	70 e0       	ldi	r23, 0x00	; 0
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	0e 94 8d 14 	call	0x291a	; 0x291a <vTaskDelay>
    501c:	c0 cf       	rjmp	.-128    	; 0x4f9e <_hal_led_task+0xc>

0000501e <status_leds_initialise>:
    501e:	ef 92       	push	r14
    5020:	ff 92       	push	r15
    5022:	0f 93       	push	r16
    5024:	1f 93       	push	r17
    5026:	cf 93       	push	r28
    5028:	df 93       	push	r29
    502a:	08 2f       	mov	r16, r24
    502c:	80 e4       	ldi	r24, 0x40	; 64
    502e:	87 b9       	out	0x07, r24	; 7
    5030:	c7 ec       	ldi	r28, 0xC7	; 199
    5032:	d3 e1       	ldi	r29, 0x13	; 19
    5034:	0f 2e       	mov	r0, r31
    5036:	f8 e2       	ldi	r31, 0x28	; 40
    5038:	ef 2e       	mov	r14, r31
    503a:	f1 2c       	mov	r15, r1
    503c:	f0 2d       	mov	r31, r0
    503e:	f9 82       	std	Y+1, r15	; 0x01
    5040:	e8 82       	st	Y, r14
    5042:	86 e0       	ldi	r24, 0x06	; 6
    5044:	8a 83       	std	Y+2, r24	; 0x02
    5046:	1b 82       	std	Y+3, r1	; 0x03
    5048:	14 e0       	ldi	r17, 0x04	; 4
    504a:	1c 83       	std	Y+4, r17	; 0x04
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	09 df       	rcall	.-494    	; 0x4e62 <_turn_off>
    5050:	80 e8       	ldi	r24, 0x80	; 128
    5052:	87 b9       	out	0x07, r24	; 7
    5054:	ff 82       	std	Y+7, r15	; 0x07
    5056:	ee 82       	std	Y+6, r14	; 0x06
    5058:	87 e0       	ldi	r24, 0x07	; 7
    505a:	88 87       	std	Y+8, r24	; 0x08
    505c:	19 86       	std	Y+9, r1	; 0x09
    505e:	1a 87       	std	Y+10, r17	; 0x0a
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	ff de       	rcall	.-514    	; 0x4e62 <_turn_off>
    5064:	80 e2       	ldi	r24, 0x20	; 32
    5066:	83 bb       	out	0x13, r24	; 19
    5068:	84 e3       	ldi	r24, 0x34	; 52
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	9d 87       	std	Y+13, r25	; 0x0d
    506e:	8c 87       	std	Y+12, r24	; 0x0c
    5070:	85 e0       	ldi	r24, 0x05	; 5
    5072:	8e 87       	std	Y+14, r24	; 0x0e
    5074:	1f 86       	std	Y+15, r1	; 0x0f
    5076:	18 8b       	std	Y+16, r17	; 0x10
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	f3 de       	rcall	.-538    	; 0x4e62 <_turn_off>
    507c:	80 e1       	ldi	r24, 0x10	; 16
    507e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5082:	82 e0       	ldi	r24, 0x02	; 2
    5084:	91 e0       	ldi	r25, 0x01	; 1
    5086:	9b 8b       	std	Y+19, r25	; 0x13
    5088:	8a 8b       	std	Y+18, r24	; 0x12
    508a:	1c 8b       	std	Y+20, r17	; 0x14
    508c:	1d 8a       	std	Y+21, r1	; 0x15
    508e:	1e 8b       	std	Y+22, r17	; 0x16
    5090:	83 e0       	ldi	r24, 0x03	; 3
    5092:	e7 de       	rcall	.-562    	; 0x4e62 <_turn_off>
    5094:	e1 2c       	mov	r14, r1
    5096:	f1 2c       	mov	r15, r1
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	40 ec       	ldi	r20, 0xC0	; 192
    509e:	50 e0       	ldi	r21, 0x00	; 0
    50a0:	64 e9       	ldi	r22, 0x94	; 148
    50a2:	74 e0       	ldi	r23, 0x04	; 4
    50a4:	89 ec       	ldi	r24, 0xC9	; 201
    50a6:	97 e2       	ldi	r25, 0x27	; 39
    50a8:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCreate>
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	1f 91       	pop	r17
    50b2:	0f 91       	pop	r16
    50b4:	ff 90       	pop	r15
    50b6:	ef 90       	pop	r14
    50b8:	08 95       	ret

000050ba <status_leds_shortPuls>:
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	fc 01       	movw	r30, r24
    50be:	ee 0f       	add	r30, r30
    50c0:	ff 1f       	adc	r31, r31
    50c2:	df 01       	movw	r26, r30
    50c4:	a8 0f       	add	r26, r24
    50c6:	b9 1f       	adc	r27, r25
    50c8:	aa 0f       	add	r26, r26
    50ca:	bb 1f       	adc	r27, r27
    50cc:	a9 53       	subi	r26, 0x39	; 57
    50ce:	bc 4e       	sbci	r27, 0xEC	; 236
    50d0:	15 96       	adiw	r26, 0x05	; 5
    50d2:	1c 92       	st	X, r1
    50d4:	15 97       	sbiw	r26, 0x05	; 5
    50d6:	fd 01       	movw	r30, r26
    50d8:	14 82       	std	Z+4, r1	; 0x04
    50da:	08 95       	ret

000050dc <_initTwiInterface>:
    50dc:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <_twiIsInitiated>
    50e0:	81 11       	cpse	r24, r1
    50e2:	0c c0       	rjmp	.+24     	; 0x50fc <_initTwiInterface+0x20>
    50e4:	8c e0       	ldi	r24, 0x0C	; 12
    50e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    50ea:	8f ef       	ldi	r24, 0xFF	; 255
    50ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    50f0:	84 e0       	ldi	r24, 0x04	; 4
    50f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <_twiIsInitiated>
    50fc:	08 95       	ret

000050fe <twiCreate>:
    50fe:	af 92       	push	r10
    5100:	bf 92       	push	r11
    5102:	cf 92       	push	r12
    5104:	df 92       	push	r13
    5106:	ef 92       	push	r14
    5108:	ff 92       	push	r15
    510a:	0f 93       	push	r16
    510c:	1f 93       	push	r17
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	a8 2e       	mov	r10, r24
    5114:	b6 2e       	mov	r11, r22
    5116:	69 01       	movw	r12, r18
    5118:	7a 01       	movw	r14, r20
    511a:	84 e0       	ldi	r24, 0x04	; 4
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	70 d7       	rcall	.+3808   	; 0x6000 <malloc>
    5120:	ec 01       	movw	r28, r24
    5122:	89 2b       	or	r24, r25
    5124:	61 f1       	breq	.+88     	; 0x517e <twiCreate+0x80>
    5126:	a8 82       	st	Y, r10
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	b8 12       	cpse	r11, r24
    512c:	12 c0       	rjmp	.+36     	; 0x5152 <twiCreate+0x54>
    512e:	c7 01       	movw	r24, r14
    5130:	b6 01       	movw	r22, r12
    5132:	20 ea       	ldi	r18, 0xA0	; 160
    5134:	36 e8       	ldi	r19, 0x86	; 134
    5136:	41 e0       	ldi	r20, 0x01	; 1
    5138:	50 e0       	ldi	r21, 0x00	; 0
    513a:	15 d7       	rcall	.+3626   	; 0x5f66 <__udivmodsi4>
    513c:	da 01       	movw	r26, r20
    513e:	c9 01       	movw	r24, r18
    5140:	40 97       	sbiw	r24, 0x10	; 16
    5142:	a1 09       	sbc	r26, r1
    5144:	b1 09       	sbc	r27, r1
    5146:	b6 95       	lsr	r27
    5148:	a7 95       	ror	r26
    514a:	97 95       	ror	r25
    514c:	87 95       	ror	r24
    514e:	89 83       	std	Y+1, r24	; 0x01
    5150:	11 c0       	rjmp	.+34     	; 0x5174 <twiCreate+0x76>
    5152:	c7 01       	movw	r24, r14
    5154:	b6 01       	movw	r22, r12
    5156:	20 e8       	ldi	r18, 0x80	; 128
    5158:	3a e1       	ldi	r19, 0x1A	; 26
    515a:	46 e0       	ldi	r20, 0x06	; 6
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	03 d7       	rcall	.+3590   	; 0x5f66 <__udivmodsi4>
    5160:	da 01       	movw	r26, r20
    5162:	c9 01       	movw	r24, r18
    5164:	40 97       	sbiw	r24, 0x10	; 16
    5166:	a1 09       	sbc	r26, r1
    5168:	b1 09       	sbc	r27, r1
    516a:	b6 95       	lsr	r27
    516c:	a7 95       	ror	r26
    516e:	97 95       	ror	r25
    5170:	87 95       	ror	r24
    5172:	89 83       	std	Y+1, r24	; 0x01
    5174:	1b 83       	std	Y+3, r17	; 0x03
    5176:	0a 83       	std	Y+2, r16	; 0x02
    5178:	8c 2f       	mov	r24, r28
    517a:	9d 2f       	mov	r25, r29
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <twiCreate+0x84>
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	1f 91       	pop	r17
    5188:	0f 91       	pop	r16
    518a:	ff 90       	pop	r15
    518c:	ef 90       	pop	r14
    518e:	df 90       	pop	r13
    5190:	cf 90       	pop	r12
    5192:	bf 90       	pop	r11
    5194:	af 90       	pop	r10
    5196:	08 95       	ret

00005198 <twiIsBusy>:
    5198:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    519c:	81 70       	andi	r24, 0x01	; 1
    519e:	08 95       	ret

000051a0 <twiTransmit>:
    51a0:	ff 92       	push	r15
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	cf 93       	push	r28
    51a8:	df 93       	push	r29
    51aa:	00 97       	sbiw	r24, 0x00	; 0
    51ac:	d1 f1       	breq	.+116    	; 0x5222 <twiTransmit+0x82>
    51ae:	4a 30       	cpi	r20, 0x0A	; 10
    51b0:	d0 f5       	brcc	.+116    	; 0x5226 <twiTransmit+0x86>
    51b2:	f4 2e       	mov	r15, r20
    51b4:	8b 01       	movw	r16, r22
    51b6:	ec 01       	movw	r28, r24
    51b8:	ef df       	rcall	.-34     	; 0x5198 <twiIsBusy>
    51ba:	81 11       	cpse	r24, r1
    51bc:	36 c0       	rjmp	.+108    	; 0x522a <twiTransmit+0x8a>
    51be:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <_twiCurrentHandler>
    51c2:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <_twiCurrentHandler+0x1>
    51c6:	c8 17       	cp	r28, r24
    51c8:	d9 07       	cpc	r29, r25
    51ca:	41 f0       	breq	.+16     	; 0x51dc <twiTransmit+0x3c>
    51cc:	87 df       	rcall	.-242    	; 0x50dc <_initTwiInterface>
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    51d4:	d0 93 e1 13 	sts	0x13E1, r29	; 0x8013e1 <_twiCurrentHandler+0x1>
    51d8:	c0 93 e0 13 	sts	0x13E0, r28	; 0x8013e0 <_twiCurrentHandler>
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	8f 0d       	add	r24, r15
    51e0:	80 93 e2 13 	sts	0x13E2, r24	; 0x8013e2 <_twiMessageLen>
    51e4:	88 81       	ld	r24, Y
    51e6:	88 0f       	add	r24, r24
    51e8:	80 93 e3 13 	sts	0x13E3, r24	; 0x8013e3 <_twiMessageBuffer>
    51ec:	ff 20       	and	r15, r15
    51ee:	89 f0       	breq	.+34     	; 0x5212 <twiTransmit+0x72>
    51f0:	f8 01       	movw	r30, r16
    51f2:	a4 ee       	ldi	r26, 0xE4	; 228
    51f4:	b3 e1       	ldi	r27, 0x13	; 19
    51f6:	4f ef       	ldi	r20, 0xFF	; 255
    51f8:	4f 0d       	add	r20, r15
    51fa:	64 2f       	mov	r22, r20
    51fc:	70 e0       	ldi	r23, 0x00	; 0
    51fe:	cb 01       	movw	r24, r22
    5200:	01 96       	adiw	r24, 0x01	; 1
    5202:	b8 01       	movw	r22, r16
    5204:	68 0f       	add	r22, r24
    5206:	79 1f       	adc	r23, r25
    5208:	81 91       	ld	r24, Z+
    520a:	8d 93       	st	X+, r24
    520c:	e6 17       	cp	r30, r22
    520e:	f7 07       	cpc	r31, r23
    5210:	d9 f7       	brne	.-10     	; 0x5208 <twiTransmit+0x68>
    5212:	88 ef       	ldi	r24, 0xF8	; 248
    5214:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5218:	85 ea       	ldi	r24, 0xA5	; 165
    521a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    521e:	84 e0       	ldi	r24, 0x04	; 4
    5220:	05 c0       	rjmp	.+10     	; 0x522c <twiTransmit+0x8c>
    5222:	86 e0       	ldi	r24, 0x06	; 6
    5224:	03 c0       	rjmp	.+6      	; 0x522c <twiTransmit+0x8c>
    5226:	87 e0       	ldi	r24, 0x07	; 7
    5228:	01 c0       	rjmp	.+2      	; 0x522c <twiTransmit+0x8c>
    522a:	82 e0       	ldi	r24, 0x02	; 2
    522c:	df 91       	pop	r29
    522e:	cf 91       	pop	r28
    5230:	1f 91       	pop	r17
    5232:	0f 91       	pop	r16
    5234:	ff 90       	pop	r15
    5236:	08 95       	ret

00005238 <twiReceive>:
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	00 97       	sbiw	r24, 0x00	; 0
    5240:	29 f1       	breq	.+74     	; 0x528c <twiReceive+0x54>
    5242:	6b 30       	cpi	r22, 0x0B	; 11
    5244:	28 f5       	brcc	.+74     	; 0x5290 <twiReceive+0x58>
    5246:	16 2f       	mov	r17, r22
    5248:	ec 01       	movw	r28, r24
    524a:	a6 df       	rcall	.-180    	; 0x5198 <twiIsBusy>
    524c:	81 11       	cpse	r24, r1
    524e:	22 c0       	rjmp	.+68     	; 0x5294 <twiReceive+0x5c>
    5250:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <_twiCurrentHandler>
    5254:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <_twiCurrentHandler+0x1>
    5258:	c8 17       	cp	r28, r24
    525a:	d9 07       	cpc	r29, r25
    525c:	41 f0       	breq	.+16     	; 0x526e <twiReceive+0x36>
    525e:	3e df       	rcall	.-388    	; 0x50dc <_initTwiInterface>
    5260:	89 81       	ldd	r24, Y+1	; 0x01
    5262:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5266:	d0 93 e1 13 	sts	0x13E1, r29	; 0x8013e1 <_twiCurrentHandler+0x1>
    526a:	c0 93 e0 13 	sts	0x13E0, r28	; 0x8013e0 <_twiCurrentHandler>
    526e:	10 93 e2 13 	sts	0x13E2, r17	; 0x8013e2 <_twiMessageLen>
    5272:	88 81       	ld	r24, Y
    5274:	88 0f       	add	r24, r24
    5276:	81 60       	ori	r24, 0x01	; 1
    5278:	80 93 e3 13 	sts	0x13E3, r24	; 0x8013e3 <_twiMessageBuffer>
    527c:	88 ef       	ldi	r24, 0xF8	; 248
    527e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5282:	85 ea       	ldi	r24, 0xA5	; 165
    5284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5288:	85 e0       	ldi	r24, 0x05	; 5
    528a:	05 c0       	rjmp	.+10     	; 0x5296 <twiReceive+0x5e>
    528c:	86 e0       	ldi	r24, 0x06	; 6
    528e:	03 c0       	rjmp	.+6      	; 0x5296 <twiReceive+0x5e>
    5290:	87 e0       	ldi	r24, 0x07	; 7
    5292:	01 c0       	rjmp	.+2      	; 0x5296 <twiReceive+0x5e>
    5294:	82 e0       	ldi	r24, 0x02	; 2
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	1f 91       	pop	r17
    529c:	08 95       	ret

0000529e <__vector_39>:
    529e:	1f 92       	push	r1
    52a0:	0f 92       	push	r0
    52a2:	0f b6       	in	r0, 0x3f	; 63
    52a4:	0f 92       	push	r0
    52a6:	11 24       	eor	r1, r1
    52a8:	0b b6       	in	r0, 0x3b	; 59
    52aa:	0f 92       	push	r0
    52ac:	2f 93       	push	r18
    52ae:	3f 93       	push	r19
    52b0:	4f 93       	push	r20
    52b2:	5f 93       	push	r21
    52b4:	6f 93       	push	r22
    52b6:	7f 93       	push	r23
    52b8:	8f 93       	push	r24
    52ba:	9f 93       	push	r25
    52bc:	af 93       	push	r26
    52be:	bf 93       	push	r27
    52c0:	ef 93       	push	r30
    52c2:	ff 93       	push	r31
    52c4:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    52c8:	8e 2f       	mov	r24, r30
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	fc 01       	movw	r30, r24
    52ce:	38 97       	sbiw	r30, 0x08	; 8
    52d0:	e1 35       	cpi	r30, 0x51	; 81
    52d2:	f1 05       	cpc	r31, r1
    52d4:	08 f0       	brcs	.+2      	; 0x52d8 <__vector_39+0x3a>
    52d6:	75 c0       	rjmp	.+234    	; 0x53c2 <__vector_39+0x124>
    52d8:	88 27       	eor	r24, r24
    52da:	e4 58       	subi	r30, 0x84	; 132
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	8f 4f       	sbci	r24, 0xFF	; 255
    52e0:	64 c6       	rjmp	.+3272   	; 0x5faa <__tablejump2__>
    52e2:	10 92 df 13 	sts	0x13DF, r1	; 0x8013df <_index.1885>
    52e6:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <_index.1885>
    52ea:	80 91 e2 13 	lds	r24, 0x13E2	; 0x8013e2 <_twiMessageLen>
    52ee:	e8 17       	cp	r30, r24
    52f0:	70 f4       	brcc	.+28     	; 0x530e <__vector_39+0x70>
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	8e 0f       	add	r24, r30
    52f6:	80 93 df 13 	sts	0x13DF, r24	; 0x8013df <_index.1885>
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	ed 51       	subi	r30, 0x1D	; 29
    52fe:	fc 4e       	sbci	r31, 0xEC	; 236
    5300:	80 81       	ld	r24, Z
    5302:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5306:	85 e8       	ldi	r24, 0x85	; 133
    5308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    530c:	72 c0       	rjmp	.+228    	; 0x53f2 <__vector_39+0x154>
    530e:	84 e9       	ldi	r24, 0x94	; 148
    5310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5314:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <_twiCurrentHandler>
    5318:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <_twiCurrentHandler+0x1>
    531c:	dc 01       	movw	r26, r24
    531e:	12 96       	adiw	r26, 0x02	; 2
    5320:	ed 91       	ld	r30, X+
    5322:	fc 91       	ld	r31, X
    5324:	13 97       	sbiw	r26, 0x03	; 3
    5326:	30 97       	sbiw	r30, 0x00	; 0
    5328:	09 f4       	brne	.+2      	; 0x532c <__vector_39+0x8e>
    532a:	63 c0       	rjmp	.+198    	; 0x53f2 <__vector_39+0x154>
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	40 e0       	ldi	r20, 0x00	; 0
    5330:	50 e0       	ldi	r21, 0x00	; 0
    5332:	64 e0       	ldi	r22, 0x04	; 4
    5334:	19 95       	eicall
    5336:	5d c0       	rjmp	.+186    	; 0x53f2 <__vector_39+0x154>
    5338:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <_index.1885>
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	8e 0f       	add	r24, r30
    5340:	80 93 df 13 	sts	0x13DF, r24	; 0x8013df <_index.1885>
    5344:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	ed 51       	subi	r30, 0x1D	; 29
    534c:	fc 4e       	sbci	r31, 0xEC	; 236
    534e:	80 83       	st	Z, r24
    5350:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5354:	80 34       	cpi	r24, 0x40	; 64
    5356:	11 f4       	brne	.+4      	; 0x535c <__vector_39+0xbe>
    5358:	10 92 df 13 	sts	0x13DF, r1	; 0x8013df <_index.1885>
    535c:	20 91 df 13 	lds	r18, 0x13DF	; 0x8013df <_index.1885>
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	80 91 e2 13 	lds	r24, 0x13E2	; 0x8013e2 <_twiMessageLen>
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	28 17       	cp	r18, r24
    536c:	39 07       	cpc	r19, r25
    536e:	24 f4       	brge	.+8      	; 0x5378 <__vector_39+0xda>
    5370:	85 ec       	ldi	r24, 0xC5	; 197
    5372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5376:	3d c0       	rjmp	.+122    	; 0x53f2 <__vector_39+0x154>
    5378:	85 e8       	ldi	r24, 0x85	; 133
    537a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    537e:	39 c0       	rjmp	.+114    	; 0x53f2 <__vector_39+0x154>
    5380:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5384:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <_index.1885>
    5388:	f0 e0       	ldi	r31, 0x00	; 0
    538a:	ed 51       	subi	r30, 0x1D	; 29
    538c:	fc 4e       	sbci	r31, 0xEC	; 236
    538e:	80 83       	st	Z, r24
    5390:	84 e9       	ldi	r24, 0x94	; 148
    5392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5396:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <_twiCurrentHandler>
    539a:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <_twiCurrentHandler+0x1>
    539e:	dc 01       	movw	r26, r24
    53a0:	12 96       	adiw	r26, 0x02	; 2
    53a2:	ed 91       	ld	r30, X+
    53a4:	fc 91       	ld	r31, X
    53a6:	13 97       	sbiw	r26, 0x03	; 3
    53a8:	30 97       	sbiw	r30, 0x00	; 0
    53aa:	19 f1       	breq	.+70     	; 0x53f2 <__vector_39+0x154>
    53ac:	20 91 e2 13 	lds	r18, 0x13E2	; 0x8013e2 <_twiMessageLen>
    53b0:	43 ee       	ldi	r20, 0xE3	; 227
    53b2:	53 e1       	ldi	r21, 0x13	; 19
    53b4:	65 e0       	ldi	r22, 0x05	; 5
    53b6:	19 95       	eicall
    53b8:	1c c0       	rjmp	.+56     	; 0x53f2 <__vector_39+0x154>
    53ba:	85 ea       	ldi	r24, 0xA5	; 165
    53bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c0:	18 c0       	rjmp	.+48     	; 0x53f2 <__vector_39+0x154>
    53c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    53c6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53ca:	84 e0       	ldi	r24, 0x04	; 4
    53cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53d0:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <_twiCurrentHandler>
    53d4:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <_twiCurrentHandler+0x1>
    53d8:	dc 01       	movw	r26, r24
    53da:	12 96       	adiw	r26, 0x02	; 2
    53dc:	ed 91       	ld	r30, X+
    53de:	fc 91       	ld	r31, X
    53e0:	13 97       	sbiw	r26, 0x03	; 3
    53e2:	30 97       	sbiw	r30, 0x00	; 0
    53e4:	31 f0       	breq	.+12     	; 0x53f2 <__vector_39+0x154>
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	40 e0       	ldi	r20, 0x00	; 0
    53ea:	50 e0       	ldi	r21, 0x00	; 0
    53ec:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    53f0:	19 95       	eicall
    53f2:	ff 91       	pop	r31
    53f4:	ef 91       	pop	r30
    53f6:	bf 91       	pop	r27
    53f8:	af 91       	pop	r26
    53fa:	9f 91       	pop	r25
    53fc:	8f 91       	pop	r24
    53fe:	7f 91       	pop	r23
    5400:	6f 91       	pop	r22
    5402:	5f 91       	pop	r21
    5404:	4f 91       	pop	r20
    5406:	3f 91       	pop	r19
    5408:	2f 91       	pop	r18
    540a:	0f 90       	pop	r0
    540c:	0b be       	out	0x3b, r0	; 59
    540e:	0f 90       	pop	r0
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	0f 90       	pop	r0
    5414:	1f 90       	pop	r1
    5416:	18 95       	reti

00005418 <fifo_init>:
    5418:	fc 01       	movw	r30, r24
    541a:	41 11       	cpse	r20, r1
    541c:	01 c0       	rjmp	.+2      	; 0x5420 <fifo_init+0x8>
    541e:	11 d7       	rcall	.+3618   	; 0x6242 <abort>
    5420:	84 2f       	mov	r24, r20
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	9c 01       	movw	r18, r24
    5426:	21 50       	subi	r18, 0x01	; 1
    5428:	31 09       	sbc	r19, r1
    542a:	82 23       	and	r24, r18
    542c:	93 23       	and	r25, r19
    542e:	89 2b       	or	r24, r25
    5430:	09 f0       	breq	.+2      	; 0x5434 <fifo_init+0x1c>
    5432:	07 d7       	rcall	.+3598   	; 0x6242 <abort>
    5434:	41 38       	cpi	r20, 0x81	; 129
    5436:	08 f0       	brcs	.+2      	; 0x543a <fifo_init+0x22>
    5438:	04 d7       	rcall	.+3592   	; 0x6242 <abort>
    543a:	12 82       	std	Z+2, r1	; 0x02
    543c:	13 82       	std	Z+3, r1	; 0x03
    543e:	44 83       	std	Z+4, r20	; 0x04
    5440:	44 0f       	add	r20, r20
    5442:	41 50       	subi	r20, 0x01	; 1
    5444:	45 83       	std	Z+5, r20	; 0x05
    5446:	71 83       	std	Z+1, r23	; 0x01
    5448:	60 83       	st	Z, r22
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	08 95       	ret

00005450 <vfprintf>:
    5450:	2f 92       	push	r2
    5452:	3f 92       	push	r3
    5454:	4f 92       	push	r4
    5456:	5f 92       	push	r5
    5458:	6f 92       	push	r6
    545a:	7f 92       	push	r7
    545c:	8f 92       	push	r8
    545e:	9f 92       	push	r9
    5460:	af 92       	push	r10
    5462:	bf 92       	push	r11
    5464:	cf 92       	push	r12
    5466:	df 92       	push	r13
    5468:	ef 92       	push	r14
    546a:	ff 92       	push	r15
    546c:	0f 93       	push	r16
    546e:	1f 93       	push	r17
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	cd b7       	in	r28, 0x3d	; 61
    5476:	de b7       	in	r29, 0x3e	; 62
    5478:	60 97       	sbiw	r28, 0x10	; 16
    547a:	0f b6       	in	r0, 0x3f	; 63
    547c:	f8 94       	cli
    547e:	de bf       	out	0x3e, r29	; 62
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	cd bf       	out	0x3d, r28	; 61
    5484:	7c 01       	movw	r14, r24
    5486:	1b 01       	movw	r2, r22
    5488:	6a 01       	movw	r12, r20
    548a:	fc 01       	movw	r30, r24
    548c:	17 82       	std	Z+7, r1	; 0x07
    548e:	16 82       	std	Z+6, r1	; 0x06
    5490:	83 81       	ldd	r24, Z+3	; 0x03
    5492:	81 ff       	sbrs	r24, 1
    5494:	2a c3       	rjmp	.+1620   	; 0x5aea <vfprintf+0x69a>
    5496:	9e 01       	movw	r18, r28
    5498:	2f 5f       	subi	r18, 0xFF	; 255
    549a:	3f 4f       	sbci	r19, 0xFF	; 255
    549c:	39 01       	movw	r6, r18
    549e:	f7 01       	movw	r30, r14
    54a0:	93 81       	ldd	r25, Z+3	; 0x03
    54a2:	f1 01       	movw	r30, r2
    54a4:	93 fd       	sbrc	r25, 3
    54a6:	85 91       	lpm	r24, Z+
    54a8:	93 ff       	sbrs	r25, 3
    54aa:	81 91       	ld	r24, Z+
    54ac:	1f 01       	movw	r2, r30
    54ae:	88 23       	and	r24, r24
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <vfprintf+0x64>
    54b2:	17 c3       	rjmp	.+1582   	; 0x5ae2 <vfprintf+0x692>
    54b4:	85 32       	cpi	r24, 0x25	; 37
    54b6:	39 f4       	brne	.+14     	; 0x54c6 <vfprintf+0x76>
    54b8:	93 fd       	sbrc	r25, 3
    54ba:	85 91       	lpm	r24, Z+
    54bc:	93 ff       	sbrs	r25, 3
    54be:	81 91       	ld	r24, Z+
    54c0:	1f 01       	movw	r2, r30
    54c2:	85 32       	cpi	r24, 0x25	; 37
    54c4:	31 f4       	brne	.+12     	; 0x54d2 <vfprintf+0x82>
    54c6:	b7 01       	movw	r22, r14
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	bd d7       	rcall	.+3962   	; 0x6446 <fputc>
    54cc:	56 01       	movw	r10, r12
    54ce:	65 01       	movw	r12, r10
    54d0:	e6 cf       	rjmp	.-52     	; 0x549e <vfprintf+0x4e>
    54d2:	10 e0       	ldi	r17, 0x00	; 0
    54d4:	51 2c       	mov	r5, r1
    54d6:	91 2c       	mov	r9, r1
    54d8:	ff e1       	ldi	r31, 0x1F	; 31
    54da:	f9 15       	cp	r31, r9
    54dc:	d8 f0       	brcs	.+54     	; 0x5514 <vfprintf+0xc4>
    54de:	8b 32       	cpi	r24, 0x2B	; 43
    54e0:	79 f0       	breq	.+30     	; 0x5500 <vfprintf+0xb0>
    54e2:	38 f4       	brcc	.+14     	; 0x54f2 <vfprintf+0xa2>
    54e4:	80 32       	cpi	r24, 0x20	; 32
    54e6:	79 f0       	breq	.+30     	; 0x5506 <vfprintf+0xb6>
    54e8:	83 32       	cpi	r24, 0x23	; 35
    54ea:	a1 f4       	brne	.+40     	; 0x5514 <vfprintf+0xc4>
    54ec:	f9 2d       	mov	r31, r9
    54ee:	f0 61       	ori	r31, 0x10	; 16
    54f0:	2e c0       	rjmp	.+92     	; 0x554e <vfprintf+0xfe>
    54f2:	8d 32       	cpi	r24, 0x2D	; 45
    54f4:	61 f0       	breq	.+24     	; 0x550e <vfprintf+0xbe>
    54f6:	80 33       	cpi	r24, 0x30	; 48
    54f8:	69 f4       	brne	.+26     	; 0x5514 <vfprintf+0xc4>
    54fa:	29 2d       	mov	r18, r9
    54fc:	21 60       	ori	r18, 0x01	; 1
    54fe:	2d c0       	rjmp	.+90     	; 0x555a <vfprintf+0x10a>
    5500:	39 2d       	mov	r19, r9
    5502:	32 60       	ori	r19, 0x02	; 2
    5504:	93 2e       	mov	r9, r19
    5506:	89 2d       	mov	r24, r9
    5508:	84 60       	ori	r24, 0x04	; 4
    550a:	98 2e       	mov	r9, r24
    550c:	2a c0       	rjmp	.+84     	; 0x5562 <vfprintf+0x112>
    550e:	e9 2d       	mov	r30, r9
    5510:	e8 60       	ori	r30, 0x08	; 8
    5512:	15 c0       	rjmp	.+42     	; 0x553e <vfprintf+0xee>
    5514:	97 fc       	sbrc	r9, 7
    5516:	2d c0       	rjmp	.+90     	; 0x5572 <vfprintf+0x122>
    5518:	20 ed       	ldi	r18, 0xD0	; 208
    551a:	28 0f       	add	r18, r24
    551c:	2a 30       	cpi	r18, 0x0A	; 10
    551e:	88 f4       	brcc	.+34     	; 0x5542 <vfprintf+0xf2>
    5520:	96 fe       	sbrs	r9, 6
    5522:	06 c0       	rjmp	.+12     	; 0x5530 <vfprintf+0xe0>
    5524:	3a e0       	ldi	r19, 0x0A	; 10
    5526:	13 9f       	mul	r17, r19
    5528:	20 0d       	add	r18, r0
    552a:	11 24       	eor	r1, r1
    552c:	12 2f       	mov	r17, r18
    552e:	19 c0       	rjmp	.+50     	; 0x5562 <vfprintf+0x112>
    5530:	8a e0       	ldi	r24, 0x0A	; 10
    5532:	58 9e       	mul	r5, r24
    5534:	20 0d       	add	r18, r0
    5536:	11 24       	eor	r1, r1
    5538:	52 2e       	mov	r5, r18
    553a:	e9 2d       	mov	r30, r9
    553c:	e0 62       	ori	r30, 0x20	; 32
    553e:	9e 2e       	mov	r9, r30
    5540:	10 c0       	rjmp	.+32     	; 0x5562 <vfprintf+0x112>
    5542:	8e 32       	cpi	r24, 0x2E	; 46
    5544:	31 f4       	brne	.+12     	; 0x5552 <vfprintf+0x102>
    5546:	96 fc       	sbrc	r9, 6
    5548:	cc c2       	rjmp	.+1432   	; 0x5ae2 <vfprintf+0x692>
    554a:	f9 2d       	mov	r31, r9
    554c:	f0 64       	ori	r31, 0x40	; 64
    554e:	9f 2e       	mov	r9, r31
    5550:	08 c0       	rjmp	.+16     	; 0x5562 <vfprintf+0x112>
    5552:	8c 36       	cpi	r24, 0x6C	; 108
    5554:	21 f4       	brne	.+8      	; 0x555e <vfprintf+0x10e>
    5556:	29 2d       	mov	r18, r9
    5558:	20 68       	ori	r18, 0x80	; 128
    555a:	92 2e       	mov	r9, r18
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <vfprintf+0x112>
    555e:	88 36       	cpi	r24, 0x68	; 104
    5560:	41 f4       	brne	.+16     	; 0x5572 <vfprintf+0x122>
    5562:	f1 01       	movw	r30, r2
    5564:	93 fd       	sbrc	r25, 3
    5566:	85 91       	lpm	r24, Z+
    5568:	93 ff       	sbrs	r25, 3
    556a:	81 91       	ld	r24, Z+
    556c:	1f 01       	movw	r2, r30
    556e:	81 11       	cpse	r24, r1
    5570:	b3 cf       	rjmp	.-154    	; 0x54d8 <vfprintf+0x88>
    5572:	9b eb       	ldi	r25, 0xBB	; 187
    5574:	98 0f       	add	r25, r24
    5576:	93 30       	cpi	r25, 0x03	; 3
    5578:	20 f4       	brcc	.+8      	; 0x5582 <vfprintf+0x132>
    557a:	99 2d       	mov	r25, r9
    557c:	90 61       	ori	r25, 0x10	; 16
    557e:	80 5e       	subi	r24, 0xE0	; 224
    5580:	07 c0       	rjmp	.+14     	; 0x5590 <vfprintf+0x140>
    5582:	9b e9       	ldi	r25, 0x9B	; 155
    5584:	98 0f       	add	r25, r24
    5586:	93 30       	cpi	r25, 0x03	; 3
    5588:	08 f0       	brcs	.+2      	; 0x558c <vfprintf+0x13c>
    558a:	59 c1       	rjmp	.+690    	; 0x583e <vfprintf+0x3ee>
    558c:	99 2d       	mov	r25, r9
    558e:	9f 7e       	andi	r25, 0xEF	; 239
    5590:	96 ff       	sbrs	r25, 6
    5592:	16 e0       	ldi	r17, 0x06	; 6
    5594:	9f 73       	andi	r25, 0x3F	; 63
    5596:	99 2e       	mov	r9, r25
    5598:	85 36       	cpi	r24, 0x65	; 101
    559a:	19 f4       	brne	.+6      	; 0x55a2 <vfprintf+0x152>
    559c:	90 64       	ori	r25, 0x40	; 64
    559e:	99 2e       	mov	r9, r25
    55a0:	08 c0       	rjmp	.+16     	; 0x55b2 <vfprintf+0x162>
    55a2:	86 36       	cpi	r24, 0x66	; 102
    55a4:	21 f4       	brne	.+8      	; 0x55ae <vfprintf+0x15e>
    55a6:	39 2f       	mov	r19, r25
    55a8:	30 68       	ori	r19, 0x80	; 128
    55aa:	93 2e       	mov	r9, r19
    55ac:	02 c0       	rjmp	.+4      	; 0x55b2 <vfprintf+0x162>
    55ae:	11 11       	cpse	r17, r1
    55b0:	11 50       	subi	r17, 0x01	; 1
    55b2:	97 fe       	sbrs	r9, 7
    55b4:	07 c0       	rjmp	.+14     	; 0x55c4 <vfprintf+0x174>
    55b6:	1c 33       	cpi	r17, 0x3C	; 60
    55b8:	50 f4       	brcc	.+20     	; 0x55ce <vfprintf+0x17e>
    55ba:	44 24       	eor	r4, r4
    55bc:	43 94       	inc	r4
    55be:	41 0e       	add	r4, r17
    55c0:	27 e0       	ldi	r18, 0x07	; 7
    55c2:	0b c0       	rjmp	.+22     	; 0x55da <vfprintf+0x18a>
    55c4:	18 30       	cpi	r17, 0x08	; 8
    55c6:	38 f0       	brcs	.+14     	; 0x55d6 <vfprintf+0x186>
    55c8:	27 e0       	ldi	r18, 0x07	; 7
    55ca:	17 e0       	ldi	r17, 0x07	; 7
    55cc:	05 c0       	rjmp	.+10     	; 0x55d8 <vfprintf+0x188>
    55ce:	27 e0       	ldi	r18, 0x07	; 7
    55d0:	9c e3       	ldi	r25, 0x3C	; 60
    55d2:	49 2e       	mov	r4, r25
    55d4:	02 c0       	rjmp	.+4      	; 0x55da <vfprintf+0x18a>
    55d6:	21 2f       	mov	r18, r17
    55d8:	41 2c       	mov	r4, r1
    55da:	56 01       	movw	r10, r12
    55dc:	84 e0       	ldi	r24, 0x04	; 4
    55de:	a8 0e       	add	r10, r24
    55e0:	b1 1c       	adc	r11, r1
    55e2:	f6 01       	movw	r30, r12
    55e4:	60 81       	ld	r22, Z
    55e6:	71 81       	ldd	r23, Z+1	; 0x01
    55e8:	82 81       	ldd	r24, Z+2	; 0x02
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	04 2d       	mov	r16, r4
    55ee:	a3 01       	movw	r20, r6
    55f0:	2c d6       	rcall	.+3160   	; 0x624a <__ftoa_engine>
    55f2:	6c 01       	movw	r12, r24
    55f4:	f9 81       	ldd	r31, Y+1	; 0x01
    55f6:	fc 87       	std	Y+12, r31	; 0x0c
    55f8:	f0 ff       	sbrs	r31, 0
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <vfprintf+0x1b0>
    55fc:	f3 ff       	sbrs	r31, 3
    55fe:	06 c0       	rjmp	.+12     	; 0x560c <vfprintf+0x1bc>
    5600:	91 fc       	sbrc	r9, 1
    5602:	06 c0       	rjmp	.+12     	; 0x5610 <vfprintf+0x1c0>
    5604:	92 fe       	sbrs	r9, 2
    5606:	06 c0       	rjmp	.+12     	; 0x5614 <vfprintf+0x1c4>
    5608:	00 e2       	ldi	r16, 0x20	; 32
    560a:	05 c0       	rjmp	.+10     	; 0x5616 <vfprintf+0x1c6>
    560c:	0d e2       	ldi	r16, 0x2D	; 45
    560e:	03 c0       	rjmp	.+6      	; 0x5616 <vfprintf+0x1c6>
    5610:	0b e2       	ldi	r16, 0x2B	; 43
    5612:	01 c0       	rjmp	.+2      	; 0x5616 <vfprintf+0x1c6>
    5614:	00 e0       	ldi	r16, 0x00	; 0
    5616:	8c 85       	ldd	r24, Y+12	; 0x0c
    5618:	8c 70       	andi	r24, 0x0C	; 12
    561a:	19 f0       	breq	.+6      	; 0x5622 <vfprintf+0x1d2>
    561c:	01 11       	cpse	r16, r1
    561e:	43 c2       	rjmp	.+1158   	; 0x5aa6 <vfprintf+0x656>
    5620:	80 c2       	rjmp	.+1280   	; 0x5b22 <vfprintf+0x6d2>
    5622:	97 fe       	sbrs	r9, 7
    5624:	10 c0       	rjmp	.+32     	; 0x5646 <vfprintf+0x1f6>
    5626:	4c 0c       	add	r4, r12
    5628:	fc 85       	ldd	r31, Y+12	; 0x0c
    562a:	f4 ff       	sbrs	r31, 4
    562c:	04 c0       	rjmp	.+8      	; 0x5636 <vfprintf+0x1e6>
    562e:	8a 81       	ldd	r24, Y+2	; 0x02
    5630:	81 33       	cpi	r24, 0x31	; 49
    5632:	09 f4       	brne	.+2      	; 0x5636 <vfprintf+0x1e6>
    5634:	4a 94       	dec	r4
    5636:	14 14       	cp	r1, r4
    5638:	74 f5       	brge	.+92     	; 0x5696 <vfprintf+0x246>
    563a:	28 e0       	ldi	r18, 0x08	; 8
    563c:	24 15       	cp	r18, r4
    563e:	78 f5       	brcc	.+94     	; 0x569e <vfprintf+0x24e>
    5640:	88 e0       	ldi	r24, 0x08	; 8
    5642:	48 2e       	mov	r4, r24
    5644:	2c c0       	rjmp	.+88     	; 0x569e <vfprintf+0x24e>
    5646:	96 fc       	sbrc	r9, 6
    5648:	2a c0       	rjmp	.+84     	; 0x569e <vfprintf+0x24e>
    564a:	81 2f       	mov	r24, r17
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	8c 15       	cp	r24, r12
    5650:	9d 05       	cpc	r25, r13
    5652:	9c f0       	brlt	.+38     	; 0x567a <vfprintf+0x22a>
    5654:	3c ef       	ldi	r19, 0xFC	; 252
    5656:	c3 16       	cp	r12, r19
    5658:	3f ef       	ldi	r19, 0xFF	; 255
    565a:	d3 06       	cpc	r13, r19
    565c:	74 f0       	brlt	.+28     	; 0x567a <vfprintf+0x22a>
    565e:	89 2d       	mov	r24, r9
    5660:	80 68       	ori	r24, 0x80	; 128
    5662:	98 2e       	mov	r9, r24
    5664:	0a c0       	rjmp	.+20     	; 0x567a <vfprintf+0x22a>
    5666:	e2 e0       	ldi	r30, 0x02	; 2
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	ec 0f       	add	r30, r28
    566c:	fd 1f       	adc	r31, r29
    566e:	e1 0f       	add	r30, r17
    5670:	f1 1d       	adc	r31, r1
    5672:	80 81       	ld	r24, Z
    5674:	80 33       	cpi	r24, 0x30	; 48
    5676:	19 f4       	brne	.+6      	; 0x567e <vfprintf+0x22e>
    5678:	11 50       	subi	r17, 0x01	; 1
    567a:	11 11       	cpse	r17, r1
    567c:	f4 cf       	rjmp	.-24     	; 0x5666 <vfprintf+0x216>
    567e:	97 fe       	sbrs	r9, 7
    5680:	0e c0       	rjmp	.+28     	; 0x569e <vfprintf+0x24e>
    5682:	44 24       	eor	r4, r4
    5684:	43 94       	inc	r4
    5686:	41 0e       	add	r4, r17
    5688:	81 2f       	mov	r24, r17
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	c8 16       	cp	r12, r24
    568e:	d9 06       	cpc	r13, r25
    5690:	2c f4       	brge	.+10     	; 0x569c <vfprintf+0x24c>
    5692:	1c 19       	sub	r17, r12
    5694:	04 c0       	rjmp	.+8      	; 0x569e <vfprintf+0x24e>
    5696:	44 24       	eor	r4, r4
    5698:	43 94       	inc	r4
    569a:	01 c0       	rjmp	.+2      	; 0x569e <vfprintf+0x24e>
    569c:	10 e0       	ldi	r17, 0x00	; 0
    569e:	97 fe       	sbrs	r9, 7
    56a0:	06 c0       	rjmp	.+12     	; 0x56ae <vfprintf+0x25e>
    56a2:	1c 14       	cp	r1, r12
    56a4:	1d 04       	cpc	r1, r13
    56a6:	34 f4       	brge	.+12     	; 0x56b4 <vfprintf+0x264>
    56a8:	c6 01       	movw	r24, r12
    56aa:	01 96       	adiw	r24, 0x01	; 1
    56ac:	05 c0       	rjmp	.+10     	; 0x56b8 <vfprintf+0x268>
    56ae:	85 e0       	ldi	r24, 0x05	; 5
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	02 c0       	rjmp	.+4      	; 0x56b8 <vfprintf+0x268>
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	01 11       	cpse	r16, r1
    56ba:	01 96       	adiw	r24, 0x01	; 1
    56bc:	11 23       	and	r17, r17
    56be:	31 f0       	breq	.+12     	; 0x56cc <vfprintf+0x27c>
    56c0:	21 2f       	mov	r18, r17
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	2f 5f       	subi	r18, 0xFF	; 255
    56c6:	3f 4f       	sbci	r19, 0xFF	; 255
    56c8:	82 0f       	add	r24, r18
    56ca:	93 1f       	adc	r25, r19
    56cc:	25 2d       	mov	r18, r5
    56ce:	30 e0       	ldi	r19, 0x00	; 0
    56d0:	82 17       	cp	r24, r18
    56d2:	93 07       	cpc	r25, r19
    56d4:	14 f4       	brge	.+4      	; 0x56da <vfprintf+0x28a>
    56d6:	58 1a       	sub	r5, r24
    56d8:	01 c0       	rjmp	.+2      	; 0x56dc <vfprintf+0x28c>
    56da:	51 2c       	mov	r5, r1
    56dc:	89 2d       	mov	r24, r9
    56de:	89 70       	andi	r24, 0x09	; 9
    56e0:	41 f4       	brne	.+16     	; 0x56f2 <vfprintf+0x2a2>
    56e2:	55 20       	and	r5, r5
    56e4:	31 f0       	breq	.+12     	; 0x56f2 <vfprintf+0x2a2>
    56e6:	b7 01       	movw	r22, r14
    56e8:	80 e2       	ldi	r24, 0x20	; 32
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	ac d6       	rcall	.+3416   	; 0x6446 <fputc>
    56ee:	5a 94       	dec	r5
    56f0:	f8 cf       	rjmp	.-16     	; 0x56e2 <vfprintf+0x292>
    56f2:	00 23       	and	r16, r16
    56f4:	21 f0       	breq	.+8      	; 0x56fe <vfprintf+0x2ae>
    56f6:	b7 01       	movw	r22, r14
    56f8:	80 2f       	mov	r24, r16
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	a4 d6       	rcall	.+3400   	; 0x6446 <fputc>
    56fe:	93 fc       	sbrc	r9, 3
    5700:	08 c0       	rjmp	.+16     	; 0x5712 <vfprintf+0x2c2>
    5702:	55 20       	and	r5, r5
    5704:	31 f0       	breq	.+12     	; 0x5712 <vfprintf+0x2c2>
    5706:	b7 01       	movw	r22, r14
    5708:	80 e3       	ldi	r24, 0x30	; 48
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	9c d6       	rcall	.+3384   	; 0x6446 <fputc>
    570e:	5a 94       	dec	r5
    5710:	f8 cf       	rjmp	.-16     	; 0x5702 <vfprintf+0x2b2>
    5712:	97 fe       	sbrs	r9, 7
    5714:	4a c0       	rjmp	.+148    	; 0x57aa <vfprintf+0x35a>
    5716:	46 01       	movw	r8, r12
    5718:	d7 fe       	sbrs	r13, 7
    571a:	02 c0       	rjmp	.+4      	; 0x5720 <vfprintf+0x2d0>
    571c:	81 2c       	mov	r8, r1
    571e:	91 2c       	mov	r9, r1
    5720:	c6 01       	movw	r24, r12
    5722:	88 19       	sub	r24, r8
    5724:	99 09       	sbc	r25, r9
    5726:	f3 01       	movw	r30, r6
    5728:	e8 0f       	add	r30, r24
    572a:	f9 1f       	adc	r31, r25
    572c:	fe 87       	std	Y+14, r31	; 0x0e
    572e:	ed 87       	std	Y+13, r30	; 0x0d
    5730:	96 01       	movw	r18, r12
    5732:	24 19       	sub	r18, r4
    5734:	31 09       	sbc	r19, r1
    5736:	38 8b       	std	Y+16, r19	; 0x10
    5738:	2f 87       	std	Y+15, r18	; 0x0f
    573a:	01 2f       	mov	r16, r17
    573c:	10 e0       	ldi	r17, 0x00	; 0
    573e:	11 95       	neg	r17
    5740:	01 95       	neg	r16
    5742:	11 09       	sbc	r17, r1
    5744:	3f ef       	ldi	r19, 0xFF	; 255
    5746:	83 16       	cp	r8, r19
    5748:	93 06       	cpc	r9, r19
    574a:	21 f4       	brne	.+8      	; 0x5754 <vfprintf+0x304>
    574c:	b7 01       	movw	r22, r14
    574e:	8e e2       	ldi	r24, 0x2E	; 46
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	79 d6       	rcall	.+3314   	; 0x6446 <fputc>
    5754:	c8 14       	cp	r12, r8
    5756:	d9 04       	cpc	r13, r9
    5758:	4c f0       	brlt	.+18     	; 0x576c <vfprintf+0x31c>
    575a:	8f 85       	ldd	r24, Y+15	; 0x0f
    575c:	98 89       	ldd	r25, Y+16	; 0x10
    575e:	88 15       	cp	r24, r8
    5760:	99 05       	cpc	r25, r9
    5762:	24 f4       	brge	.+8      	; 0x576c <vfprintf+0x31c>
    5764:	ed 85       	ldd	r30, Y+13	; 0x0d
    5766:	fe 85       	ldd	r31, Y+14	; 0x0e
    5768:	81 81       	ldd	r24, Z+1	; 0x01
    576a:	01 c0       	rjmp	.+2      	; 0x576e <vfprintf+0x31e>
    576c:	80 e3       	ldi	r24, 0x30	; 48
    576e:	f1 e0       	ldi	r31, 0x01	; 1
    5770:	8f 1a       	sub	r8, r31
    5772:	91 08       	sbc	r9, r1
    5774:	2d 85       	ldd	r18, Y+13	; 0x0d
    5776:	3e 85       	ldd	r19, Y+14	; 0x0e
    5778:	2f 5f       	subi	r18, 0xFF	; 255
    577a:	3f 4f       	sbci	r19, 0xFF	; 255
    577c:	3e 87       	std	Y+14, r19	; 0x0e
    577e:	2d 87       	std	Y+13, r18	; 0x0d
    5780:	80 16       	cp	r8, r16
    5782:	91 06       	cpc	r9, r17
    5784:	24 f0       	brlt	.+8      	; 0x578e <vfprintf+0x33e>
    5786:	b7 01       	movw	r22, r14
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	5d d6       	rcall	.+3258   	; 0x6446 <fputc>
    578c:	db cf       	rjmp	.-74     	; 0x5744 <vfprintf+0x2f4>
    578e:	c8 14       	cp	r12, r8
    5790:	d9 04       	cpc	r13, r9
    5792:	41 f4       	brne	.+16     	; 0x57a4 <vfprintf+0x354>
    5794:	9a 81       	ldd	r25, Y+2	; 0x02
    5796:	96 33       	cpi	r25, 0x36	; 54
    5798:	20 f4       	brcc	.+8      	; 0x57a2 <vfprintf+0x352>
    579a:	95 33       	cpi	r25, 0x35	; 53
    579c:	19 f4       	brne	.+6      	; 0x57a4 <vfprintf+0x354>
    579e:	3c 85       	ldd	r19, Y+12	; 0x0c
    57a0:	34 ff       	sbrs	r19, 4
    57a2:	81 e3       	ldi	r24, 0x31	; 49
    57a4:	b7 01       	movw	r22, r14
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	48 c0       	rjmp	.+144    	; 0x583a <vfprintf+0x3ea>
    57aa:	8a 81       	ldd	r24, Y+2	; 0x02
    57ac:	81 33       	cpi	r24, 0x31	; 49
    57ae:	19 f0       	breq	.+6      	; 0x57b6 <vfprintf+0x366>
    57b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    57b2:	9f 7e       	andi	r25, 0xEF	; 239
    57b4:	9c 87       	std	Y+12, r25	; 0x0c
    57b6:	b7 01       	movw	r22, r14
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	45 d6       	rcall	.+3210   	; 0x6446 <fputc>
    57bc:	11 11       	cpse	r17, r1
    57be:	05 c0       	rjmp	.+10     	; 0x57ca <vfprintf+0x37a>
    57c0:	94 fc       	sbrc	r9, 4
    57c2:	16 c0       	rjmp	.+44     	; 0x57f0 <vfprintf+0x3a0>
    57c4:	85 e6       	ldi	r24, 0x65	; 101
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	15 c0       	rjmp	.+42     	; 0x57f4 <vfprintf+0x3a4>
    57ca:	b7 01       	movw	r22, r14
    57cc:	8e e2       	ldi	r24, 0x2E	; 46
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	3a d6       	rcall	.+3188   	; 0x6446 <fputc>
    57d2:	1e 5f       	subi	r17, 0xFE	; 254
    57d4:	82 e0       	ldi	r24, 0x02	; 2
    57d6:	01 e0       	ldi	r16, 0x01	; 1
    57d8:	08 0f       	add	r16, r24
    57da:	f3 01       	movw	r30, r6
    57dc:	e8 0f       	add	r30, r24
    57de:	f1 1d       	adc	r31, r1
    57e0:	80 81       	ld	r24, Z
    57e2:	b7 01       	movw	r22, r14
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	2f d6       	rcall	.+3166   	; 0x6446 <fputc>
    57e8:	80 2f       	mov	r24, r16
    57ea:	01 13       	cpse	r16, r17
    57ec:	f4 cf       	rjmp	.-24     	; 0x57d6 <vfprintf+0x386>
    57ee:	e8 cf       	rjmp	.-48     	; 0x57c0 <vfprintf+0x370>
    57f0:	85 e4       	ldi	r24, 0x45	; 69
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	b7 01       	movw	r22, r14
    57f6:	27 d6       	rcall	.+3150   	; 0x6446 <fputc>
    57f8:	d7 fc       	sbrc	r13, 7
    57fa:	06 c0       	rjmp	.+12     	; 0x5808 <vfprintf+0x3b8>
    57fc:	c1 14       	cp	r12, r1
    57fe:	d1 04       	cpc	r13, r1
    5800:	41 f4       	brne	.+16     	; 0x5812 <vfprintf+0x3c2>
    5802:	ec 85       	ldd	r30, Y+12	; 0x0c
    5804:	e4 ff       	sbrs	r30, 4
    5806:	05 c0       	rjmp	.+10     	; 0x5812 <vfprintf+0x3c2>
    5808:	d1 94       	neg	r13
    580a:	c1 94       	neg	r12
    580c:	d1 08       	sbc	r13, r1
    580e:	8d e2       	ldi	r24, 0x2D	; 45
    5810:	01 c0       	rjmp	.+2      	; 0x5814 <vfprintf+0x3c4>
    5812:	8b e2       	ldi	r24, 0x2B	; 43
    5814:	b7 01       	movw	r22, r14
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	16 d6       	rcall	.+3116   	; 0x6446 <fputc>
    581a:	80 e3       	ldi	r24, 0x30	; 48
    581c:	2a e0       	ldi	r18, 0x0A	; 10
    581e:	c2 16       	cp	r12, r18
    5820:	d1 04       	cpc	r13, r1
    5822:	2c f0       	brlt	.+10     	; 0x582e <vfprintf+0x3de>
    5824:	8f 5f       	subi	r24, 0xFF	; 255
    5826:	fa e0       	ldi	r31, 0x0A	; 10
    5828:	cf 1a       	sub	r12, r31
    582a:	d1 08       	sbc	r13, r1
    582c:	f7 cf       	rjmp	.-18     	; 0x581c <vfprintf+0x3cc>
    582e:	b7 01       	movw	r22, r14
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	09 d6       	rcall	.+3090   	; 0x6446 <fputc>
    5834:	b7 01       	movw	r22, r14
    5836:	c6 01       	movw	r24, r12
    5838:	c0 96       	adiw	r24, 0x30	; 48
    583a:	05 d6       	rcall	.+3082   	; 0x6446 <fputc>
    583c:	49 c1       	rjmp	.+658    	; 0x5ad0 <vfprintf+0x680>
    583e:	83 36       	cpi	r24, 0x63	; 99
    5840:	31 f0       	breq	.+12     	; 0x584e <vfprintf+0x3fe>
    5842:	83 37       	cpi	r24, 0x73	; 115
    5844:	79 f0       	breq	.+30     	; 0x5864 <vfprintf+0x414>
    5846:	83 35       	cpi	r24, 0x53	; 83
    5848:	09 f0       	breq	.+2      	; 0x584c <vfprintf+0x3fc>
    584a:	52 c0       	rjmp	.+164    	; 0x58f0 <vfprintf+0x4a0>
    584c:	1f c0       	rjmp	.+62     	; 0x588c <vfprintf+0x43c>
    584e:	56 01       	movw	r10, r12
    5850:	32 e0       	ldi	r19, 0x02	; 2
    5852:	a3 0e       	add	r10, r19
    5854:	b1 1c       	adc	r11, r1
    5856:	f6 01       	movw	r30, r12
    5858:	80 81       	ld	r24, Z
    585a:	89 83       	std	Y+1, r24	; 0x01
    585c:	01 e0       	ldi	r16, 0x01	; 1
    585e:	10 e0       	ldi	r17, 0x00	; 0
    5860:	63 01       	movw	r12, r6
    5862:	11 c0       	rjmp	.+34     	; 0x5886 <vfprintf+0x436>
    5864:	56 01       	movw	r10, r12
    5866:	f2 e0       	ldi	r31, 0x02	; 2
    5868:	af 0e       	add	r10, r31
    586a:	b1 1c       	adc	r11, r1
    586c:	f6 01       	movw	r30, r12
    586e:	c0 80       	ld	r12, Z
    5870:	d1 80       	ldd	r13, Z+1	; 0x01
    5872:	96 fe       	sbrs	r9, 6
    5874:	03 c0       	rjmp	.+6      	; 0x587c <vfprintf+0x42c>
    5876:	61 2f       	mov	r22, r17
    5878:	70 e0       	ldi	r23, 0x00	; 0
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <vfprintf+0x430>
    587c:	6f ef       	ldi	r22, 0xFF	; 255
    587e:	7f ef       	ldi	r23, 0xFF	; 255
    5880:	c6 01       	movw	r24, r12
    5882:	d6 d5       	rcall	.+2988   	; 0x6430 <strnlen>
    5884:	8c 01       	movw	r16, r24
    5886:	f9 2d       	mov	r31, r9
    5888:	ff 77       	andi	r31, 0x7F	; 127
    588a:	13 c0       	rjmp	.+38     	; 0x58b2 <vfprintf+0x462>
    588c:	56 01       	movw	r10, r12
    588e:	22 e0       	ldi	r18, 0x02	; 2
    5890:	a2 0e       	add	r10, r18
    5892:	b1 1c       	adc	r11, r1
    5894:	f6 01       	movw	r30, r12
    5896:	c0 80       	ld	r12, Z
    5898:	d1 80       	ldd	r13, Z+1	; 0x01
    589a:	96 fe       	sbrs	r9, 6
    589c:	03 c0       	rjmp	.+6      	; 0x58a4 <vfprintf+0x454>
    589e:	61 2f       	mov	r22, r17
    58a0:	70 e0       	ldi	r23, 0x00	; 0
    58a2:	02 c0       	rjmp	.+4      	; 0x58a8 <vfprintf+0x458>
    58a4:	6f ef       	ldi	r22, 0xFF	; 255
    58a6:	7f ef       	ldi	r23, 0xFF	; 255
    58a8:	c6 01       	movw	r24, r12
    58aa:	a7 d5       	rcall	.+2894   	; 0x63fa <strnlen_P>
    58ac:	8c 01       	movw	r16, r24
    58ae:	f9 2d       	mov	r31, r9
    58b0:	f0 68       	ori	r31, 0x80	; 128
    58b2:	9f 2e       	mov	r9, r31
    58b4:	f3 fd       	sbrc	r31, 3
    58b6:	18 c0       	rjmp	.+48     	; 0x58e8 <vfprintf+0x498>
    58b8:	85 2d       	mov	r24, r5
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	08 17       	cp	r16, r24
    58be:	19 07       	cpc	r17, r25
    58c0:	98 f4       	brcc	.+38     	; 0x58e8 <vfprintf+0x498>
    58c2:	b7 01       	movw	r22, r14
    58c4:	80 e2       	ldi	r24, 0x20	; 32
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	be d5       	rcall	.+2940   	; 0x6446 <fputc>
    58ca:	5a 94       	dec	r5
    58cc:	f5 cf       	rjmp	.-22     	; 0x58b8 <vfprintf+0x468>
    58ce:	f6 01       	movw	r30, r12
    58d0:	97 fc       	sbrc	r9, 7
    58d2:	85 91       	lpm	r24, Z+
    58d4:	97 fe       	sbrs	r9, 7
    58d6:	81 91       	ld	r24, Z+
    58d8:	6f 01       	movw	r12, r30
    58da:	b7 01       	movw	r22, r14
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	b3 d5       	rcall	.+2918   	; 0x6446 <fputc>
    58e0:	51 10       	cpse	r5, r1
    58e2:	5a 94       	dec	r5
    58e4:	01 50       	subi	r16, 0x01	; 1
    58e6:	11 09       	sbc	r17, r1
    58e8:	01 15       	cp	r16, r1
    58ea:	11 05       	cpc	r17, r1
    58ec:	81 f7       	brne	.-32     	; 0x58ce <vfprintf+0x47e>
    58ee:	f0 c0       	rjmp	.+480    	; 0x5ad0 <vfprintf+0x680>
    58f0:	84 36       	cpi	r24, 0x64	; 100
    58f2:	11 f0       	breq	.+4      	; 0x58f8 <vfprintf+0x4a8>
    58f4:	89 36       	cpi	r24, 0x69	; 105
    58f6:	59 f5       	brne	.+86     	; 0x594e <vfprintf+0x4fe>
    58f8:	56 01       	movw	r10, r12
    58fa:	97 fe       	sbrs	r9, 7
    58fc:	09 c0       	rjmp	.+18     	; 0x5910 <vfprintf+0x4c0>
    58fe:	24 e0       	ldi	r18, 0x04	; 4
    5900:	a2 0e       	add	r10, r18
    5902:	b1 1c       	adc	r11, r1
    5904:	f6 01       	movw	r30, r12
    5906:	60 81       	ld	r22, Z
    5908:	71 81       	ldd	r23, Z+1	; 0x01
    590a:	82 81       	ldd	r24, Z+2	; 0x02
    590c:	93 81       	ldd	r25, Z+3	; 0x03
    590e:	0a c0       	rjmp	.+20     	; 0x5924 <vfprintf+0x4d4>
    5910:	f2 e0       	ldi	r31, 0x02	; 2
    5912:	af 0e       	add	r10, r31
    5914:	b1 1c       	adc	r11, r1
    5916:	f6 01       	movw	r30, r12
    5918:	60 81       	ld	r22, Z
    591a:	71 81       	ldd	r23, Z+1	; 0x01
    591c:	07 2e       	mov	r0, r23
    591e:	00 0c       	add	r0, r0
    5920:	88 0b       	sbc	r24, r24
    5922:	99 0b       	sbc	r25, r25
    5924:	f9 2d       	mov	r31, r9
    5926:	ff 76       	andi	r31, 0x6F	; 111
    5928:	9f 2e       	mov	r9, r31
    592a:	97 ff       	sbrs	r25, 7
    592c:	09 c0       	rjmp	.+18     	; 0x5940 <vfprintf+0x4f0>
    592e:	90 95       	com	r25
    5930:	80 95       	com	r24
    5932:	70 95       	com	r23
    5934:	61 95       	neg	r22
    5936:	7f 4f       	sbci	r23, 0xFF	; 255
    5938:	8f 4f       	sbci	r24, 0xFF	; 255
    593a:	9f 4f       	sbci	r25, 0xFF	; 255
    593c:	f0 68       	ori	r31, 0x80	; 128
    593e:	9f 2e       	mov	r9, r31
    5940:	2a e0       	ldi	r18, 0x0A	; 10
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	a3 01       	movw	r20, r6
    5946:	ff d5       	rcall	.+3070   	; 0x6546 <__ultoa_invert>
    5948:	c8 2e       	mov	r12, r24
    594a:	c6 18       	sub	r12, r6
    594c:	3e c0       	rjmp	.+124    	; 0x59ca <vfprintf+0x57a>
    594e:	09 2d       	mov	r16, r9
    5950:	85 37       	cpi	r24, 0x75	; 117
    5952:	21 f4       	brne	.+8      	; 0x595c <vfprintf+0x50c>
    5954:	0f 7e       	andi	r16, 0xEF	; 239
    5956:	2a e0       	ldi	r18, 0x0A	; 10
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	1d c0       	rjmp	.+58     	; 0x5996 <vfprintf+0x546>
    595c:	09 7f       	andi	r16, 0xF9	; 249
    595e:	8f 36       	cpi	r24, 0x6F	; 111
    5960:	91 f0       	breq	.+36     	; 0x5986 <vfprintf+0x536>
    5962:	18 f4       	brcc	.+6      	; 0x596a <vfprintf+0x51a>
    5964:	88 35       	cpi	r24, 0x58	; 88
    5966:	59 f0       	breq	.+22     	; 0x597e <vfprintf+0x52e>
    5968:	bc c0       	rjmp	.+376    	; 0x5ae2 <vfprintf+0x692>
    596a:	80 37       	cpi	r24, 0x70	; 112
    596c:	19 f0       	breq	.+6      	; 0x5974 <vfprintf+0x524>
    596e:	88 37       	cpi	r24, 0x78	; 120
    5970:	11 f0       	breq	.+4      	; 0x5976 <vfprintf+0x526>
    5972:	b7 c0       	rjmp	.+366    	; 0x5ae2 <vfprintf+0x692>
    5974:	00 61       	ori	r16, 0x10	; 16
    5976:	04 ff       	sbrs	r16, 4
    5978:	09 c0       	rjmp	.+18     	; 0x598c <vfprintf+0x53c>
    597a:	04 60       	ori	r16, 0x04	; 4
    597c:	07 c0       	rjmp	.+14     	; 0x598c <vfprintf+0x53c>
    597e:	94 fe       	sbrs	r9, 4
    5980:	08 c0       	rjmp	.+16     	; 0x5992 <vfprintf+0x542>
    5982:	06 60       	ori	r16, 0x06	; 6
    5984:	06 c0       	rjmp	.+12     	; 0x5992 <vfprintf+0x542>
    5986:	28 e0       	ldi	r18, 0x08	; 8
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	05 c0       	rjmp	.+10     	; 0x5996 <vfprintf+0x546>
    598c:	20 e1       	ldi	r18, 0x10	; 16
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	02 c0       	rjmp	.+4      	; 0x5996 <vfprintf+0x546>
    5992:	20 e1       	ldi	r18, 0x10	; 16
    5994:	32 e0       	ldi	r19, 0x02	; 2
    5996:	56 01       	movw	r10, r12
    5998:	07 ff       	sbrs	r16, 7
    599a:	09 c0       	rjmp	.+18     	; 0x59ae <vfprintf+0x55e>
    599c:	84 e0       	ldi	r24, 0x04	; 4
    599e:	a8 0e       	add	r10, r24
    59a0:	b1 1c       	adc	r11, r1
    59a2:	f6 01       	movw	r30, r12
    59a4:	60 81       	ld	r22, Z
    59a6:	71 81       	ldd	r23, Z+1	; 0x01
    59a8:	82 81       	ldd	r24, Z+2	; 0x02
    59aa:	93 81       	ldd	r25, Z+3	; 0x03
    59ac:	08 c0       	rjmp	.+16     	; 0x59be <vfprintf+0x56e>
    59ae:	f2 e0       	ldi	r31, 0x02	; 2
    59b0:	af 0e       	add	r10, r31
    59b2:	b1 1c       	adc	r11, r1
    59b4:	f6 01       	movw	r30, r12
    59b6:	60 81       	ld	r22, Z
    59b8:	71 81       	ldd	r23, Z+1	; 0x01
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	a3 01       	movw	r20, r6
    59c0:	c2 d5       	rcall	.+2948   	; 0x6546 <__ultoa_invert>
    59c2:	c8 2e       	mov	r12, r24
    59c4:	c6 18       	sub	r12, r6
    59c6:	0f 77       	andi	r16, 0x7F	; 127
    59c8:	90 2e       	mov	r9, r16
    59ca:	96 fe       	sbrs	r9, 6
    59cc:	0b c0       	rjmp	.+22     	; 0x59e4 <vfprintf+0x594>
    59ce:	09 2d       	mov	r16, r9
    59d0:	0e 7f       	andi	r16, 0xFE	; 254
    59d2:	c1 16       	cp	r12, r17
    59d4:	50 f4       	brcc	.+20     	; 0x59ea <vfprintf+0x59a>
    59d6:	94 fe       	sbrs	r9, 4
    59d8:	0a c0       	rjmp	.+20     	; 0x59ee <vfprintf+0x59e>
    59da:	92 fc       	sbrc	r9, 2
    59dc:	08 c0       	rjmp	.+16     	; 0x59ee <vfprintf+0x59e>
    59de:	09 2d       	mov	r16, r9
    59e0:	0e 7e       	andi	r16, 0xEE	; 238
    59e2:	05 c0       	rjmp	.+10     	; 0x59ee <vfprintf+0x59e>
    59e4:	dc 2c       	mov	r13, r12
    59e6:	09 2d       	mov	r16, r9
    59e8:	03 c0       	rjmp	.+6      	; 0x59f0 <vfprintf+0x5a0>
    59ea:	dc 2c       	mov	r13, r12
    59ec:	01 c0       	rjmp	.+2      	; 0x59f0 <vfprintf+0x5a0>
    59ee:	d1 2e       	mov	r13, r17
    59f0:	04 ff       	sbrs	r16, 4
    59f2:	0d c0       	rjmp	.+26     	; 0x5a0e <vfprintf+0x5be>
    59f4:	fe 01       	movw	r30, r28
    59f6:	ec 0d       	add	r30, r12
    59f8:	f1 1d       	adc	r31, r1
    59fa:	80 81       	ld	r24, Z
    59fc:	80 33       	cpi	r24, 0x30	; 48
    59fe:	11 f4       	brne	.+4      	; 0x5a04 <vfprintf+0x5b4>
    5a00:	09 7e       	andi	r16, 0xE9	; 233
    5a02:	09 c0       	rjmp	.+18     	; 0x5a16 <vfprintf+0x5c6>
    5a04:	02 ff       	sbrs	r16, 2
    5a06:	06 c0       	rjmp	.+12     	; 0x5a14 <vfprintf+0x5c4>
    5a08:	d3 94       	inc	r13
    5a0a:	d3 94       	inc	r13
    5a0c:	04 c0       	rjmp	.+8      	; 0x5a16 <vfprintf+0x5c6>
    5a0e:	80 2f       	mov	r24, r16
    5a10:	86 78       	andi	r24, 0x86	; 134
    5a12:	09 f0       	breq	.+2      	; 0x5a16 <vfprintf+0x5c6>
    5a14:	d3 94       	inc	r13
    5a16:	03 fd       	sbrc	r16, 3
    5a18:	10 c0       	rjmp	.+32     	; 0x5a3a <vfprintf+0x5ea>
    5a1a:	00 ff       	sbrs	r16, 0
    5a1c:	06 c0       	rjmp	.+12     	; 0x5a2a <vfprintf+0x5da>
    5a1e:	1c 2d       	mov	r17, r12
    5a20:	d5 14       	cp	r13, r5
    5a22:	78 f4       	brcc	.+30     	; 0x5a42 <vfprintf+0x5f2>
    5a24:	15 0d       	add	r17, r5
    5a26:	1d 19       	sub	r17, r13
    5a28:	0c c0       	rjmp	.+24     	; 0x5a42 <vfprintf+0x5f2>
    5a2a:	d5 14       	cp	r13, r5
    5a2c:	50 f4       	brcc	.+20     	; 0x5a42 <vfprintf+0x5f2>
    5a2e:	b7 01       	movw	r22, r14
    5a30:	80 e2       	ldi	r24, 0x20	; 32
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	08 d5       	rcall	.+2576   	; 0x6446 <fputc>
    5a36:	d3 94       	inc	r13
    5a38:	f8 cf       	rjmp	.-16     	; 0x5a2a <vfprintf+0x5da>
    5a3a:	d5 14       	cp	r13, r5
    5a3c:	10 f4       	brcc	.+4      	; 0x5a42 <vfprintf+0x5f2>
    5a3e:	5d 18       	sub	r5, r13
    5a40:	01 c0       	rjmp	.+2      	; 0x5a44 <vfprintf+0x5f4>
    5a42:	51 2c       	mov	r5, r1
    5a44:	04 ff       	sbrs	r16, 4
    5a46:	0f c0       	rjmp	.+30     	; 0x5a66 <vfprintf+0x616>
    5a48:	b7 01       	movw	r22, r14
    5a4a:	80 e3       	ldi	r24, 0x30	; 48
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	fb d4       	rcall	.+2550   	; 0x6446 <fputc>
    5a50:	02 ff       	sbrs	r16, 2
    5a52:	16 c0       	rjmp	.+44     	; 0x5a80 <vfprintf+0x630>
    5a54:	01 fd       	sbrc	r16, 1
    5a56:	03 c0       	rjmp	.+6      	; 0x5a5e <vfprintf+0x60e>
    5a58:	88 e7       	ldi	r24, 0x78	; 120
    5a5a:	90 e0       	ldi	r25, 0x00	; 0
    5a5c:	02 c0       	rjmp	.+4      	; 0x5a62 <vfprintf+0x612>
    5a5e:	88 e5       	ldi	r24, 0x58	; 88
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	b7 01       	movw	r22, r14
    5a64:	0c c0       	rjmp	.+24     	; 0x5a7e <vfprintf+0x62e>
    5a66:	80 2f       	mov	r24, r16
    5a68:	86 78       	andi	r24, 0x86	; 134
    5a6a:	51 f0       	breq	.+20     	; 0x5a80 <vfprintf+0x630>
    5a6c:	01 ff       	sbrs	r16, 1
    5a6e:	02 c0       	rjmp	.+4      	; 0x5a74 <vfprintf+0x624>
    5a70:	8b e2       	ldi	r24, 0x2B	; 43
    5a72:	01 c0       	rjmp	.+2      	; 0x5a76 <vfprintf+0x626>
    5a74:	80 e2       	ldi	r24, 0x20	; 32
    5a76:	07 fd       	sbrc	r16, 7
    5a78:	8d e2       	ldi	r24, 0x2D	; 45
    5a7a:	b7 01       	movw	r22, r14
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	e3 d4       	rcall	.+2502   	; 0x6446 <fputc>
    5a80:	c1 16       	cp	r12, r17
    5a82:	30 f4       	brcc	.+12     	; 0x5a90 <vfprintf+0x640>
    5a84:	b7 01       	movw	r22, r14
    5a86:	80 e3       	ldi	r24, 0x30	; 48
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	dd d4       	rcall	.+2490   	; 0x6446 <fputc>
    5a8c:	11 50       	subi	r17, 0x01	; 1
    5a8e:	f8 cf       	rjmp	.-16     	; 0x5a80 <vfprintf+0x630>
    5a90:	ca 94       	dec	r12
    5a92:	f3 01       	movw	r30, r6
    5a94:	ec 0d       	add	r30, r12
    5a96:	f1 1d       	adc	r31, r1
    5a98:	80 81       	ld	r24, Z
    5a9a:	b7 01       	movw	r22, r14
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	d3 d4       	rcall	.+2470   	; 0x6446 <fputc>
    5aa0:	c1 10       	cpse	r12, r1
    5aa2:	f6 cf       	rjmp	.-20     	; 0x5a90 <vfprintf+0x640>
    5aa4:	15 c0       	rjmp	.+42     	; 0x5ad0 <vfprintf+0x680>
    5aa6:	f4 e0       	ldi	r31, 0x04	; 4
    5aa8:	f5 15       	cp	r31, r5
    5aaa:	50 f5       	brcc	.+84     	; 0x5b00 <vfprintf+0x6b0>
    5aac:	84 e0       	ldi	r24, 0x04	; 4
    5aae:	58 1a       	sub	r5, r24
    5ab0:	93 fe       	sbrs	r9, 3
    5ab2:	1e c0       	rjmp	.+60     	; 0x5af0 <vfprintf+0x6a0>
    5ab4:	01 11       	cpse	r16, r1
    5ab6:	25 c0       	rjmp	.+74     	; 0x5b02 <vfprintf+0x6b2>
    5ab8:	2c 85       	ldd	r18, Y+12	; 0x0c
    5aba:	23 ff       	sbrs	r18, 3
    5abc:	27 c0       	rjmp	.+78     	; 0x5b0c <vfprintf+0x6bc>
    5abe:	0a e9       	ldi	r16, 0x9A	; 154
    5ac0:	11 e0       	ldi	r17, 0x01	; 1
    5ac2:	39 2d       	mov	r19, r9
    5ac4:	30 71       	andi	r19, 0x10	; 16
    5ac6:	93 2e       	mov	r9, r19
    5ac8:	f8 01       	movw	r30, r16
    5aca:	84 91       	lpm	r24, Z
    5acc:	81 11       	cpse	r24, r1
    5ace:	21 c0       	rjmp	.+66     	; 0x5b12 <vfprintf+0x6c2>
    5ad0:	55 20       	and	r5, r5
    5ad2:	09 f4       	brne	.+2      	; 0x5ad6 <vfprintf+0x686>
    5ad4:	fc cc       	rjmp	.-1544   	; 0x54ce <vfprintf+0x7e>
    5ad6:	b7 01       	movw	r22, r14
    5ad8:	80 e2       	ldi	r24, 0x20	; 32
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	b4 d4       	rcall	.+2408   	; 0x6446 <fputc>
    5ade:	5a 94       	dec	r5
    5ae0:	f7 cf       	rjmp	.-18     	; 0x5ad0 <vfprintf+0x680>
    5ae2:	f7 01       	movw	r30, r14
    5ae4:	86 81       	ldd	r24, Z+6	; 0x06
    5ae6:	97 81       	ldd	r25, Z+7	; 0x07
    5ae8:	23 c0       	rjmp	.+70     	; 0x5b30 <vfprintf+0x6e0>
    5aea:	8f ef       	ldi	r24, 0xFF	; 255
    5aec:	9f ef       	ldi	r25, 0xFF	; 255
    5aee:	20 c0       	rjmp	.+64     	; 0x5b30 <vfprintf+0x6e0>
    5af0:	b7 01       	movw	r22, r14
    5af2:	80 e2       	ldi	r24, 0x20	; 32
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	a7 d4       	rcall	.+2382   	; 0x6446 <fputc>
    5af8:	5a 94       	dec	r5
    5afa:	51 10       	cpse	r5, r1
    5afc:	f9 cf       	rjmp	.-14     	; 0x5af0 <vfprintf+0x6a0>
    5afe:	da cf       	rjmp	.-76     	; 0x5ab4 <vfprintf+0x664>
    5b00:	51 2c       	mov	r5, r1
    5b02:	b7 01       	movw	r22, r14
    5b04:	80 2f       	mov	r24, r16
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	9e d4       	rcall	.+2364   	; 0x6446 <fputc>
    5b0a:	d6 cf       	rjmp	.-84     	; 0x5ab8 <vfprintf+0x668>
    5b0c:	0e e9       	ldi	r16, 0x9E	; 158
    5b0e:	11 e0       	ldi	r17, 0x01	; 1
    5b10:	d8 cf       	rjmp	.-80     	; 0x5ac2 <vfprintf+0x672>
    5b12:	91 10       	cpse	r9, r1
    5b14:	80 52       	subi	r24, 0x20	; 32
    5b16:	b7 01       	movw	r22, r14
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	95 d4       	rcall	.+2346   	; 0x6446 <fputc>
    5b1c:	0f 5f       	subi	r16, 0xFF	; 255
    5b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b20:	d3 cf       	rjmp	.-90     	; 0x5ac8 <vfprintf+0x678>
    5b22:	23 e0       	ldi	r18, 0x03	; 3
    5b24:	25 15       	cp	r18, r5
    5b26:	10 f4       	brcc	.+4      	; 0x5b2c <vfprintf+0x6dc>
    5b28:	83 e0       	ldi	r24, 0x03	; 3
    5b2a:	c1 cf       	rjmp	.-126    	; 0x5aae <vfprintf+0x65e>
    5b2c:	51 2c       	mov	r5, r1
    5b2e:	c4 cf       	rjmp	.-120    	; 0x5ab8 <vfprintf+0x668>
    5b30:	60 96       	adiw	r28, 0x10	; 16
    5b32:	0f b6       	in	r0, 0x3f	; 63
    5b34:	f8 94       	cli
    5b36:	de bf       	out	0x3e, r29	; 62
    5b38:	0f be       	out	0x3f, r0	; 63
    5b3a:	cd bf       	out	0x3d, r28	; 61
    5b3c:	df 91       	pop	r29
    5b3e:	cf 91       	pop	r28
    5b40:	1f 91       	pop	r17
    5b42:	0f 91       	pop	r16
    5b44:	ff 90       	pop	r15
    5b46:	ef 90       	pop	r14
    5b48:	df 90       	pop	r13
    5b4a:	cf 90       	pop	r12
    5b4c:	bf 90       	pop	r11
    5b4e:	af 90       	pop	r10
    5b50:	9f 90       	pop	r9
    5b52:	8f 90       	pop	r8
    5b54:	7f 90       	pop	r7
    5b56:	6f 90       	pop	r6
    5b58:	5f 90       	pop	r5
    5b5a:	4f 90       	pop	r4
    5b5c:	3f 90       	pop	r3
    5b5e:	2f 90       	pop	r2
    5b60:	08 95       	ret

00005b62 <__subsf3>:
    5b62:	50 58       	subi	r21, 0x80	; 128

00005b64 <__addsf3>:
    5b64:	bb 27       	eor	r27, r27
    5b66:	aa 27       	eor	r26, r26
    5b68:	0e d0       	rcall	.+28     	; 0x5b86 <__addsf3x>
    5b6a:	4d c1       	rjmp	.+666    	; 0x5e06 <__fp_round>
    5b6c:	3e d1       	rcall	.+636    	; 0x5dea <__fp_pscA>
    5b6e:	30 f0       	brcs	.+12     	; 0x5b7c <__addsf3+0x18>
    5b70:	43 d1       	rcall	.+646    	; 0x5df8 <__fp_pscB>
    5b72:	20 f0       	brcs	.+8      	; 0x5b7c <__addsf3+0x18>
    5b74:	31 f4       	brne	.+12     	; 0x5b82 <__addsf3+0x1e>
    5b76:	9f 3f       	cpi	r25, 0xFF	; 255
    5b78:	11 f4       	brne	.+4      	; 0x5b7e <__addsf3+0x1a>
    5b7a:	1e f4       	brtc	.+6      	; 0x5b82 <__addsf3+0x1e>
    5b7c:	33 c1       	rjmp	.+614    	; 0x5de4 <__fp_nan>
    5b7e:	0e f4       	brtc	.+2      	; 0x5b82 <__addsf3+0x1e>
    5b80:	e0 95       	com	r30
    5b82:	e7 fb       	bst	r30, 7
    5b84:	29 c1       	rjmp	.+594    	; 0x5dd8 <__fp_inf>

00005b86 <__addsf3x>:
    5b86:	e9 2f       	mov	r30, r25
    5b88:	4f d1       	rcall	.+670    	; 0x5e28 <__fp_split3>
    5b8a:	80 f3       	brcs	.-32     	; 0x5b6c <__addsf3+0x8>
    5b8c:	ba 17       	cp	r27, r26
    5b8e:	62 07       	cpc	r22, r18
    5b90:	73 07       	cpc	r23, r19
    5b92:	84 07       	cpc	r24, r20
    5b94:	95 07       	cpc	r25, r21
    5b96:	18 f0       	brcs	.+6      	; 0x5b9e <__addsf3x+0x18>
    5b98:	71 f4       	brne	.+28     	; 0x5bb6 <__addsf3x+0x30>
    5b9a:	9e f5       	brtc	.+102    	; 0x5c02 <__addsf3x+0x7c>
    5b9c:	67 c1       	rjmp	.+718    	; 0x5e6c <__fp_zero>
    5b9e:	0e f4       	brtc	.+2      	; 0x5ba2 <__addsf3x+0x1c>
    5ba0:	e0 95       	com	r30
    5ba2:	0b 2e       	mov	r0, r27
    5ba4:	ba 2f       	mov	r27, r26
    5ba6:	a0 2d       	mov	r26, r0
    5ba8:	0b 01       	movw	r0, r22
    5baa:	b9 01       	movw	r22, r18
    5bac:	90 01       	movw	r18, r0
    5bae:	0c 01       	movw	r0, r24
    5bb0:	ca 01       	movw	r24, r20
    5bb2:	a0 01       	movw	r20, r0
    5bb4:	11 24       	eor	r1, r1
    5bb6:	ff 27       	eor	r31, r31
    5bb8:	59 1b       	sub	r21, r25
    5bba:	99 f0       	breq	.+38     	; 0x5be2 <__addsf3x+0x5c>
    5bbc:	59 3f       	cpi	r21, 0xF9	; 249
    5bbe:	50 f4       	brcc	.+20     	; 0x5bd4 <__addsf3x+0x4e>
    5bc0:	50 3e       	cpi	r21, 0xE0	; 224
    5bc2:	68 f1       	brcs	.+90     	; 0x5c1e <__addsf3x+0x98>
    5bc4:	1a 16       	cp	r1, r26
    5bc6:	f0 40       	sbci	r31, 0x00	; 0
    5bc8:	a2 2f       	mov	r26, r18
    5bca:	23 2f       	mov	r18, r19
    5bcc:	34 2f       	mov	r19, r20
    5bce:	44 27       	eor	r20, r20
    5bd0:	58 5f       	subi	r21, 0xF8	; 248
    5bd2:	f3 cf       	rjmp	.-26     	; 0x5bba <__addsf3x+0x34>
    5bd4:	46 95       	lsr	r20
    5bd6:	37 95       	ror	r19
    5bd8:	27 95       	ror	r18
    5bda:	a7 95       	ror	r26
    5bdc:	f0 40       	sbci	r31, 0x00	; 0
    5bde:	53 95       	inc	r21
    5be0:	c9 f7       	brne	.-14     	; 0x5bd4 <__addsf3x+0x4e>
    5be2:	7e f4       	brtc	.+30     	; 0x5c02 <__addsf3x+0x7c>
    5be4:	1f 16       	cp	r1, r31
    5be6:	ba 0b       	sbc	r27, r26
    5be8:	62 0b       	sbc	r22, r18
    5bea:	73 0b       	sbc	r23, r19
    5bec:	84 0b       	sbc	r24, r20
    5bee:	ba f0       	brmi	.+46     	; 0x5c1e <__addsf3x+0x98>
    5bf0:	91 50       	subi	r25, 0x01	; 1
    5bf2:	a1 f0       	breq	.+40     	; 0x5c1c <__addsf3x+0x96>
    5bf4:	ff 0f       	add	r31, r31
    5bf6:	bb 1f       	adc	r27, r27
    5bf8:	66 1f       	adc	r22, r22
    5bfa:	77 1f       	adc	r23, r23
    5bfc:	88 1f       	adc	r24, r24
    5bfe:	c2 f7       	brpl	.-16     	; 0x5bf0 <__addsf3x+0x6a>
    5c00:	0e c0       	rjmp	.+28     	; 0x5c1e <__addsf3x+0x98>
    5c02:	ba 0f       	add	r27, r26
    5c04:	62 1f       	adc	r22, r18
    5c06:	73 1f       	adc	r23, r19
    5c08:	84 1f       	adc	r24, r20
    5c0a:	48 f4       	brcc	.+18     	; 0x5c1e <__addsf3x+0x98>
    5c0c:	87 95       	ror	r24
    5c0e:	77 95       	ror	r23
    5c10:	67 95       	ror	r22
    5c12:	b7 95       	ror	r27
    5c14:	f7 95       	ror	r31
    5c16:	9e 3f       	cpi	r25, 0xFE	; 254
    5c18:	08 f0       	brcs	.+2      	; 0x5c1c <__addsf3x+0x96>
    5c1a:	b3 cf       	rjmp	.-154    	; 0x5b82 <__addsf3+0x1e>
    5c1c:	93 95       	inc	r25
    5c1e:	88 0f       	add	r24, r24
    5c20:	08 f0       	brcs	.+2      	; 0x5c24 <__addsf3x+0x9e>
    5c22:	99 27       	eor	r25, r25
    5c24:	ee 0f       	add	r30, r30
    5c26:	97 95       	ror	r25
    5c28:	87 95       	ror	r24
    5c2a:	08 95       	ret

00005c2c <__divsf3>:
    5c2c:	0c d0       	rcall	.+24     	; 0x5c46 <__divsf3x>
    5c2e:	eb c0       	rjmp	.+470    	; 0x5e06 <__fp_round>
    5c30:	e3 d0       	rcall	.+454    	; 0x5df8 <__fp_pscB>
    5c32:	40 f0       	brcs	.+16     	; 0x5c44 <__divsf3+0x18>
    5c34:	da d0       	rcall	.+436    	; 0x5dea <__fp_pscA>
    5c36:	30 f0       	brcs	.+12     	; 0x5c44 <__divsf3+0x18>
    5c38:	21 f4       	brne	.+8      	; 0x5c42 <__divsf3+0x16>
    5c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    5c3c:	19 f0       	breq	.+6      	; 0x5c44 <__divsf3+0x18>
    5c3e:	cc c0       	rjmp	.+408    	; 0x5dd8 <__fp_inf>
    5c40:	51 11       	cpse	r21, r1
    5c42:	15 c1       	rjmp	.+554    	; 0x5e6e <__fp_szero>
    5c44:	cf c0       	rjmp	.+414    	; 0x5de4 <__fp_nan>

00005c46 <__divsf3x>:
    5c46:	f0 d0       	rcall	.+480    	; 0x5e28 <__fp_split3>
    5c48:	98 f3       	brcs	.-26     	; 0x5c30 <__divsf3+0x4>

00005c4a <__divsf3_pse>:
    5c4a:	99 23       	and	r25, r25
    5c4c:	c9 f3       	breq	.-14     	; 0x5c40 <__divsf3+0x14>
    5c4e:	55 23       	and	r21, r21
    5c50:	b1 f3       	breq	.-20     	; 0x5c3e <__divsf3+0x12>
    5c52:	95 1b       	sub	r25, r21
    5c54:	55 0b       	sbc	r21, r21
    5c56:	bb 27       	eor	r27, r27
    5c58:	aa 27       	eor	r26, r26
    5c5a:	62 17       	cp	r22, r18
    5c5c:	73 07       	cpc	r23, r19
    5c5e:	84 07       	cpc	r24, r20
    5c60:	38 f0       	brcs	.+14     	; 0x5c70 <__divsf3_pse+0x26>
    5c62:	9f 5f       	subi	r25, 0xFF	; 255
    5c64:	5f 4f       	sbci	r21, 0xFF	; 255
    5c66:	22 0f       	add	r18, r18
    5c68:	33 1f       	adc	r19, r19
    5c6a:	44 1f       	adc	r20, r20
    5c6c:	aa 1f       	adc	r26, r26
    5c6e:	a9 f3       	breq	.-22     	; 0x5c5a <__divsf3_pse+0x10>
    5c70:	33 d0       	rcall	.+102    	; 0x5cd8 <__divsf3_pse+0x8e>
    5c72:	0e 2e       	mov	r0, r30
    5c74:	3a f0       	brmi	.+14     	; 0x5c84 <__divsf3_pse+0x3a>
    5c76:	e0 e8       	ldi	r30, 0x80	; 128
    5c78:	30 d0       	rcall	.+96     	; 0x5cda <__divsf3_pse+0x90>
    5c7a:	91 50       	subi	r25, 0x01	; 1
    5c7c:	50 40       	sbci	r21, 0x00	; 0
    5c7e:	e6 95       	lsr	r30
    5c80:	00 1c       	adc	r0, r0
    5c82:	ca f7       	brpl	.-14     	; 0x5c76 <__divsf3_pse+0x2c>
    5c84:	29 d0       	rcall	.+82     	; 0x5cd8 <__divsf3_pse+0x8e>
    5c86:	fe 2f       	mov	r31, r30
    5c88:	27 d0       	rcall	.+78     	; 0x5cd8 <__divsf3_pse+0x8e>
    5c8a:	66 0f       	add	r22, r22
    5c8c:	77 1f       	adc	r23, r23
    5c8e:	88 1f       	adc	r24, r24
    5c90:	bb 1f       	adc	r27, r27
    5c92:	26 17       	cp	r18, r22
    5c94:	37 07       	cpc	r19, r23
    5c96:	48 07       	cpc	r20, r24
    5c98:	ab 07       	cpc	r26, r27
    5c9a:	b0 e8       	ldi	r27, 0x80	; 128
    5c9c:	09 f0       	breq	.+2      	; 0x5ca0 <__divsf3_pse+0x56>
    5c9e:	bb 0b       	sbc	r27, r27
    5ca0:	80 2d       	mov	r24, r0
    5ca2:	bf 01       	movw	r22, r30
    5ca4:	ff 27       	eor	r31, r31
    5ca6:	93 58       	subi	r25, 0x83	; 131
    5ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    5caa:	2a f0       	brmi	.+10     	; 0x5cb6 <__divsf3_pse+0x6c>
    5cac:	9e 3f       	cpi	r25, 0xFE	; 254
    5cae:	51 05       	cpc	r21, r1
    5cb0:	68 f0       	brcs	.+26     	; 0x5ccc <__divsf3_pse+0x82>
    5cb2:	92 c0       	rjmp	.+292    	; 0x5dd8 <__fp_inf>
    5cb4:	dc c0       	rjmp	.+440    	; 0x5e6e <__fp_szero>
    5cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    5cb8:	ec f3       	brlt	.-6      	; 0x5cb4 <__divsf3_pse+0x6a>
    5cba:	98 3e       	cpi	r25, 0xE8	; 232
    5cbc:	dc f3       	brlt	.-10     	; 0x5cb4 <__divsf3_pse+0x6a>
    5cbe:	86 95       	lsr	r24
    5cc0:	77 95       	ror	r23
    5cc2:	67 95       	ror	r22
    5cc4:	b7 95       	ror	r27
    5cc6:	f7 95       	ror	r31
    5cc8:	9f 5f       	subi	r25, 0xFF	; 255
    5cca:	c9 f7       	brne	.-14     	; 0x5cbe <__divsf3_pse+0x74>
    5ccc:	88 0f       	add	r24, r24
    5cce:	91 1d       	adc	r25, r1
    5cd0:	96 95       	lsr	r25
    5cd2:	87 95       	ror	r24
    5cd4:	97 f9       	bld	r25, 7
    5cd6:	08 95       	ret
    5cd8:	e1 e0       	ldi	r30, 0x01	; 1
    5cda:	66 0f       	add	r22, r22
    5cdc:	77 1f       	adc	r23, r23
    5cde:	88 1f       	adc	r24, r24
    5ce0:	bb 1f       	adc	r27, r27
    5ce2:	62 17       	cp	r22, r18
    5ce4:	73 07       	cpc	r23, r19
    5ce6:	84 07       	cpc	r24, r20
    5ce8:	ba 07       	cpc	r27, r26
    5cea:	20 f0       	brcs	.+8      	; 0x5cf4 <__divsf3_pse+0xaa>
    5cec:	62 1b       	sub	r22, r18
    5cee:	73 0b       	sbc	r23, r19
    5cf0:	84 0b       	sbc	r24, r20
    5cf2:	ba 0b       	sbc	r27, r26
    5cf4:	ee 1f       	adc	r30, r30
    5cf6:	88 f7       	brcc	.-30     	; 0x5cda <__divsf3_pse+0x90>
    5cf8:	e0 95       	com	r30
    5cfa:	08 95       	ret

00005cfc <__fixsfsi>:
    5cfc:	04 d0       	rcall	.+8      	; 0x5d06 <__fixunssfsi>
    5cfe:	68 94       	set
    5d00:	b1 11       	cpse	r27, r1
    5d02:	b5 c0       	rjmp	.+362    	; 0x5e6e <__fp_szero>
    5d04:	08 95       	ret

00005d06 <__fixunssfsi>:
    5d06:	98 d0       	rcall	.+304    	; 0x5e38 <__fp_splitA>
    5d08:	88 f0       	brcs	.+34     	; 0x5d2c <__fixunssfsi+0x26>
    5d0a:	9f 57       	subi	r25, 0x7F	; 127
    5d0c:	90 f0       	brcs	.+36     	; 0x5d32 <__fixunssfsi+0x2c>
    5d0e:	b9 2f       	mov	r27, r25
    5d10:	99 27       	eor	r25, r25
    5d12:	b7 51       	subi	r27, 0x17	; 23
    5d14:	a0 f0       	brcs	.+40     	; 0x5d3e <__fixunssfsi+0x38>
    5d16:	d1 f0       	breq	.+52     	; 0x5d4c <__fixunssfsi+0x46>
    5d18:	66 0f       	add	r22, r22
    5d1a:	77 1f       	adc	r23, r23
    5d1c:	88 1f       	adc	r24, r24
    5d1e:	99 1f       	adc	r25, r25
    5d20:	1a f0       	brmi	.+6      	; 0x5d28 <__fixunssfsi+0x22>
    5d22:	ba 95       	dec	r27
    5d24:	c9 f7       	brne	.-14     	; 0x5d18 <__fixunssfsi+0x12>
    5d26:	12 c0       	rjmp	.+36     	; 0x5d4c <__fixunssfsi+0x46>
    5d28:	b1 30       	cpi	r27, 0x01	; 1
    5d2a:	81 f0       	breq	.+32     	; 0x5d4c <__fixunssfsi+0x46>
    5d2c:	9f d0       	rcall	.+318    	; 0x5e6c <__fp_zero>
    5d2e:	b1 e0       	ldi	r27, 0x01	; 1
    5d30:	08 95       	ret
    5d32:	9c c0       	rjmp	.+312    	; 0x5e6c <__fp_zero>
    5d34:	67 2f       	mov	r22, r23
    5d36:	78 2f       	mov	r23, r24
    5d38:	88 27       	eor	r24, r24
    5d3a:	b8 5f       	subi	r27, 0xF8	; 248
    5d3c:	39 f0       	breq	.+14     	; 0x5d4c <__fixunssfsi+0x46>
    5d3e:	b9 3f       	cpi	r27, 0xF9	; 249
    5d40:	cc f3       	brlt	.-14     	; 0x5d34 <__fixunssfsi+0x2e>
    5d42:	86 95       	lsr	r24
    5d44:	77 95       	ror	r23
    5d46:	67 95       	ror	r22
    5d48:	b3 95       	inc	r27
    5d4a:	d9 f7       	brne	.-10     	; 0x5d42 <__fixunssfsi+0x3c>
    5d4c:	3e f4       	brtc	.+14     	; 0x5d5c <__fixunssfsi+0x56>
    5d4e:	90 95       	com	r25
    5d50:	80 95       	com	r24
    5d52:	70 95       	com	r23
    5d54:	61 95       	neg	r22
    5d56:	7f 4f       	sbci	r23, 0xFF	; 255
    5d58:	8f 4f       	sbci	r24, 0xFF	; 255
    5d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5c:	08 95       	ret

00005d5e <__floatunsisf>:
    5d5e:	e8 94       	clt
    5d60:	09 c0       	rjmp	.+18     	; 0x5d74 <__floatsisf+0x12>

00005d62 <__floatsisf>:
    5d62:	97 fb       	bst	r25, 7
    5d64:	3e f4       	brtc	.+14     	; 0x5d74 <__floatsisf+0x12>
    5d66:	90 95       	com	r25
    5d68:	80 95       	com	r24
    5d6a:	70 95       	com	r23
    5d6c:	61 95       	neg	r22
    5d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d70:	8f 4f       	sbci	r24, 0xFF	; 255
    5d72:	9f 4f       	sbci	r25, 0xFF	; 255
    5d74:	99 23       	and	r25, r25
    5d76:	a9 f0       	breq	.+42     	; 0x5da2 <__floatsisf+0x40>
    5d78:	f9 2f       	mov	r31, r25
    5d7a:	96 e9       	ldi	r25, 0x96	; 150
    5d7c:	bb 27       	eor	r27, r27
    5d7e:	93 95       	inc	r25
    5d80:	f6 95       	lsr	r31
    5d82:	87 95       	ror	r24
    5d84:	77 95       	ror	r23
    5d86:	67 95       	ror	r22
    5d88:	b7 95       	ror	r27
    5d8a:	f1 11       	cpse	r31, r1
    5d8c:	f8 cf       	rjmp	.-16     	; 0x5d7e <__floatsisf+0x1c>
    5d8e:	fa f4       	brpl	.+62     	; 0x5dce <__floatsisf+0x6c>
    5d90:	bb 0f       	add	r27, r27
    5d92:	11 f4       	brne	.+4      	; 0x5d98 <__floatsisf+0x36>
    5d94:	60 ff       	sbrs	r22, 0
    5d96:	1b c0       	rjmp	.+54     	; 0x5dce <__floatsisf+0x6c>
    5d98:	6f 5f       	subi	r22, 0xFF	; 255
    5d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5da0:	16 c0       	rjmp	.+44     	; 0x5dce <__floatsisf+0x6c>
    5da2:	88 23       	and	r24, r24
    5da4:	11 f0       	breq	.+4      	; 0x5daa <__floatsisf+0x48>
    5da6:	96 e9       	ldi	r25, 0x96	; 150
    5da8:	11 c0       	rjmp	.+34     	; 0x5dcc <__floatsisf+0x6a>
    5daa:	77 23       	and	r23, r23
    5dac:	21 f0       	breq	.+8      	; 0x5db6 <__floatsisf+0x54>
    5dae:	9e e8       	ldi	r25, 0x8E	; 142
    5db0:	87 2f       	mov	r24, r23
    5db2:	76 2f       	mov	r23, r22
    5db4:	05 c0       	rjmp	.+10     	; 0x5dc0 <__floatsisf+0x5e>
    5db6:	66 23       	and	r22, r22
    5db8:	71 f0       	breq	.+28     	; 0x5dd6 <__floatsisf+0x74>
    5dba:	96 e8       	ldi	r25, 0x86	; 134
    5dbc:	86 2f       	mov	r24, r22
    5dbe:	70 e0       	ldi	r23, 0x00	; 0
    5dc0:	60 e0       	ldi	r22, 0x00	; 0
    5dc2:	2a f0       	brmi	.+10     	; 0x5dce <__floatsisf+0x6c>
    5dc4:	9a 95       	dec	r25
    5dc6:	66 0f       	add	r22, r22
    5dc8:	77 1f       	adc	r23, r23
    5dca:	88 1f       	adc	r24, r24
    5dcc:	da f7       	brpl	.-10     	; 0x5dc4 <__floatsisf+0x62>
    5dce:	88 0f       	add	r24, r24
    5dd0:	96 95       	lsr	r25
    5dd2:	87 95       	ror	r24
    5dd4:	97 f9       	bld	r25, 7
    5dd6:	08 95       	ret

00005dd8 <__fp_inf>:
    5dd8:	97 f9       	bld	r25, 7
    5dda:	9f 67       	ori	r25, 0x7F	; 127
    5ddc:	80 e8       	ldi	r24, 0x80	; 128
    5dde:	70 e0       	ldi	r23, 0x00	; 0
    5de0:	60 e0       	ldi	r22, 0x00	; 0
    5de2:	08 95       	ret

00005de4 <__fp_nan>:
    5de4:	9f ef       	ldi	r25, 0xFF	; 255
    5de6:	80 ec       	ldi	r24, 0xC0	; 192
    5de8:	08 95       	ret

00005dea <__fp_pscA>:
    5dea:	00 24       	eor	r0, r0
    5dec:	0a 94       	dec	r0
    5dee:	16 16       	cp	r1, r22
    5df0:	17 06       	cpc	r1, r23
    5df2:	18 06       	cpc	r1, r24
    5df4:	09 06       	cpc	r0, r25
    5df6:	08 95       	ret

00005df8 <__fp_pscB>:
    5df8:	00 24       	eor	r0, r0
    5dfa:	0a 94       	dec	r0
    5dfc:	12 16       	cp	r1, r18
    5dfe:	13 06       	cpc	r1, r19
    5e00:	14 06       	cpc	r1, r20
    5e02:	05 06       	cpc	r0, r21
    5e04:	08 95       	ret

00005e06 <__fp_round>:
    5e06:	09 2e       	mov	r0, r25
    5e08:	03 94       	inc	r0
    5e0a:	00 0c       	add	r0, r0
    5e0c:	11 f4       	brne	.+4      	; 0x5e12 <__fp_round+0xc>
    5e0e:	88 23       	and	r24, r24
    5e10:	52 f0       	brmi	.+20     	; 0x5e26 <__fp_round+0x20>
    5e12:	bb 0f       	add	r27, r27
    5e14:	40 f4       	brcc	.+16     	; 0x5e26 <__fp_round+0x20>
    5e16:	bf 2b       	or	r27, r31
    5e18:	11 f4       	brne	.+4      	; 0x5e1e <__fp_round+0x18>
    5e1a:	60 ff       	sbrs	r22, 0
    5e1c:	04 c0       	rjmp	.+8      	; 0x5e26 <__fp_round+0x20>
    5e1e:	6f 5f       	subi	r22, 0xFF	; 255
    5e20:	7f 4f       	sbci	r23, 0xFF	; 255
    5e22:	8f 4f       	sbci	r24, 0xFF	; 255
    5e24:	9f 4f       	sbci	r25, 0xFF	; 255
    5e26:	08 95       	ret

00005e28 <__fp_split3>:
    5e28:	57 fd       	sbrc	r21, 7
    5e2a:	90 58       	subi	r25, 0x80	; 128
    5e2c:	44 0f       	add	r20, r20
    5e2e:	55 1f       	adc	r21, r21
    5e30:	59 f0       	breq	.+22     	; 0x5e48 <__fp_splitA+0x10>
    5e32:	5f 3f       	cpi	r21, 0xFF	; 255
    5e34:	71 f0       	breq	.+28     	; 0x5e52 <__fp_splitA+0x1a>
    5e36:	47 95       	ror	r20

00005e38 <__fp_splitA>:
    5e38:	88 0f       	add	r24, r24
    5e3a:	97 fb       	bst	r25, 7
    5e3c:	99 1f       	adc	r25, r25
    5e3e:	61 f0       	breq	.+24     	; 0x5e58 <__fp_splitA+0x20>
    5e40:	9f 3f       	cpi	r25, 0xFF	; 255
    5e42:	79 f0       	breq	.+30     	; 0x5e62 <__fp_splitA+0x2a>
    5e44:	87 95       	ror	r24
    5e46:	08 95       	ret
    5e48:	12 16       	cp	r1, r18
    5e4a:	13 06       	cpc	r1, r19
    5e4c:	14 06       	cpc	r1, r20
    5e4e:	55 1f       	adc	r21, r21
    5e50:	f2 cf       	rjmp	.-28     	; 0x5e36 <__fp_split3+0xe>
    5e52:	46 95       	lsr	r20
    5e54:	f1 df       	rcall	.-30     	; 0x5e38 <__fp_splitA>
    5e56:	08 c0       	rjmp	.+16     	; 0x5e68 <__fp_splitA+0x30>
    5e58:	16 16       	cp	r1, r22
    5e5a:	17 06       	cpc	r1, r23
    5e5c:	18 06       	cpc	r1, r24
    5e5e:	99 1f       	adc	r25, r25
    5e60:	f1 cf       	rjmp	.-30     	; 0x5e44 <__fp_splitA+0xc>
    5e62:	86 95       	lsr	r24
    5e64:	71 05       	cpc	r23, r1
    5e66:	61 05       	cpc	r22, r1
    5e68:	08 94       	sec
    5e6a:	08 95       	ret

00005e6c <__fp_zero>:
    5e6c:	e8 94       	clt

00005e6e <__fp_szero>:
    5e6e:	bb 27       	eor	r27, r27
    5e70:	66 27       	eor	r22, r22
    5e72:	77 27       	eor	r23, r23
    5e74:	cb 01       	movw	r24, r22
    5e76:	97 f9       	bld	r25, 7
    5e78:	08 95       	ret

00005e7a <__mulsf3>:
    5e7a:	0b d0       	rcall	.+22     	; 0x5e92 <__mulsf3x>
    5e7c:	c4 cf       	rjmp	.-120    	; 0x5e06 <__fp_round>
    5e7e:	b5 df       	rcall	.-150    	; 0x5dea <__fp_pscA>
    5e80:	28 f0       	brcs	.+10     	; 0x5e8c <__mulsf3+0x12>
    5e82:	ba df       	rcall	.-140    	; 0x5df8 <__fp_pscB>
    5e84:	18 f0       	brcs	.+6      	; 0x5e8c <__mulsf3+0x12>
    5e86:	95 23       	and	r25, r21
    5e88:	09 f0       	breq	.+2      	; 0x5e8c <__mulsf3+0x12>
    5e8a:	a6 cf       	rjmp	.-180    	; 0x5dd8 <__fp_inf>
    5e8c:	ab cf       	rjmp	.-170    	; 0x5de4 <__fp_nan>
    5e8e:	11 24       	eor	r1, r1
    5e90:	ee cf       	rjmp	.-36     	; 0x5e6e <__fp_szero>

00005e92 <__mulsf3x>:
    5e92:	ca df       	rcall	.-108    	; 0x5e28 <__fp_split3>
    5e94:	a0 f3       	brcs	.-24     	; 0x5e7e <__mulsf3+0x4>

00005e96 <__mulsf3_pse>:
    5e96:	95 9f       	mul	r25, r21
    5e98:	d1 f3       	breq	.-12     	; 0x5e8e <__mulsf3+0x14>
    5e9a:	95 0f       	add	r25, r21
    5e9c:	50 e0       	ldi	r21, 0x00	; 0
    5e9e:	55 1f       	adc	r21, r21
    5ea0:	62 9f       	mul	r22, r18
    5ea2:	f0 01       	movw	r30, r0
    5ea4:	72 9f       	mul	r23, r18
    5ea6:	bb 27       	eor	r27, r27
    5ea8:	f0 0d       	add	r31, r0
    5eaa:	b1 1d       	adc	r27, r1
    5eac:	63 9f       	mul	r22, r19
    5eae:	aa 27       	eor	r26, r26
    5eb0:	f0 0d       	add	r31, r0
    5eb2:	b1 1d       	adc	r27, r1
    5eb4:	aa 1f       	adc	r26, r26
    5eb6:	64 9f       	mul	r22, r20
    5eb8:	66 27       	eor	r22, r22
    5eba:	b0 0d       	add	r27, r0
    5ebc:	a1 1d       	adc	r26, r1
    5ebe:	66 1f       	adc	r22, r22
    5ec0:	82 9f       	mul	r24, r18
    5ec2:	22 27       	eor	r18, r18
    5ec4:	b0 0d       	add	r27, r0
    5ec6:	a1 1d       	adc	r26, r1
    5ec8:	62 1f       	adc	r22, r18
    5eca:	73 9f       	mul	r23, r19
    5ecc:	b0 0d       	add	r27, r0
    5ece:	a1 1d       	adc	r26, r1
    5ed0:	62 1f       	adc	r22, r18
    5ed2:	83 9f       	mul	r24, r19
    5ed4:	a0 0d       	add	r26, r0
    5ed6:	61 1d       	adc	r22, r1
    5ed8:	22 1f       	adc	r18, r18
    5eda:	74 9f       	mul	r23, r20
    5edc:	33 27       	eor	r19, r19
    5ede:	a0 0d       	add	r26, r0
    5ee0:	61 1d       	adc	r22, r1
    5ee2:	23 1f       	adc	r18, r19
    5ee4:	84 9f       	mul	r24, r20
    5ee6:	60 0d       	add	r22, r0
    5ee8:	21 1d       	adc	r18, r1
    5eea:	82 2f       	mov	r24, r18
    5eec:	76 2f       	mov	r23, r22
    5eee:	6a 2f       	mov	r22, r26
    5ef0:	11 24       	eor	r1, r1
    5ef2:	9f 57       	subi	r25, 0x7F	; 127
    5ef4:	50 40       	sbci	r21, 0x00	; 0
    5ef6:	8a f0       	brmi	.+34     	; 0x5f1a <__mulsf3_pse+0x84>
    5ef8:	e1 f0       	breq	.+56     	; 0x5f32 <__mulsf3_pse+0x9c>
    5efa:	88 23       	and	r24, r24
    5efc:	4a f0       	brmi	.+18     	; 0x5f10 <__mulsf3_pse+0x7a>
    5efe:	ee 0f       	add	r30, r30
    5f00:	ff 1f       	adc	r31, r31
    5f02:	bb 1f       	adc	r27, r27
    5f04:	66 1f       	adc	r22, r22
    5f06:	77 1f       	adc	r23, r23
    5f08:	88 1f       	adc	r24, r24
    5f0a:	91 50       	subi	r25, 0x01	; 1
    5f0c:	50 40       	sbci	r21, 0x00	; 0
    5f0e:	a9 f7       	brne	.-22     	; 0x5efa <__mulsf3_pse+0x64>
    5f10:	9e 3f       	cpi	r25, 0xFE	; 254
    5f12:	51 05       	cpc	r21, r1
    5f14:	70 f0       	brcs	.+28     	; 0x5f32 <__mulsf3_pse+0x9c>
    5f16:	60 cf       	rjmp	.-320    	; 0x5dd8 <__fp_inf>
    5f18:	aa cf       	rjmp	.-172    	; 0x5e6e <__fp_szero>
    5f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f1c:	ec f3       	brlt	.-6      	; 0x5f18 <__mulsf3_pse+0x82>
    5f1e:	98 3e       	cpi	r25, 0xE8	; 232
    5f20:	dc f3       	brlt	.-10     	; 0x5f18 <__mulsf3_pse+0x82>
    5f22:	86 95       	lsr	r24
    5f24:	77 95       	ror	r23
    5f26:	67 95       	ror	r22
    5f28:	b7 95       	ror	r27
    5f2a:	f7 95       	ror	r31
    5f2c:	e7 95       	ror	r30
    5f2e:	9f 5f       	subi	r25, 0xFF	; 255
    5f30:	c1 f7       	brne	.-16     	; 0x5f22 <__mulsf3_pse+0x8c>
    5f32:	fe 2b       	or	r31, r30
    5f34:	88 0f       	add	r24, r24
    5f36:	91 1d       	adc	r25, r1
    5f38:	96 95       	lsr	r25
    5f3a:	87 95       	ror	r24
    5f3c:	97 f9       	bld	r25, 7
    5f3e:	08 95       	ret

00005f40 <__divmodhi4>:
    5f40:	97 fb       	bst	r25, 7
    5f42:	07 2e       	mov	r0, r23
    5f44:	16 f4       	brtc	.+4      	; 0x5f4a <__divmodhi4+0xa>
    5f46:	00 94       	com	r0
    5f48:	06 d0       	rcall	.+12     	; 0x5f56 <__divmodhi4_neg1>
    5f4a:	77 fd       	sbrc	r23, 7
    5f4c:	08 d0       	rcall	.+16     	; 0x5f5e <__divmodhi4_neg2>
    5f4e:	44 d0       	rcall	.+136    	; 0x5fd8 <__udivmodhi4>
    5f50:	07 fc       	sbrc	r0, 7
    5f52:	05 d0       	rcall	.+10     	; 0x5f5e <__divmodhi4_neg2>
    5f54:	3e f4       	brtc	.+14     	; 0x5f64 <__divmodhi4_exit>

00005f56 <__divmodhi4_neg1>:
    5f56:	90 95       	com	r25
    5f58:	81 95       	neg	r24
    5f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5c:	08 95       	ret

00005f5e <__divmodhi4_neg2>:
    5f5e:	70 95       	com	r23
    5f60:	61 95       	neg	r22
    5f62:	7f 4f       	sbci	r23, 0xFF	; 255

00005f64 <__divmodhi4_exit>:
    5f64:	08 95       	ret

00005f66 <__udivmodsi4>:
    5f66:	a1 e2       	ldi	r26, 0x21	; 33
    5f68:	1a 2e       	mov	r1, r26
    5f6a:	aa 1b       	sub	r26, r26
    5f6c:	bb 1b       	sub	r27, r27
    5f6e:	fd 01       	movw	r30, r26
    5f70:	0d c0       	rjmp	.+26     	; 0x5f8c <__udivmodsi4_ep>

00005f72 <__udivmodsi4_loop>:
    5f72:	aa 1f       	adc	r26, r26
    5f74:	bb 1f       	adc	r27, r27
    5f76:	ee 1f       	adc	r30, r30
    5f78:	ff 1f       	adc	r31, r31
    5f7a:	a2 17       	cp	r26, r18
    5f7c:	b3 07       	cpc	r27, r19
    5f7e:	e4 07       	cpc	r30, r20
    5f80:	f5 07       	cpc	r31, r21
    5f82:	20 f0       	brcs	.+8      	; 0x5f8c <__udivmodsi4_ep>
    5f84:	a2 1b       	sub	r26, r18
    5f86:	b3 0b       	sbc	r27, r19
    5f88:	e4 0b       	sbc	r30, r20
    5f8a:	f5 0b       	sbc	r31, r21

00005f8c <__udivmodsi4_ep>:
    5f8c:	66 1f       	adc	r22, r22
    5f8e:	77 1f       	adc	r23, r23
    5f90:	88 1f       	adc	r24, r24
    5f92:	99 1f       	adc	r25, r25
    5f94:	1a 94       	dec	r1
    5f96:	69 f7       	brne	.-38     	; 0x5f72 <__udivmodsi4_loop>
    5f98:	60 95       	com	r22
    5f9a:	70 95       	com	r23
    5f9c:	80 95       	com	r24
    5f9e:	90 95       	com	r25
    5fa0:	9b 01       	movw	r18, r22
    5fa2:	ac 01       	movw	r20, r24
    5fa4:	bd 01       	movw	r22, r26
    5fa6:	cf 01       	movw	r24, r30
    5fa8:	08 95       	ret

00005faa <__tablejump2__>:
    5faa:	ee 0f       	add	r30, r30
    5fac:	ff 1f       	adc	r31, r31
    5fae:	88 1f       	adc	r24, r24
    5fb0:	8b bf       	out	0x3b, r24	; 59
    5fb2:	07 90       	elpm	r0, Z+
    5fb4:	f6 91       	elpm	r31, Z
    5fb6:	e0 2d       	mov	r30, r0
    5fb8:	19 94       	eijmp

00005fba <__umulhisi3>:
    5fba:	a2 9f       	mul	r26, r18
    5fbc:	b0 01       	movw	r22, r0
    5fbe:	b3 9f       	mul	r27, r19
    5fc0:	c0 01       	movw	r24, r0
    5fc2:	a3 9f       	mul	r26, r19
    5fc4:	70 0d       	add	r23, r0
    5fc6:	81 1d       	adc	r24, r1
    5fc8:	11 24       	eor	r1, r1
    5fca:	91 1d       	adc	r25, r1
    5fcc:	b2 9f       	mul	r27, r18
    5fce:	70 0d       	add	r23, r0
    5fd0:	81 1d       	adc	r24, r1
    5fd2:	11 24       	eor	r1, r1
    5fd4:	91 1d       	adc	r25, r1
    5fd6:	08 95       	ret

00005fd8 <__udivmodhi4>:
    5fd8:	aa 1b       	sub	r26, r26
    5fda:	bb 1b       	sub	r27, r27
    5fdc:	51 e1       	ldi	r21, 0x11	; 17
    5fde:	07 c0       	rjmp	.+14     	; 0x5fee <__udivmodhi4_ep>

00005fe0 <__udivmodhi4_loop>:
    5fe0:	aa 1f       	adc	r26, r26
    5fe2:	bb 1f       	adc	r27, r27
    5fe4:	a6 17       	cp	r26, r22
    5fe6:	b7 07       	cpc	r27, r23
    5fe8:	10 f0       	brcs	.+4      	; 0x5fee <__udivmodhi4_ep>
    5fea:	a6 1b       	sub	r26, r22
    5fec:	b7 0b       	sbc	r27, r23

00005fee <__udivmodhi4_ep>:
    5fee:	88 1f       	adc	r24, r24
    5ff0:	99 1f       	adc	r25, r25
    5ff2:	5a 95       	dec	r21
    5ff4:	a9 f7       	brne	.-22     	; 0x5fe0 <__udivmodhi4_loop>
    5ff6:	80 95       	com	r24
    5ff8:	90 95       	com	r25
    5ffa:	bc 01       	movw	r22, r24
    5ffc:	cd 01       	movw	r24, r26
    5ffe:	08 95       	ret

00006000 <malloc>:
    6000:	0f 93       	push	r16
    6002:	1f 93       	push	r17
    6004:	cf 93       	push	r28
    6006:	df 93       	push	r29
    6008:	82 30       	cpi	r24, 0x02	; 2
    600a:	91 05       	cpc	r25, r1
    600c:	10 f4       	brcc	.+4      	; 0x6012 <malloc+0x12>
    600e:	82 e0       	ldi	r24, 0x02	; 2
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	e0 91 fb 13 	lds	r30, 0x13FB	; 0x8013fb <__flp>
    6016:	f0 91 fc 13 	lds	r31, 0x13FC	; 0x8013fc <__flp+0x1>
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	a0 e0       	ldi	r26, 0x00	; 0
    6020:	b0 e0       	ldi	r27, 0x00	; 0
    6022:	30 97       	sbiw	r30, 0x00	; 0
    6024:	19 f1       	breq	.+70     	; 0x606c <malloc+0x6c>
    6026:	40 81       	ld	r20, Z
    6028:	51 81       	ldd	r21, Z+1	; 0x01
    602a:	02 81       	ldd	r16, Z+2	; 0x02
    602c:	13 81       	ldd	r17, Z+3	; 0x03
    602e:	48 17       	cp	r20, r24
    6030:	59 07       	cpc	r21, r25
    6032:	c8 f0       	brcs	.+50     	; 0x6066 <malloc+0x66>
    6034:	84 17       	cp	r24, r20
    6036:	95 07       	cpc	r25, r21
    6038:	69 f4       	brne	.+26     	; 0x6054 <malloc+0x54>
    603a:	10 97       	sbiw	r26, 0x00	; 0
    603c:	31 f0       	breq	.+12     	; 0x604a <malloc+0x4a>
    603e:	12 96       	adiw	r26, 0x02	; 2
    6040:	0c 93       	st	X, r16
    6042:	12 97       	sbiw	r26, 0x02	; 2
    6044:	13 96       	adiw	r26, 0x03	; 3
    6046:	1c 93       	st	X, r17
    6048:	27 c0       	rjmp	.+78     	; 0x6098 <malloc+0x98>
    604a:	00 93 fb 13 	sts	0x13FB, r16	; 0x8013fb <__flp>
    604e:	10 93 fc 13 	sts	0x13FC, r17	; 0x8013fc <__flp+0x1>
    6052:	22 c0       	rjmp	.+68     	; 0x6098 <malloc+0x98>
    6054:	21 15       	cp	r18, r1
    6056:	31 05       	cpc	r19, r1
    6058:	19 f0       	breq	.+6      	; 0x6060 <malloc+0x60>
    605a:	42 17       	cp	r20, r18
    605c:	53 07       	cpc	r21, r19
    605e:	18 f4       	brcc	.+6      	; 0x6066 <malloc+0x66>
    6060:	9a 01       	movw	r18, r20
    6062:	bd 01       	movw	r22, r26
    6064:	ef 01       	movw	r28, r30
    6066:	df 01       	movw	r26, r30
    6068:	f8 01       	movw	r30, r16
    606a:	db cf       	rjmp	.-74     	; 0x6022 <malloc+0x22>
    606c:	21 15       	cp	r18, r1
    606e:	31 05       	cpc	r19, r1
    6070:	f9 f0       	breq	.+62     	; 0x60b0 <malloc+0xb0>
    6072:	28 1b       	sub	r18, r24
    6074:	39 0b       	sbc	r19, r25
    6076:	24 30       	cpi	r18, 0x04	; 4
    6078:	31 05       	cpc	r19, r1
    607a:	80 f4       	brcc	.+32     	; 0x609c <malloc+0x9c>
    607c:	8a 81       	ldd	r24, Y+2	; 0x02
    607e:	9b 81       	ldd	r25, Y+3	; 0x03
    6080:	61 15       	cp	r22, r1
    6082:	71 05       	cpc	r23, r1
    6084:	21 f0       	breq	.+8      	; 0x608e <malloc+0x8e>
    6086:	fb 01       	movw	r30, r22
    6088:	93 83       	std	Z+3, r25	; 0x03
    608a:	82 83       	std	Z+2, r24	; 0x02
    608c:	04 c0       	rjmp	.+8      	; 0x6096 <malloc+0x96>
    608e:	90 93 fc 13 	sts	0x13FC, r25	; 0x8013fc <__flp+0x1>
    6092:	80 93 fb 13 	sts	0x13FB, r24	; 0x8013fb <__flp>
    6096:	fe 01       	movw	r30, r28
    6098:	32 96       	adiw	r30, 0x02	; 2
    609a:	44 c0       	rjmp	.+136    	; 0x6124 <malloc+0x124>
    609c:	fe 01       	movw	r30, r28
    609e:	e2 0f       	add	r30, r18
    60a0:	f3 1f       	adc	r31, r19
    60a2:	81 93       	st	Z+, r24
    60a4:	91 93       	st	Z+, r25
    60a6:	22 50       	subi	r18, 0x02	; 2
    60a8:	31 09       	sbc	r19, r1
    60aa:	39 83       	std	Y+1, r19	; 0x01
    60ac:	28 83       	st	Y, r18
    60ae:	3a c0       	rjmp	.+116    	; 0x6124 <malloc+0x124>
    60b0:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <__brkval>
    60b4:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <__brkval+0x1>
    60b8:	23 2b       	or	r18, r19
    60ba:	41 f4       	brne	.+16     	; 0x60cc <malloc+0xcc>
    60bc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    60c0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    60c4:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <__brkval+0x1>
    60c8:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <__brkval>
    60cc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    60d0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    60d4:	21 15       	cp	r18, r1
    60d6:	31 05       	cpc	r19, r1
    60d8:	41 f4       	brne	.+16     	; 0x60ea <malloc+0xea>
    60da:	2d b7       	in	r18, 0x3d	; 61
    60dc:	3e b7       	in	r19, 0x3e	; 62
    60de:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    60e2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    60e6:	24 1b       	sub	r18, r20
    60e8:	35 0b       	sbc	r19, r21
    60ea:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <__brkval>
    60ee:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <__brkval+0x1>
    60f2:	e2 17       	cp	r30, r18
    60f4:	f3 07       	cpc	r31, r19
    60f6:	a0 f4       	brcc	.+40     	; 0x6120 <malloc+0x120>
    60f8:	2e 1b       	sub	r18, r30
    60fa:	3f 0b       	sbc	r19, r31
    60fc:	28 17       	cp	r18, r24
    60fe:	39 07       	cpc	r19, r25
    6100:	78 f0       	brcs	.+30     	; 0x6120 <malloc+0x120>
    6102:	ac 01       	movw	r20, r24
    6104:	4e 5f       	subi	r20, 0xFE	; 254
    6106:	5f 4f       	sbci	r21, 0xFF	; 255
    6108:	24 17       	cp	r18, r20
    610a:	35 07       	cpc	r19, r21
    610c:	48 f0       	brcs	.+18     	; 0x6120 <malloc+0x120>
    610e:	4e 0f       	add	r20, r30
    6110:	5f 1f       	adc	r21, r31
    6112:	50 93 fa 13 	sts	0x13FA, r21	; 0x8013fa <__brkval+0x1>
    6116:	40 93 f9 13 	sts	0x13F9, r20	; 0x8013f9 <__brkval>
    611a:	81 93       	st	Z+, r24
    611c:	91 93       	st	Z+, r25
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <malloc+0x124>
    6120:	e0 e0       	ldi	r30, 0x00	; 0
    6122:	f0 e0       	ldi	r31, 0x00	; 0
    6124:	cf 01       	movw	r24, r30
    6126:	df 91       	pop	r29
    6128:	cf 91       	pop	r28
    612a:	1f 91       	pop	r17
    612c:	0f 91       	pop	r16
    612e:	08 95       	ret

00006130 <free>:
    6130:	cf 93       	push	r28
    6132:	df 93       	push	r29
    6134:	00 97       	sbiw	r24, 0x00	; 0
    6136:	09 f4       	brne	.+2      	; 0x613a <free+0xa>
    6138:	81 c0       	rjmp	.+258    	; 0x623c <free+0x10c>
    613a:	fc 01       	movw	r30, r24
    613c:	32 97       	sbiw	r30, 0x02	; 2
    613e:	13 82       	std	Z+3, r1	; 0x03
    6140:	12 82       	std	Z+2, r1	; 0x02
    6142:	a0 91 fb 13 	lds	r26, 0x13FB	; 0x8013fb <__flp>
    6146:	b0 91 fc 13 	lds	r27, 0x13FC	; 0x8013fc <__flp+0x1>
    614a:	10 97       	sbiw	r26, 0x00	; 0
    614c:	81 f4       	brne	.+32     	; 0x616e <free+0x3e>
    614e:	20 81       	ld	r18, Z
    6150:	31 81       	ldd	r19, Z+1	; 0x01
    6152:	82 0f       	add	r24, r18
    6154:	93 1f       	adc	r25, r19
    6156:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <__brkval>
    615a:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <__brkval+0x1>
    615e:	28 17       	cp	r18, r24
    6160:	39 07       	cpc	r19, r25
    6162:	51 f5       	brne	.+84     	; 0x61b8 <free+0x88>
    6164:	f0 93 fa 13 	sts	0x13FA, r31	; 0x8013fa <__brkval+0x1>
    6168:	e0 93 f9 13 	sts	0x13F9, r30	; 0x8013f9 <__brkval>
    616c:	67 c0       	rjmp	.+206    	; 0x623c <free+0x10c>
    616e:	ed 01       	movw	r28, r26
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	ce 17       	cp	r28, r30
    6176:	df 07       	cpc	r29, r31
    6178:	40 f4       	brcc	.+16     	; 0x618a <free+0x5a>
    617a:	4a 81       	ldd	r20, Y+2	; 0x02
    617c:	5b 81       	ldd	r21, Y+3	; 0x03
    617e:	9e 01       	movw	r18, r28
    6180:	41 15       	cp	r20, r1
    6182:	51 05       	cpc	r21, r1
    6184:	f1 f0       	breq	.+60     	; 0x61c2 <free+0x92>
    6186:	ea 01       	movw	r28, r20
    6188:	f5 cf       	rjmp	.-22     	; 0x6174 <free+0x44>
    618a:	d3 83       	std	Z+3, r29	; 0x03
    618c:	c2 83       	std	Z+2, r28	; 0x02
    618e:	40 81       	ld	r20, Z
    6190:	51 81       	ldd	r21, Z+1	; 0x01
    6192:	84 0f       	add	r24, r20
    6194:	95 1f       	adc	r25, r21
    6196:	c8 17       	cp	r28, r24
    6198:	d9 07       	cpc	r29, r25
    619a:	59 f4       	brne	.+22     	; 0x61b2 <free+0x82>
    619c:	88 81       	ld	r24, Y
    619e:	99 81       	ldd	r25, Y+1	; 0x01
    61a0:	84 0f       	add	r24, r20
    61a2:	95 1f       	adc	r25, r21
    61a4:	02 96       	adiw	r24, 0x02	; 2
    61a6:	91 83       	std	Z+1, r25	; 0x01
    61a8:	80 83       	st	Z, r24
    61aa:	8a 81       	ldd	r24, Y+2	; 0x02
    61ac:	9b 81       	ldd	r25, Y+3	; 0x03
    61ae:	93 83       	std	Z+3, r25	; 0x03
    61b0:	82 83       	std	Z+2, r24	; 0x02
    61b2:	21 15       	cp	r18, r1
    61b4:	31 05       	cpc	r19, r1
    61b6:	29 f4       	brne	.+10     	; 0x61c2 <free+0x92>
    61b8:	f0 93 fc 13 	sts	0x13FC, r31	; 0x8013fc <__flp+0x1>
    61bc:	e0 93 fb 13 	sts	0x13FB, r30	; 0x8013fb <__flp>
    61c0:	3d c0       	rjmp	.+122    	; 0x623c <free+0x10c>
    61c2:	e9 01       	movw	r28, r18
    61c4:	fb 83       	std	Y+3, r31	; 0x03
    61c6:	ea 83       	std	Y+2, r30	; 0x02
    61c8:	49 91       	ld	r20, Y+
    61ca:	59 91       	ld	r21, Y+
    61cc:	c4 0f       	add	r28, r20
    61ce:	d5 1f       	adc	r29, r21
    61d0:	ec 17       	cp	r30, r28
    61d2:	fd 07       	cpc	r31, r29
    61d4:	61 f4       	brne	.+24     	; 0x61ee <free+0xbe>
    61d6:	80 81       	ld	r24, Z
    61d8:	91 81       	ldd	r25, Z+1	; 0x01
    61da:	84 0f       	add	r24, r20
    61dc:	95 1f       	adc	r25, r21
    61de:	02 96       	adiw	r24, 0x02	; 2
    61e0:	e9 01       	movw	r28, r18
    61e2:	99 83       	std	Y+1, r25	; 0x01
    61e4:	88 83       	st	Y, r24
    61e6:	82 81       	ldd	r24, Z+2	; 0x02
    61e8:	93 81       	ldd	r25, Z+3	; 0x03
    61ea:	9b 83       	std	Y+3, r25	; 0x03
    61ec:	8a 83       	std	Y+2, r24	; 0x02
    61ee:	e0 e0       	ldi	r30, 0x00	; 0
    61f0:	f0 e0       	ldi	r31, 0x00	; 0
    61f2:	12 96       	adiw	r26, 0x02	; 2
    61f4:	8d 91       	ld	r24, X+
    61f6:	9c 91       	ld	r25, X
    61f8:	13 97       	sbiw	r26, 0x03	; 3
    61fa:	00 97       	sbiw	r24, 0x00	; 0
    61fc:	19 f0       	breq	.+6      	; 0x6204 <free+0xd4>
    61fe:	fd 01       	movw	r30, r26
    6200:	dc 01       	movw	r26, r24
    6202:	f7 cf       	rjmp	.-18     	; 0x61f2 <free+0xc2>
    6204:	8d 91       	ld	r24, X+
    6206:	9c 91       	ld	r25, X
    6208:	11 97       	sbiw	r26, 0x01	; 1
    620a:	9d 01       	movw	r18, r26
    620c:	2e 5f       	subi	r18, 0xFE	; 254
    620e:	3f 4f       	sbci	r19, 0xFF	; 255
    6210:	82 0f       	add	r24, r18
    6212:	93 1f       	adc	r25, r19
    6214:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <__brkval>
    6218:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <__brkval+0x1>
    621c:	28 17       	cp	r18, r24
    621e:	39 07       	cpc	r19, r25
    6220:	69 f4       	brne	.+26     	; 0x623c <free+0x10c>
    6222:	30 97       	sbiw	r30, 0x00	; 0
    6224:	29 f4       	brne	.+10     	; 0x6230 <free+0x100>
    6226:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <__flp+0x1>
    622a:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <__flp>
    622e:	02 c0       	rjmp	.+4      	; 0x6234 <free+0x104>
    6230:	13 82       	std	Z+3, r1	; 0x03
    6232:	12 82       	std	Z+2, r1	; 0x02
    6234:	b0 93 fa 13 	sts	0x13FA, r27	; 0x8013fa <__brkval+0x1>
    6238:	a0 93 f9 13 	sts	0x13F9, r26	; 0x8013f9 <__brkval>
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	08 95       	ret

00006242 <abort>:
    6242:	81 e0       	ldi	r24, 0x01	; 1
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	f8 94       	cli
    6248:	dc c1       	rjmp	.+952    	; 0x6602 <_exit>

0000624a <__ftoa_engine>:
    624a:	28 30       	cpi	r18, 0x08	; 8
    624c:	08 f0       	brcs	.+2      	; 0x6250 <__ftoa_engine+0x6>
    624e:	27 e0       	ldi	r18, 0x07	; 7
    6250:	33 27       	eor	r19, r19
    6252:	da 01       	movw	r26, r20
    6254:	99 0f       	add	r25, r25
    6256:	31 1d       	adc	r19, r1
    6258:	87 fd       	sbrc	r24, 7
    625a:	91 60       	ori	r25, 0x01	; 1
    625c:	00 96       	adiw	r24, 0x00	; 0
    625e:	61 05       	cpc	r22, r1
    6260:	71 05       	cpc	r23, r1
    6262:	39 f4       	brne	.+14     	; 0x6272 <__ftoa_engine+0x28>
    6264:	32 60       	ori	r19, 0x02	; 2
    6266:	2e 5f       	subi	r18, 0xFE	; 254
    6268:	3d 93       	st	X+, r19
    626a:	30 e3       	ldi	r19, 0x30	; 48
    626c:	2a 95       	dec	r18
    626e:	e1 f7       	brne	.-8      	; 0x6268 <__ftoa_engine+0x1e>
    6270:	08 95       	ret
    6272:	9f 3f       	cpi	r25, 0xFF	; 255
    6274:	30 f0       	brcs	.+12     	; 0x6282 <__ftoa_engine+0x38>
    6276:	80 38       	cpi	r24, 0x80	; 128
    6278:	71 05       	cpc	r23, r1
    627a:	61 05       	cpc	r22, r1
    627c:	09 f0       	breq	.+2      	; 0x6280 <__ftoa_engine+0x36>
    627e:	3c 5f       	subi	r19, 0xFC	; 252
    6280:	3c 5f       	subi	r19, 0xFC	; 252
    6282:	3d 93       	st	X+, r19
    6284:	91 30       	cpi	r25, 0x01	; 1
    6286:	08 f0       	brcs	.+2      	; 0x628a <__ftoa_engine+0x40>
    6288:	80 68       	ori	r24, 0x80	; 128
    628a:	91 1d       	adc	r25, r1
    628c:	df 93       	push	r29
    628e:	cf 93       	push	r28
    6290:	1f 93       	push	r17
    6292:	0f 93       	push	r16
    6294:	ff 92       	push	r15
    6296:	ef 92       	push	r14
    6298:	19 2f       	mov	r17, r25
    629a:	98 7f       	andi	r25, 0xF8	; 248
    629c:	96 95       	lsr	r25
    629e:	e9 2f       	mov	r30, r25
    62a0:	96 95       	lsr	r25
    62a2:	96 95       	lsr	r25
    62a4:	e9 0f       	add	r30, r25
    62a6:	ff 27       	eor	r31, r31
    62a8:	e4 50       	subi	r30, 0x04	; 4
    62aa:	fe 4f       	sbci	r31, 0xFE	; 254
    62ac:	99 27       	eor	r25, r25
    62ae:	33 27       	eor	r19, r19
    62b0:	ee 24       	eor	r14, r14
    62b2:	ff 24       	eor	r15, r15
    62b4:	a7 01       	movw	r20, r14
    62b6:	e7 01       	movw	r28, r14
    62b8:	05 90       	lpm	r0, Z+
    62ba:	08 94       	sec
    62bc:	07 94       	ror	r0
    62be:	28 f4       	brcc	.+10     	; 0x62ca <__ftoa_engine+0x80>
    62c0:	36 0f       	add	r19, r22
    62c2:	e7 1e       	adc	r14, r23
    62c4:	f8 1e       	adc	r15, r24
    62c6:	49 1f       	adc	r20, r25
    62c8:	51 1d       	adc	r21, r1
    62ca:	66 0f       	add	r22, r22
    62cc:	77 1f       	adc	r23, r23
    62ce:	88 1f       	adc	r24, r24
    62d0:	99 1f       	adc	r25, r25
    62d2:	06 94       	lsr	r0
    62d4:	a1 f7       	brne	.-24     	; 0x62be <__ftoa_engine+0x74>
    62d6:	05 90       	lpm	r0, Z+
    62d8:	07 94       	ror	r0
    62da:	28 f4       	brcc	.+10     	; 0x62e6 <__ftoa_engine+0x9c>
    62dc:	e7 0e       	add	r14, r23
    62de:	f8 1e       	adc	r15, r24
    62e0:	49 1f       	adc	r20, r25
    62e2:	56 1f       	adc	r21, r22
    62e4:	c1 1d       	adc	r28, r1
    62e6:	77 0f       	add	r23, r23
    62e8:	88 1f       	adc	r24, r24
    62ea:	99 1f       	adc	r25, r25
    62ec:	66 1f       	adc	r22, r22
    62ee:	06 94       	lsr	r0
    62f0:	a1 f7       	brne	.-24     	; 0x62da <__ftoa_engine+0x90>
    62f2:	05 90       	lpm	r0, Z+
    62f4:	07 94       	ror	r0
    62f6:	28 f4       	brcc	.+10     	; 0x6302 <__ftoa_engine+0xb8>
    62f8:	f8 0e       	add	r15, r24
    62fa:	49 1f       	adc	r20, r25
    62fc:	56 1f       	adc	r21, r22
    62fe:	c7 1f       	adc	r28, r23
    6300:	d1 1d       	adc	r29, r1
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	66 1f       	adc	r22, r22
    6308:	77 1f       	adc	r23, r23
    630a:	06 94       	lsr	r0
    630c:	a1 f7       	brne	.-24     	; 0x62f6 <__ftoa_engine+0xac>
    630e:	05 90       	lpm	r0, Z+
    6310:	07 94       	ror	r0
    6312:	20 f4       	brcc	.+8      	; 0x631c <__ftoa_engine+0xd2>
    6314:	49 0f       	add	r20, r25
    6316:	56 1f       	adc	r21, r22
    6318:	c7 1f       	adc	r28, r23
    631a:	d8 1f       	adc	r29, r24
    631c:	99 0f       	add	r25, r25
    631e:	66 1f       	adc	r22, r22
    6320:	77 1f       	adc	r23, r23
    6322:	88 1f       	adc	r24, r24
    6324:	06 94       	lsr	r0
    6326:	a9 f7       	brne	.-22     	; 0x6312 <__ftoa_engine+0xc8>
    6328:	84 91       	lpm	r24, Z
    632a:	10 95       	com	r17
    632c:	17 70       	andi	r17, 0x07	; 7
    632e:	41 f0       	breq	.+16     	; 0x6340 <__ftoa_engine+0xf6>
    6330:	d6 95       	lsr	r29
    6332:	c7 95       	ror	r28
    6334:	57 95       	ror	r21
    6336:	47 95       	ror	r20
    6338:	f7 94       	ror	r15
    633a:	e7 94       	ror	r14
    633c:	1a 95       	dec	r17
    633e:	c1 f7       	brne	.-16     	; 0x6330 <__ftoa_engine+0xe6>
    6340:	e2 ea       	ldi	r30, 0xA2	; 162
    6342:	f1 e0       	ldi	r31, 0x01	; 1
    6344:	68 94       	set
    6346:	15 90       	lpm	r1, Z+
    6348:	15 91       	lpm	r17, Z+
    634a:	35 91       	lpm	r19, Z+
    634c:	65 91       	lpm	r22, Z+
    634e:	95 91       	lpm	r25, Z+
    6350:	05 90       	lpm	r0, Z+
    6352:	7f e2       	ldi	r23, 0x2F	; 47
    6354:	73 95       	inc	r23
    6356:	e1 18       	sub	r14, r1
    6358:	f1 0a       	sbc	r15, r17
    635a:	43 0b       	sbc	r20, r19
    635c:	56 0b       	sbc	r21, r22
    635e:	c9 0b       	sbc	r28, r25
    6360:	d0 09       	sbc	r29, r0
    6362:	c0 f7       	brcc	.-16     	; 0x6354 <__ftoa_engine+0x10a>
    6364:	e1 0c       	add	r14, r1
    6366:	f1 1e       	adc	r15, r17
    6368:	43 1f       	adc	r20, r19
    636a:	56 1f       	adc	r21, r22
    636c:	c9 1f       	adc	r28, r25
    636e:	d0 1d       	adc	r29, r0
    6370:	7e f4       	brtc	.+30     	; 0x6390 <__ftoa_engine+0x146>
    6372:	70 33       	cpi	r23, 0x30	; 48
    6374:	11 f4       	brne	.+4      	; 0x637a <__ftoa_engine+0x130>
    6376:	8a 95       	dec	r24
    6378:	e6 cf       	rjmp	.-52     	; 0x6346 <__ftoa_engine+0xfc>
    637a:	e8 94       	clt
    637c:	01 50       	subi	r16, 0x01	; 1
    637e:	30 f0       	brcs	.+12     	; 0x638c <__ftoa_engine+0x142>
    6380:	08 0f       	add	r16, r24
    6382:	0a f4       	brpl	.+2      	; 0x6386 <__ftoa_engine+0x13c>
    6384:	00 27       	eor	r16, r16
    6386:	02 17       	cp	r16, r18
    6388:	08 f4       	brcc	.+2      	; 0x638c <__ftoa_engine+0x142>
    638a:	20 2f       	mov	r18, r16
    638c:	23 95       	inc	r18
    638e:	02 2f       	mov	r16, r18
    6390:	7a 33       	cpi	r23, 0x3A	; 58
    6392:	28 f0       	brcs	.+10     	; 0x639e <__ftoa_engine+0x154>
    6394:	79 e3       	ldi	r23, 0x39	; 57
    6396:	7d 93       	st	X+, r23
    6398:	2a 95       	dec	r18
    639a:	e9 f7       	brne	.-6      	; 0x6396 <__ftoa_engine+0x14c>
    639c:	10 c0       	rjmp	.+32     	; 0x63be <__ftoa_engine+0x174>
    639e:	7d 93       	st	X+, r23
    63a0:	2a 95       	dec	r18
    63a2:	89 f6       	brne	.-94     	; 0x6346 <__ftoa_engine+0xfc>
    63a4:	06 94       	lsr	r0
    63a6:	97 95       	ror	r25
    63a8:	67 95       	ror	r22
    63aa:	37 95       	ror	r19
    63ac:	17 95       	ror	r17
    63ae:	17 94       	ror	r1
    63b0:	e1 18       	sub	r14, r1
    63b2:	f1 0a       	sbc	r15, r17
    63b4:	43 0b       	sbc	r20, r19
    63b6:	56 0b       	sbc	r21, r22
    63b8:	c9 0b       	sbc	r28, r25
    63ba:	d0 09       	sbc	r29, r0
    63bc:	98 f0       	brcs	.+38     	; 0x63e4 <__ftoa_engine+0x19a>
    63be:	23 95       	inc	r18
    63c0:	7e 91       	ld	r23, -X
    63c2:	73 95       	inc	r23
    63c4:	7a 33       	cpi	r23, 0x3A	; 58
    63c6:	08 f0       	brcs	.+2      	; 0x63ca <__ftoa_engine+0x180>
    63c8:	70 e3       	ldi	r23, 0x30	; 48
    63ca:	7c 93       	st	X, r23
    63cc:	20 13       	cpse	r18, r16
    63ce:	b8 f7       	brcc	.-18     	; 0x63be <__ftoa_engine+0x174>
    63d0:	7e 91       	ld	r23, -X
    63d2:	70 61       	ori	r23, 0x10	; 16
    63d4:	7d 93       	st	X+, r23
    63d6:	30 f0       	brcs	.+12     	; 0x63e4 <__ftoa_engine+0x19a>
    63d8:	83 95       	inc	r24
    63da:	71 e3       	ldi	r23, 0x31	; 49
    63dc:	7d 93       	st	X+, r23
    63de:	70 e3       	ldi	r23, 0x30	; 48
    63e0:	2a 95       	dec	r18
    63e2:	e1 f7       	brne	.-8      	; 0x63dc <__ftoa_engine+0x192>
    63e4:	11 24       	eor	r1, r1
    63e6:	ef 90       	pop	r14
    63e8:	ff 90       	pop	r15
    63ea:	0f 91       	pop	r16
    63ec:	1f 91       	pop	r17
    63ee:	cf 91       	pop	r28
    63f0:	df 91       	pop	r29
    63f2:	99 27       	eor	r25, r25
    63f4:	87 fd       	sbrc	r24, 7
    63f6:	90 95       	com	r25
    63f8:	08 95       	ret

000063fa <strnlen_P>:
    63fa:	fc 01       	movw	r30, r24
    63fc:	05 90       	lpm	r0, Z+
    63fe:	61 50       	subi	r22, 0x01	; 1
    6400:	70 40       	sbci	r23, 0x00	; 0
    6402:	01 10       	cpse	r0, r1
    6404:	d8 f7       	brcc	.-10     	; 0x63fc <strnlen_P+0x2>
    6406:	80 95       	com	r24
    6408:	90 95       	com	r25
    640a:	8e 0f       	add	r24, r30
    640c:	9f 1f       	adc	r25, r31
    640e:	08 95       	ret

00006410 <memcpy>:
    6410:	fb 01       	movw	r30, r22
    6412:	dc 01       	movw	r26, r24
    6414:	02 c0       	rjmp	.+4      	; 0x641a <memcpy+0xa>
    6416:	01 90       	ld	r0, Z+
    6418:	0d 92       	st	X+, r0
    641a:	41 50       	subi	r20, 0x01	; 1
    641c:	50 40       	sbci	r21, 0x00	; 0
    641e:	d8 f7       	brcc	.-10     	; 0x6416 <memcpy+0x6>
    6420:	08 95       	ret

00006422 <memset>:
    6422:	dc 01       	movw	r26, r24
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <memset+0x6>
    6426:	6d 93       	st	X+, r22
    6428:	41 50       	subi	r20, 0x01	; 1
    642a:	50 40       	sbci	r21, 0x00	; 0
    642c:	e0 f7       	brcc	.-8      	; 0x6426 <memset+0x4>
    642e:	08 95       	ret

00006430 <strnlen>:
    6430:	fc 01       	movw	r30, r24
    6432:	61 50       	subi	r22, 0x01	; 1
    6434:	70 40       	sbci	r23, 0x00	; 0
    6436:	01 90       	ld	r0, Z+
    6438:	01 10       	cpse	r0, r1
    643a:	d8 f7       	brcc	.-10     	; 0x6432 <strnlen+0x2>
    643c:	80 95       	com	r24
    643e:	90 95       	com	r25
    6440:	8e 0f       	add	r24, r30
    6442:	9f 1f       	adc	r25, r31
    6444:	08 95       	ret

00006446 <fputc>:
    6446:	0f 93       	push	r16
    6448:	1f 93       	push	r17
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	fb 01       	movw	r30, r22
    6450:	23 81       	ldd	r18, Z+3	; 0x03
    6452:	21 fd       	sbrc	r18, 1
    6454:	03 c0       	rjmp	.+6      	; 0x645c <fputc+0x16>
    6456:	8f ef       	ldi	r24, 0xFF	; 255
    6458:	9f ef       	ldi	r25, 0xFF	; 255
    645a:	2c c0       	rjmp	.+88     	; 0x64b4 <fputc+0x6e>
    645c:	22 ff       	sbrs	r18, 2
    645e:	16 c0       	rjmp	.+44     	; 0x648c <fputc+0x46>
    6460:	46 81       	ldd	r20, Z+6	; 0x06
    6462:	57 81       	ldd	r21, Z+7	; 0x07
    6464:	24 81       	ldd	r18, Z+4	; 0x04
    6466:	35 81       	ldd	r19, Z+5	; 0x05
    6468:	42 17       	cp	r20, r18
    646a:	53 07       	cpc	r21, r19
    646c:	44 f4       	brge	.+16     	; 0x647e <fputc+0x38>
    646e:	a0 81       	ld	r26, Z
    6470:	b1 81       	ldd	r27, Z+1	; 0x01
    6472:	9d 01       	movw	r18, r26
    6474:	2f 5f       	subi	r18, 0xFF	; 255
    6476:	3f 4f       	sbci	r19, 0xFF	; 255
    6478:	31 83       	std	Z+1, r19	; 0x01
    647a:	20 83       	st	Z, r18
    647c:	8c 93       	st	X, r24
    647e:	26 81       	ldd	r18, Z+6	; 0x06
    6480:	37 81       	ldd	r19, Z+7	; 0x07
    6482:	2f 5f       	subi	r18, 0xFF	; 255
    6484:	3f 4f       	sbci	r19, 0xFF	; 255
    6486:	37 83       	std	Z+7, r19	; 0x07
    6488:	26 83       	std	Z+6, r18	; 0x06
    648a:	14 c0       	rjmp	.+40     	; 0x64b4 <fputc+0x6e>
    648c:	8b 01       	movw	r16, r22
    648e:	ec 01       	movw	r28, r24
    6490:	fb 01       	movw	r30, r22
    6492:	00 84       	ldd	r0, Z+8	; 0x08
    6494:	f1 85       	ldd	r31, Z+9	; 0x09
    6496:	e0 2d       	mov	r30, r0
    6498:	19 95       	eicall
    649a:	89 2b       	or	r24, r25
    649c:	e1 f6       	brne	.-72     	; 0x6456 <fputc+0x10>
    649e:	d8 01       	movw	r26, r16
    64a0:	16 96       	adiw	r26, 0x06	; 6
    64a2:	8d 91       	ld	r24, X+
    64a4:	9c 91       	ld	r25, X
    64a6:	17 97       	sbiw	r26, 0x07	; 7
    64a8:	01 96       	adiw	r24, 0x01	; 1
    64aa:	17 96       	adiw	r26, 0x07	; 7
    64ac:	9c 93       	st	X, r25
    64ae:	8e 93       	st	-X, r24
    64b0:	16 97       	sbiw	r26, 0x06	; 6
    64b2:	ce 01       	movw	r24, r28
    64b4:	df 91       	pop	r29
    64b6:	cf 91       	pop	r28
    64b8:	1f 91       	pop	r17
    64ba:	0f 91       	pop	r16
    64bc:	08 95       	ret

000064be <printf>:
    64be:	cf 93       	push	r28
    64c0:	df 93       	push	r29
    64c2:	cd b7       	in	r28, 0x3d	; 61
    64c4:	de b7       	in	r29, 0x3e	; 62
    64c6:	ae 01       	movw	r20, r28
    64c8:	4a 5f       	subi	r20, 0xFA	; 250
    64ca:	5f 4f       	sbci	r21, 0xFF	; 255
    64cc:	fa 01       	movw	r30, r20
    64ce:	61 91       	ld	r22, Z+
    64d0:	71 91       	ld	r23, Z+
    64d2:	af 01       	movw	r20, r30
    64d4:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <__iob+0x2>
    64d8:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <__iob+0x3>
    64dc:	0e 94 28 2a 	call	0x5450	; 0x5450 <vfprintf>
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	08 95       	ret

000064e6 <puts>:
    64e6:	0f 93       	push	r16
    64e8:	1f 93       	push	r17
    64ea:	cf 93       	push	r28
    64ec:	df 93       	push	r29
    64ee:	e0 91 ff 13 	lds	r30, 0x13FF	; 0x8013ff <__iob+0x2>
    64f2:	f0 91 00 14 	lds	r31, 0x1400	; 0x801400 <__iob+0x3>
    64f6:	23 81       	ldd	r18, Z+3	; 0x03
    64f8:	21 ff       	sbrs	r18, 1
    64fa:	1b c0       	rjmp	.+54     	; 0x6532 <puts+0x4c>
    64fc:	8c 01       	movw	r16, r24
    64fe:	d0 e0       	ldi	r29, 0x00	; 0
    6500:	c0 e0       	ldi	r28, 0x00	; 0
    6502:	f8 01       	movw	r30, r16
    6504:	81 91       	ld	r24, Z+
    6506:	8f 01       	movw	r16, r30
    6508:	60 91 ff 13 	lds	r22, 0x13FF	; 0x8013ff <__iob+0x2>
    650c:	70 91 00 14 	lds	r23, 0x1400	; 0x801400 <__iob+0x3>
    6510:	db 01       	movw	r26, r22
    6512:	18 96       	adiw	r26, 0x08	; 8
    6514:	ed 91       	ld	r30, X+
    6516:	fc 91       	ld	r31, X
    6518:	19 97       	sbiw	r26, 0x09	; 9
    651a:	88 23       	and	r24, r24
    651c:	31 f0       	breq	.+12     	; 0x652a <puts+0x44>
    651e:	19 95       	eicall
    6520:	89 2b       	or	r24, r25
    6522:	79 f3       	breq	.-34     	; 0x6502 <puts+0x1c>
    6524:	df ef       	ldi	r29, 0xFF	; 255
    6526:	cf ef       	ldi	r28, 0xFF	; 255
    6528:	ec cf       	rjmp	.-40     	; 0x6502 <puts+0x1c>
    652a:	8a e0       	ldi	r24, 0x0A	; 10
    652c:	19 95       	eicall
    652e:	89 2b       	or	r24, r25
    6530:	19 f0       	breq	.+6      	; 0x6538 <puts+0x52>
    6532:	8f ef       	ldi	r24, 0xFF	; 255
    6534:	9f ef       	ldi	r25, 0xFF	; 255
    6536:	02 c0       	rjmp	.+4      	; 0x653c <puts+0x56>
    6538:	8d 2f       	mov	r24, r29
    653a:	9c 2f       	mov	r25, r28
    653c:	df 91       	pop	r29
    653e:	cf 91       	pop	r28
    6540:	1f 91       	pop	r17
    6542:	0f 91       	pop	r16
    6544:	08 95       	ret

00006546 <__ultoa_invert>:
    6546:	fa 01       	movw	r30, r20
    6548:	aa 27       	eor	r26, r26
    654a:	28 30       	cpi	r18, 0x08	; 8
    654c:	51 f1       	breq	.+84     	; 0x65a2 <__ultoa_invert+0x5c>
    654e:	20 31       	cpi	r18, 0x10	; 16
    6550:	81 f1       	breq	.+96     	; 0x65b2 <__ultoa_invert+0x6c>
    6552:	e8 94       	clt
    6554:	6f 93       	push	r22
    6556:	6e 7f       	andi	r22, 0xFE	; 254
    6558:	6e 5f       	subi	r22, 0xFE	; 254
    655a:	7f 4f       	sbci	r23, 0xFF	; 255
    655c:	8f 4f       	sbci	r24, 0xFF	; 255
    655e:	9f 4f       	sbci	r25, 0xFF	; 255
    6560:	af 4f       	sbci	r26, 0xFF	; 255
    6562:	b1 e0       	ldi	r27, 0x01	; 1
    6564:	3e d0       	rcall	.+124    	; 0x65e2 <__ultoa_invert+0x9c>
    6566:	b4 e0       	ldi	r27, 0x04	; 4
    6568:	3c d0       	rcall	.+120    	; 0x65e2 <__ultoa_invert+0x9c>
    656a:	67 0f       	add	r22, r23
    656c:	78 1f       	adc	r23, r24
    656e:	89 1f       	adc	r24, r25
    6570:	9a 1f       	adc	r25, r26
    6572:	a1 1d       	adc	r26, r1
    6574:	68 0f       	add	r22, r24
    6576:	79 1f       	adc	r23, r25
    6578:	8a 1f       	adc	r24, r26
    657a:	91 1d       	adc	r25, r1
    657c:	a1 1d       	adc	r26, r1
    657e:	6a 0f       	add	r22, r26
    6580:	71 1d       	adc	r23, r1
    6582:	81 1d       	adc	r24, r1
    6584:	91 1d       	adc	r25, r1
    6586:	a1 1d       	adc	r26, r1
    6588:	20 d0       	rcall	.+64     	; 0x65ca <__ultoa_invert+0x84>
    658a:	09 f4       	brne	.+2      	; 0x658e <__ultoa_invert+0x48>
    658c:	68 94       	set
    658e:	3f 91       	pop	r19
    6590:	2a e0       	ldi	r18, 0x0A	; 10
    6592:	26 9f       	mul	r18, r22
    6594:	11 24       	eor	r1, r1
    6596:	30 19       	sub	r19, r0
    6598:	30 5d       	subi	r19, 0xD0	; 208
    659a:	31 93       	st	Z+, r19
    659c:	de f6       	brtc	.-74     	; 0x6554 <__ultoa_invert+0xe>
    659e:	cf 01       	movw	r24, r30
    65a0:	08 95       	ret
    65a2:	46 2f       	mov	r20, r22
    65a4:	47 70       	andi	r20, 0x07	; 7
    65a6:	40 5d       	subi	r20, 0xD0	; 208
    65a8:	41 93       	st	Z+, r20
    65aa:	b3 e0       	ldi	r27, 0x03	; 3
    65ac:	0f d0       	rcall	.+30     	; 0x65cc <__ultoa_invert+0x86>
    65ae:	c9 f7       	brne	.-14     	; 0x65a2 <__ultoa_invert+0x5c>
    65b0:	f6 cf       	rjmp	.-20     	; 0x659e <__ultoa_invert+0x58>
    65b2:	46 2f       	mov	r20, r22
    65b4:	4f 70       	andi	r20, 0x0F	; 15
    65b6:	40 5d       	subi	r20, 0xD0	; 208
    65b8:	4a 33       	cpi	r20, 0x3A	; 58
    65ba:	18 f0       	brcs	.+6      	; 0x65c2 <__ultoa_invert+0x7c>
    65bc:	49 5d       	subi	r20, 0xD9	; 217
    65be:	31 fd       	sbrc	r19, 1
    65c0:	40 52       	subi	r20, 0x20	; 32
    65c2:	41 93       	st	Z+, r20
    65c4:	02 d0       	rcall	.+4      	; 0x65ca <__ultoa_invert+0x84>
    65c6:	a9 f7       	brne	.-22     	; 0x65b2 <__ultoa_invert+0x6c>
    65c8:	ea cf       	rjmp	.-44     	; 0x659e <__ultoa_invert+0x58>
    65ca:	b4 e0       	ldi	r27, 0x04	; 4
    65cc:	a6 95       	lsr	r26
    65ce:	97 95       	ror	r25
    65d0:	87 95       	ror	r24
    65d2:	77 95       	ror	r23
    65d4:	67 95       	ror	r22
    65d6:	ba 95       	dec	r27
    65d8:	c9 f7       	brne	.-14     	; 0x65cc <__ultoa_invert+0x86>
    65da:	00 97       	sbiw	r24, 0x00	; 0
    65dc:	61 05       	cpc	r22, r1
    65de:	71 05       	cpc	r23, r1
    65e0:	08 95       	ret
    65e2:	9b 01       	movw	r18, r22
    65e4:	ac 01       	movw	r20, r24
    65e6:	0a 2e       	mov	r0, r26
    65e8:	06 94       	lsr	r0
    65ea:	57 95       	ror	r21
    65ec:	47 95       	ror	r20
    65ee:	37 95       	ror	r19
    65f0:	27 95       	ror	r18
    65f2:	ba 95       	dec	r27
    65f4:	c9 f7       	brne	.-14     	; 0x65e8 <__ultoa_invert+0xa2>
    65f6:	62 0f       	add	r22, r18
    65f8:	73 1f       	adc	r23, r19
    65fa:	84 1f       	adc	r24, r20
    65fc:	95 1f       	adc	r25, r21
    65fe:	a0 1d       	adc	r26, r0
    6600:	08 95       	ret

00006602 <_exit>:
    6602:	f8 94       	cli

00006604 <__stop_program>:
    6604:	ff cf       	rjmp	.-2      	; 0x6604 <__stop_program>
